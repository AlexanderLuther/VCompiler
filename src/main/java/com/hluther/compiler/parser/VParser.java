
//----------------------------------------------------
// The following code was generated by CUP v0.11b 20160615 (GIT 4ac7450)
//----------------------------------------------------

package com.hluther.compiler.parser;

import java_cup.runtime.*;
import com.hluther.gui.VCompilerFrame;
import com.hluther.compiler.lexer.VLexer;
import java.util.LinkedList;
import com.hluther.entityClasses.Id;
import com.hluther.compiler.AST.AbstractSyntaxTree;
import com.hluther.compiler.AST.Assignment;
import com.hluther.compiler.AST.Case;
import com.hluther.compiler.AST.JavaClass;
import com.hluther.compiler.AST.Declaration;
import com.hluther.compiler.AST.DoWhile;
import com.hluther.compiler.AST.For;
import com.hluther.compiler.AST.If;
import com.hluther.compiler.AST.Import;
import com.hluther.compiler.AST.Import.ImportType;
import com.hluther.compiler.AST.Input;
import com.hluther.compiler.AST.Instruction;
import com.hluther.compiler.AST.Method;
import com.hluther.compiler.AST.Method.AccessModifier;
import com.hluther.compiler.AST.Operation;
import com.hluther.compiler.AST.Operation.OperationType;
import com.hluther.compiler.AST.Print;
import com.hluther.compiler.AST.Print.PrintType;
import com.hluther.compiler.AST.Return;
import com.hluther.compiler.AST.Switch;
import com.hluther.compiler.AST.Symbol.Type;
import com.hluther.compiler.AST.Symbol.Role;
import com.hluther.compiler.AST.While;
import java_cup.runtime.XMLElement;

/** CUP v0.11b 20160615 (GIT 4ac7450) generated parser.
  */
@SuppressWarnings({"rawtypes"})
public class VParser extends java_cup.runtime.lr_parser {

 public final Class getSymbolContainer() {
    return VSym.class;
}

  /** Default constructor. */
  @Deprecated
  public VParser() {super();}

  /** Constructor which sets the default scanner. */
  @Deprecated
  public VParser(java_cup.runtime.Scanner s) {super(s);}

  /** Constructor which sets the default scanner. */
  public VParser(java_cup.runtime.Scanner s, java_cup.runtime.SymbolFactory sf) {super(s,sf);}

  /** Production table. */
  protected static final short _production_table[][] = 
    unpackFromStrings(new String[] {
    "\000\357\000\002\002\004\000\002\002\011\000\002\046" +
    "\005\000\002\046\005\000\002\046\003\000\002\047\005" +
    "\000\002\047\005\000\002\047\005\000\002\047\003\000" +
    "\002\050\004\000\002\050\004\000\002\050\003\000\002" +
    "\051\005\000\002\051\003\000\002\051\003\000\002\051" +
    "\003\000\002\051\003\000\002\052\005\000\002\052\005" +
    "\000\002\052\005\000\002\052\005\000\002\052\005\000" +
    "\002\052\005\000\002\053\005\000\002\053\005\000\002" +
    "\053\003\000\002\054\004\000\002\054\003\000\002\055" +
    "\005\000\002\055\003\000\002\070\004\000\002\070\004" +
    "\000\002\070\002\000\002\071\004\000\002\071\004\000" +
    "\002\071\004\000\002\071\004\000\002\071\004\000\002" +
    "\071\004\000\002\071\004\000\002\071\004\000\002\071" +
    "\004\000\002\071\004\000\002\071\005\000\002\071\002" +
    "\000\002\013\016\000\002\013\014\000\002\014\014\000" +
    "\002\014\012\000\002\067\003\000\002\067\002\000\002" +
    "\111\007\000\002\111\005\000\002\072\012\000\002\072" +
    "\010\000\002\072\010\000\002\072\006\000\002\113\005" +
    "\000\002\113\003\000\002\074\011\000\002\074\007\000" +
    "\002\074\007\000\002\074\005\000\002\015\005\000\002" +
    "\015\005\000\002\073\010\000\002\073\010\000\002\007" +
    "\003\000\002\007\003\000\002\007\003\000\002\016\007" +
    "\000\002\017\007\000\002\020\014\000\002\020\012\000" +
    "\002\020\016\000\002\020\014\000\002\021\010\000\002" +
    "\021\012\000\002\023\006\000\002\116\006\000\002\116" +
    "\004\000\002\116\007\000\002\056\003\000\002\056\003" +
    "\000\002\056\003\000\002\022\010\000\002\022\010\000" +
    "\002\057\005\000\002\057\005\000\002\057\003\000\002" +
    "\057\003\000\002\024\006\000\002\024\006\000\002\024" +
    "\006\000\002\024\003\000\002\024\003\000\002\024\003" +
    "\000\002\060\003\000\002\060\003\000\002\104\004\000" +
    "\002\104\002\000\002\034\010\000\002\105\004\000\002" +
    "\105\004\000\002\105\004\000\002\105\004\000\002\105" +
    "\002\000\002\110\004\000\002\110\004\000\002\110\004" +
    "\000\002\110\004\000\002\110\004\000\002\110\004\000" +
    "\002\110\004\000\002\110\004\000\002\110\004\000\002" +
    "\110\004\000\002\110\006\000\002\110\002\000\002\037" +
    "\013\000\002\037\012\000\002\112\006\000\002\112\004" +
    "\000\002\012\003\000\002\012\003\000\002\012\003\000" +
    "\002\012\003\000\002\106\007\000\002\106\005\000\002" +
    "\115\005\000\002\115\003\000\002\035\006\000\002\035" +
    "\005\000\002\107\007\000\002\107\006\000\002\011\003" +
    "\000\002\011\003\000\002\011\003\000\002\040\011\000" +
    "\002\041\013\000\002\042\021\000\002\042\022\000\002" +
    "\043\011\000\002\043\015\000\002\045\011\000\002\045" +
    "\010\000\002\120\011\000\002\120\010\000\002\120\007" +
    "\000\002\066\003\000\002\066\003\000\002\066\003\000" +
    "\002\044\013\000\002\044\013\000\002\063\005\000\002" +
    "\063\003\000\002\065\005\000\002\065\005\000\002\065" +
    "\005\000\002\065\005\000\002\065\003\000\002\064\004" +
    "\000\002\064\004\000\002\064\005\000\002\064\003\000" +
    "\002\064\003\000\002\064\003\000\002\064\003\000\002" +
    "\064\003\000\002\036\007\000\002\036\007\000\002\036" +
    "\007\000\002\036\004\000\002\036\004\000\002\036\004" +
    "\000\002\102\005\000\002\103\005\000\002\103\005\000" +
    "\002\103\005\000\002\103\005\000\002\103\011\000\002" +
    "\103\005\000\002\103\002\000\002\075\011\000\002\075" +
    "\004\000\002\075\004\000\002\075\004\000\002\075\002" +
    "\000\002\101\011\000\002\076\004\000\002\076\004\000" +
    "\002\076\004\000\002\076\004\000\002\076\004\000\002" +
    "\076\004\000\002\076\004\000\002\076\004\000\002\076" +
    "\004\000\002\076\003\000\002\076\003\000\002\076\003" +
    "\000\002\076\002\000\002\077\007\000\002\077\005\000" +
    "\002\114\005\000\002\114\003\000\002\025\006\000\002" +
    "\025\006\000\002\025\006\000\002\100\007\000\002\100" +
    "\007\000\002\100\007\000\002\010\003\000\002\010\003" +
    "\000\002\010\003\000\002\026\011\000\002\027\013\000" +
    "\002\030\021\000\002\031\011\000\002\031\015\000\002" +
    "\033\011\000\002\033\010\000\002\117\011\000\002\117" +
    "\010\000\002\117\007\000\002\062\003\000\002\062\003" +
    "\000\002\062\003\000\002\003\012\000\002\004\003\000" +
    "\002\004\003\000\002\004\003\000\002\005\006\000\002" +
    "\006\006\000\002\032\007\000\002\061\005\000\002\061" +
    "\005\000\002\061\003\000\002\061\003" });

  /** Access to production table. */
  public short[][] production_table() {return _production_table;}

  /** Parse-action table. */
  protected static final short[][] _action_table = 
    unpackFromStrings(new String[] {
    "\000\u028b\000\004\004\005\001\002\000\004\002\u028d\001" +
    "\002\000\012\005\uffe1\043\012\044\uffcf\047\uffcf\001\002" +
    "\000\004\005\370\001\002\000\012\005\uffe1\043\012\044" +
    "\uffcf\047\uffcf\001\002\000\006\044\015\047\014\001\002" +
    "\000\012\005\uffe1\043\012\044\uffcf\047\uffcf\001\002\000" +
    "\006\044\uffd0\047\uffd0\001\002\000\004\005\uffe2\001\002" +
    "\000\004\127\353\001\002\000\004\127\016\001\002\000" +
    "\004\023\017\001\002\000\006\024\020\050\021\001\002" +
    "\000\004\011\346\001\002\000\004\127\022\001\002\000" +
    "\004\011\342\001\002\000\004\024\024\001\002\000\004" +
    "\011\025\001\002\000\010\012\026\013\027\014\031\001" +
    "\002\000\052\010\uffbe\015\uffbe\024\uffbe\040\uffbe\042\uffbe" +
    "\045\uffbe\046\uffbe\051\uffbe\052\uffbe\053\uffbe\054\uffbe\055" +
    "\uffbe\056\uffbe\057\uffbe\062\uffbe\063\uffbe\064\uffbe\066\uffbe" +
    "\105\uffbe\127\uffbe\001\002\000\052\010\uffbd\015\uffbd\024" +
    "\uffbd\040\uffbd\042\uffbd\045\uffbd\046\uffbd\051\uffbd\052\uffbd" +
    "\053\uffbd\054\uffbd\055\uffbd\056\uffbd\057\uffbd\062\uffbd\063" +
    "\uffbd\064\uffbd\066\uffbd\105\uffbd\127\uffbd\001\002\000\034" +
    "\010\053\040\040\045\uffd5\046\035\051\032\053\033\054" +
    "\043\056\054\062\047\063\034\064\057\066\036\127\042" +
    "\001\002\000\052\010\uffbc\015\uffbc\024\uffbc\040\uffbc\042" +
    "\uffbc\045\uffbc\046\uffbc\051\uffbc\052\uffbc\053\uffbc\054\uffbc" +
    "\055\uffbc\056\uffbc\057\uffbc\062\uffbc\063\uffbc\064\uffbc\066" +
    "\uffbc\105\uffbc\127\uffbc\001\002\000\004\052\322\001\002" +
    "\000\022\016\102\017\076\023\225\036\226\127\104\132" +
    "\103\133\100\134\110\001\002\000\050\010\uffa2\023\313" +
    "\040\uffa2\042\uffa2\045\uffa2\046\uffa2\051\uffa2\052\uffa2\053" +
    "\uffa2\054\uffa2\055\uffa2\056\uffa2\057\uffa2\062\uffa2\063\uffa2" +
    "\064\uffa2\066\uffa2\104\uffa2\127\uffa2\001\002\000\020\016" +
    "\102\017\076\023\107\127\104\132\103\133\100\134\110" +
    "\001\002\000\004\065\272\001\002\000\044\010\053\040" +
    "\040\042\uffd5\045\uffd5\046\035\051\032\052\uffd5\053\033" +
    "\054\043\055\uffd5\056\054\057\uffd5\062\047\063\034\064" +
    "\057\066\036\127\042\001\002\000\022\016\102\017\076" +
    "\023\225\036\226\127\104\132\103\133\100\134\110\001" +
    "\002\000\044\010\053\040\040\042\uffd5\045\uffd5\046\035" +
    "\051\032\052\uffd5\053\033\054\043\055\uffd5\056\054\057" +
    "\uffd5\062\047\063\034\064\057\066\036\127\042\001\002" +
    "\000\004\105\254\001\002\000\034\010\053\040\040\046" +
    "\035\051\032\053\033\054\043\055\uffd5\056\054\062\047" +
    "\063\034\064\057\066\036\127\042\001\002\000\044\010" +
    "\053\040\040\042\uffd5\045\uffd5\046\035\051\032\052\uffd5" +
    "\053\033\054\043\055\uffd5\056\054\057\uffd5\062\047\063" +
    "\034\064\057\066\036\127\042\001\002\000\044\010\053" +
    "\040\040\042\uffd5\045\uffd5\046\035\051\032\052\uffd5\053" +
    "\033\054\043\055\uffd5\056\054\057\uffd5\062\047\063\034" +
    "\064\057\066\036\127\042\001\002\000\044\010\053\040" +
    "\040\042\uffd5\045\uffd5\046\035\051\032\052\uffd5\053\033" +
    "\054\043\055\uffd5\056\054\057\uffd5\062\047\063\034\064" +
    "\057\066\036\127\042\001\002\000\050\010\uffa3\023\210" +
    "\040\uffa3\042\uffa3\045\uffa3\046\uffa3\051\uffa3\052\uffa3\053" +
    "\uffa3\054\uffa3\055\uffa3\056\uffa3\057\uffa3\062\uffa3\063\uffa3" +
    "\064\uffa3\066\uffa3\104\uffa3\127\uffa3\001\002\000\044\010" +
    "\053\040\040\042\uffd5\045\uffd5\046\035\051\032\052\uffd5" +
    "\053\033\054\043\055\uffd5\056\054\057\uffd5\062\047\063" +
    "\034\064\057\066\036\127\042\001\002\000\004\045\205" +
    "\001\002\000\044\010\053\040\040\042\uffd5\045\uffd5\046" +
    "\035\051\032\052\uffd5\053\033\054\043\055\uffd5\056\054" +
    "\057\uffd5\062\047\063\034\064\057\066\036\127\042\001" +
    "\002\000\004\127\150\001\002\000\004\127\071\001\002" +
    "\000\044\010\053\040\040\042\uffd5\045\uffd5\046\035\051" +
    "\032\052\uffd5\053\033\054\043\055\uffd5\056\054\057\uffd5" +
    "\062\047\063\034\064\057\066\036\127\042\001\002\000" +
    "\044\010\053\040\040\042\uffd5\045\uffd5\046\035\051\032" +
    "\052\uffd5\053\033\054\043\055\uffd5\056\054\057\uffd5\062" +
    "\047\063\034\064\057\066\036\127\042\001\002\000\050" +
    "\010\uffa1\023\062\040\uffa1\042\uffa1\045\uffa1\046\uffa1\051" +
    "\uffa1\052\uffa1\053\uffa1\054\uffa1\055\uffa1\056\uffa1\057\uffa1" +
    "\062\uffa1\063\uffa1\064\uffa1\066\uffa1\104\uffa1\127\uffa1\001" +
    "\002\000\044\010\053\040\040\042\uffd5\045\uffd5\046\035" +
    "\051\032\052\uffd5\053\033\054\043\055\uffd5\056\054\057" +
    "\uffd5\062\047\063\034\064\057\066\036\127\042\001\002" +
    "\000\014\042\uffd8\045\uffd8\052\uffd8\055\uffd8\057\uffd8\001" +
    "\002\000\006\130\063\133\064\001\002\000\004\024\uffa0" +
    "\001\002\000\004\024\uff9f\001\002\000\004\024\066\001" +
    "\002\000\046\010\uffa4\040\uffa4\042\uffa4\045\uffa4\046\uffa4" +
    "\051\uffa4\052\uffa4\053\uffa4\054\uffa4\055\uffa4\056\uffa4\057" +
    "\uffa4\062\uffa4\063\uffa4\064\uffa4\066\uffa4\104\uffa4\127\uffa4" +
    "\001\002\000\014\042\uffdb\045\uffdb\052\uffdb\055\uffdb\057" +
    "\uffdb\001\002\000\014\042\uffde\045\uffde\052\uffde\055\uffde" +
    "\057\uffde\001\002\000\006\011\073\105\072\001\002\000" +
    "\020\016\102\017\076\023\107\127\104\132\103\133\100" +
    "\134\110\001\002\000\010\012\026\013\027\014\031\001" +
    "\002\000\004\105\075\001\002\000\020\016\102\017\076" +
    "\023\107\127\104\132\103\133\100\134\110\001\002\000" +
    "\014\023\107\127\104\132\103\133\100\134\110\001\002" +
    "\000\010\016\113\017\114\060\126\001\002\000\114\010" +
    "\ufff1\015\ufff1\016\ufff1\017\ufff1\020\ufff1\021\ufff1\022\ufff1" +
    "\024\ufff1\030\ufff1\031\ufff1\032\ufff1\033\ufff1\034\ufff1\035" +
    "\ufff1\037\ufff1\040\ufff1\041\ufff1\042\ufff1\045\ufff1\046\ufff1" +
    "\051\ufff1\052\ufff1\053\ufff1\054\ufff1\055\ufff1\056\ufff1\057" +
    "\ufff1\060\ufff1\061\ufff1\062\ufff1\063\ufff1\064\ufff1\066\ufff1" +
    "\071\ufff1\104\ufff1\105\ufff1\127\ufff1\001\002\000\114\010" +
    "\ufffd\015\ufffd\016\ufffd\017\ufffd\020\117\021\120\022\116" +
    "\024\ufffd\030\ufffd\031\ufffd\032\ufffd\033\ufffd\034\ufffd\035" +
    "\ufffd\037\ufffd\040\ufffd\041\ufffd\042\ufffd\045\ufffd\046\ufffd" +
    "\051\ufffd\052\ufffd\053\ufffd\054\ufffd\055\ufffd\056\ufffd\057" +
    "\ufffd\060\ufffd\061\ufffd\062\ufffd\063\ufffd\064\ufffd\066\ufffd" +
    "\071\ufffd\104\ufffd\105\ufffd\127\ufffd\001\002\000\014\023" +
    "\107\127\104\132\103\133\100\134\110\001\002\000\114" +
    "\010\ufff4\015\ufff4\016\ufff4\017\ufff4\020\ufff4\021\ufff4\022" +
    "\ufff4\024\ufff4\030\ufff4\031\ufff4\032\ufff4\033\ufff4\034\ufff4" +
    "\035\ufff4\037\ufff4\040\ufff4\041\ufff4\042\ufff4\045\ufff4\046" +
    "\ufff4\051\ufff4\052\ufff4\053\ufff4\054\ufff4\055\ufff4\056\ufff4" +
    "\057\ufff4\060\ufff4\061\ufff4\062\ufff4\063\ufff4\064\ufff4\066" +
    "\ufff4\071\ufff4\104\ufff4\105\ufff4\127\ufff4\001\002\000\114" +
    "\010\ufff2\015\ufff2\016\ufff2\017\ufff2\020\ufff2\021\ufff2\022" +
    "\ufff2\024\ufff2\030\ufff2\031\ufff2\032\ufff2\033\ufff2\034\ufff2" +
    "\035\ufff2\037\ufff2\040\ufff2\041\ufff2\042\ufff2\045\ufff2\046" +
    "\ufff2\051\ufff2\052\ufff2\053\ufff2\054\ufff2\055\ufff2\056\ufff2" +
    "\057\ufff2\060\ufff2\061\ufff2\062\ufff2\063\ufff2\064\ufff2\066" +
    "\ufff2\071\ufff2\104\ufff2\105\ufff2\127\ufff2\001\002\000\114" +
    "\010\ufff9\015\ufff9\016\ufff9\017\ufff9\020\ufff9\021\ufff9\022" +
    "\ufff9\024\ufff9\030\ufff9\031\ufff9\032\ufff9\033\ufff9\034\ufff9" +
    "\035\ufff9\037\ufff9\040\ufff9\041\ufff9\042\ufff9\045\ufff9\046" +
    "\ufff9\051\ufff9\052\ufff9\053\ufff9\054\ufff9\055\ufff9\056\ufff9" +
    "\057\ufff9\060\ufff9\061\ufff9\062\ufff9\063\ufff9\064\ufff9\066" +
    "\ufff9\071\ufff9\104\ufff9\105\ufff9\127\ufff9\001\002\000\114" +
    "\010\ufff6\015\ufff6\016\ufff6\017\ufff6\020\ufff6\021\ufff6\022" +
    "\ufff6\024\ufff6\030\ufff6\031\ufff6\032\ufff6\033\ufff6\034\ufff6" +
    "\035\ufff6\037\ufff6\040\ufff6\041\ufff6\042\ufff6\045\ufff6\046" +
    "\ufff6\051\ufff6\052\ufff6\053\ufff6\054\ufff6\055\ufff6\056\ufff6" +
    "\057\ufff6\060\ufff6\061\ufff6\062\ufff6\063\ufff6\064\ufff6\066" +
    "\ufff6\071\ufff6\104\ufff6\105\ufff6\127\ufff6\001\002\000\020" +
    "\016\102\017\076\023\107\127\104\132\103\133\100\134" +
    "\110\001\002\000\114\010\ufff3\015\ufff3\016\ufff3\017\ufff3" +
    "\020\ufff3\021\ufff3\022\ufff3\024\ufff3\030\ufff3\031\ufff3\032" +
    "\ufff3\033\ufff3\034\ufff3\035\ufff3\037\ufff3\040\ufff3\041\ufff3" +
    "\042\ufff3\045\ufff3\046\ufff3\051\ufff3\052\ufff3\053\ufff3\054" +
    "\ufff3\055\ufff3\056\ufff3\057\ufff3\060\ufff3\061\ufff3\062\ufff3" +
    "\063\ufff3\064\ufff3\066\ufff3\071\ufff3\104\ufff3\105\ufff3\127" +
    "\ufff3\001\002\000\010\016\113\017\114\024\112\001\002" +
    "\000\114\010\ufff5\015\ufff5\016\ufff5\017\ufff5\020\ufff5\021" +
    "\ufff5\022\ufff5\024\ufff5\030\ufff5\031\ufff5\032\ufff5\033\ufff5" +
    "\034\ufff5\035\ufff5\037\ufff5\040\ufff5\041\ufff5\042\ufff5\045" +
    "\ufff5\046\ufff5\051\ufff5\052\ufff5\053\ufff5\054\ufff5\055\ufff5" +
    "\056\ufff5\057\ufff5\060\ufff5\061\ufff5\062\ufff5\063\ufff5\064" +
    "\ufff5\066\ufff5\071\ufff5\104\ufff5\105\ufff5\127\ufff5\001\002" +
    "\000\020\016\102\017\076\023\107\127\104\132\103\133" +
    "\100\134\110\001\002\000\020\016\102\017\076\023\107" +
    "\127\104\132\103\133\100\134\110\001\002\000\114\010" +
    "\ufffe\015\ufffe\016\ufffe\017\ufffe\020\117\021\120\022\116" +
    "\024\ufffe\030\ufffe\031\ufffe\032\ufffe\033\ufffe\034\ufffe\035" +
    "\ufffe\037\ufffe\040\ufffe\041\ufffe\042\ufffe\045\ufffe\046\ufffe" +
    "\051\ufffe\052\ufffe\053\ufffe\054\ufffe\055\ufffe\056\ufffe\057" +
    "\ufffe\060\ufffe\061\ufffe\062\ufffe\063\ufffe\064\ufffe\066\ufffe" +
    "\071\ufffe\104\ufffe\105\ufffe\127\ufffe\001\002\000\020\016" +
    "\102\017\076\023\107\127\104\132\103\133\100\134\110" +
    "\001\002\000\020\016\102\017\076\023\107\127\104\132" +
    "\103\133\100\134\110\001\002\000\020\016\102\017\076" +
    "\023\107\127\104\132\103\133\100\134\110\001\002\000" +
    "\114\010\ufffb\015\ufffb\016\ufffb\017\ufffb\020\ufffb\021\ufffb" +
    "\022\ufffb\024\ufffb\030\ufffb\031\ufffb\032\ufffb\033\ufffb\034" +
    "\ufffb\035\ufffb\037\ufffb\040\ufffb\041\ufffb\042\ufffb\045\ufffb" +
    "\046\ufffb\051\ufffb\052\ufffb\053\ufffb\054\ufffb\055\ufffb\056" +
    "\ufffb\057\ufffb\060\ufffb\061\ufffb\062\ufffb\063\ufffb\064\ufffb" +
    "\066\ufffb\071\ufffb\104\ufffb\105\ufffb\127\ufffb\001\002\000" +
    "\114\010\ufffc\015\ufffc\016\ufffc\017\ufffc\020\ufffc\021\ufffc" +
    "\022\ufffc\024\ufffc\030\ufffc\031\ufffc\032\ufffc\033\ufffc\034" +
    "\ufffc\035\ufffc\037\ufffc\040\ufffc\041\ufffc\042\ufffc\045\ufffc" +
    "\046\ufffc\051\ufffc\052\ufffc\053\ufffc\054\ufffc\055\ufffc\056" +
    "\ufffc\057\ufffc\060\ufffc\061\ufffc\062\ufffc\063\ufffc\064\ufffc" +
    "\066\ufffc\071\ufffc\104\ufffc\105\ufffc\127\ufffc\001\002\000" +
    "\114\010\ufffa\015\ufffa\016\ufffa\017\ufffa\020\ufffa\021\ufffa" +
    "\022\ufffa\024\ufffa\030\ufffa\031\ufffa\032\ufffa\033\ufffa\034" +
    "\ufffa\035\ufffa\037\ufffa\040\ufffa\041\ufffa\042\ufffa\045\ufffa" +
    "\046\ufffa\051\ufffa\052\ufffa\053\ufffa\054\ufffa\055\ufffa\056" +
    "\ufffa\057\ufffa\060\ufffa\061\ufffa\062\ufffa\063\ufffa\064\ufffa" +
    "\066\ufffa\071\ufffa\104\ufffa\105\ufffa\127\ufffa\001\002\000" +
    "\114\010\uffff\015\uffff\016\uffff\017\uffff\020\117\021\120" +
    "\022\116\024\uffff\030\uffff\031\uffff\032\uffff\033\uffff\034" +
    "\uffff\035\uffff\037\uffff\040\uffff\041\uffff\042\uffff\045\uffff" +
    "\046\uffff\051\uffff\052\uffff\053\uffff\054\uffff\055\uffff\056" +
    "\uffff\057\uffff\060\uffff\061\uffff\062\uffff\063\uffff\064\uffff" +
    "\066\uffff\071\uffff\104\uffff\105\uffff\127\uffff\001\002\000" +
    "\114\010\ufff8\015\ufff8\016\ufff8\017\ufff8\020\ufff8\021\ufff8" +
    "\022\ufff8\024\ufff8\030\ufff8\031\ufff8\032\ufff8\033\ufff8\034" +
    "\ufff8\035\ufff8\037\ufff8\040\ufff8\041\ufff8\042\ufff8\045\ufff8" +
    "\046\ufff8\051\ufff8\052\ufff8\053\ufff8\054\ufff8\055\ufff8\056" +
    "\ufff8\057\ufff8\060\ufff8\061\ufff8\062\ufff8\063\ufff8\064\ufff8" +
    "\066\ufff8\071\ufff8\104\ufff8\105\ufff8\127\ufff8\001\002\000" +
    "\020\016\102\017\076\023\107\127\104\132\103\133\100" +
    "\134\110\001\002\000\042\010\053\016\113\017\114\040" +
    "\040\046\035\051\032\053\033\054\043\056\054\057\uffd5" +
    "\061\130\062\047\063\034\064\057\066\036\127\042\001" +
    "\002\000\020\016\102\017\076\023\107\127\104\132\103" +
    "\133\100\134\110\001\002\000\004\057\132\001\002\000" +
    "\044\010\uffb6\040\uffb6\042\uffb6\045\uffb6\046\uffb6\051\uffb6" +
    "\052\uffb6\053\uffb6\054\uffb6\055\uffb6\056\uffb6\057\uffb6\062" +
    "\uffb6\063\uffb6\064\uffb6\066\uffb6\127\uffb6\001\002\000\040" +
    "\010\053\016\113\017\114\040\040\046\035\051\032\053" +
    "\033\054\043\056\054\057\uffd5\062\047\063\034\064\057" +
    "\066\036\127\042\001\002\000\004\057\135\001\002\000" +
    "\044\010\uffb7\040\uffb7\042\uffb7\045\uffb7\046\uffb7\051\uffb7" +
    "\052\uffb7\053\uffb7\054\uffb7\055\uffb7\056\uffb7\057\uffb7\062" +
    "\uffb7\063\uffb7\064\uffb7\066\uffb7\127\uffb7\001\002\000\114" +
    "\010\ufff7\015\ufff7\016\ufff7\017\ufff7\020\ufff7\021\ufff7\022" +
    "\ufff7\024\ufff7\030\ufff7\031\ufff7\032\ufff7\033\ufff7\034\ufff7" +
    "\035\ufff7\037\ufff7\040\ufff7\041\ufff7\042\ufff7\045\ufff7\046" +
    "\ufff7\051\ufff7\052\ufff7\053\ufff7\054\ufff7\055\ufff7\056\ufff7" +
    "\057\ufff7\060\ufff7\061\ufff7\062\ufff7\063\ufff7\064\ufff7\066" +
    "\ufff7\071\ufff7\104\ufff7\105\ufff7\127\ufff7\001\002\000\010" +
    "\016\113\017\114\060\140\001\002\000\020\016\102\017" +
    "\076\023\107\127\104\132\103\133\100\134\110\001\002" +
    "\000\042\010\053\016\113\017\114\040\040\046\035\051" +
    "\032\053\033\054\043\056\054\057\uffd5\061\142\062\047" +
    "\063\034\064\057\066\036\127\042\001\002\000\020\016" +
    "\102\017\076\023\107\127\104\132\103\133\100\134\110" +
    "\001\002\000\004\057\144\001\002\000\044\010\uffb8\040" +
    "\uffb8\042\uffb8\045\uffb8\046\uffb8\051\uffb8\052\uffb8\053\uffb8" +
    "\054\uffb8\055\uffb8\056\uffb8\057\uffb8\062\uffb8\063\uffb8\064" +
    "\uffb8\066\uffb8\127\uffb8\001\002\000\040\010\053\016\113" +
    "\017\114\040\040\046\035\051\032\053\033\054\043\056" +
    "\054\057\uffd5\062\047\063\034\064\057\066\036\127\042" +
    "\001\002\000\004\057\147\001\002\000\044\010\uffb9\040" +
    "\uffb9\042\uffb9\045\uffb9\046\uffb9\051\uffb9\052\uffb9\053\uffb9" +
    "\054\uffb9\055\uffb9\056\uffb9\057\uffb9\062\uffb9\063\uffb9\064" +
    "\uffb9\066\uffb9\127\uffb9\001\002\000\006\011\152\015\151" +
    "\001\002\000\004\127\167\001\002\000\010\012\026\013" +
    "\027\014\031\001\002\000\050\010\uffc9\015\154\040\uffc9" +
    "\042\uffc9\045\uffc9\046\uffc9\051\uffc9\052\uffc9\053\uffc9\054" +
    "\uffc9\055\uffc9\056\uffc9\057\uffc9\062\uffc9\063\uffc9\064\uffc9" +
    "\066\uffc9\105\155\127\uffc9\001\002\000\004\127\160\001" +
    "\002\000\026\016\102\017\076\023\107\062\047\063\034" +
    "\064\057\127\104\132\103\133\100\134\110\001\002\000" +
    "\050\010\uffc0\016\113\017\114\040\uffc0\042\uffc0\045\uffc0" +
    "\046\uffc0\051\uffc0\052\uffc0\053\uffc0\054\uffc0\055\uffc0\056" +
    "\uffc0\057\uffc0\062\uffc0\063\uffc0\064\uffc0\066\uffc0\127\uffc0" +
    "\001\002\000\044\010\uffbf\040\uffbf\042\uffbf\045\uffbf\046" +
    "\uffbf\051\uffbf\052\uffbf\053\uffbf\054\uffbf\055\uffbf\056\uffbf" +
    "\057\uffbf\062\uffbf\063\uffbf\064\uffbf\066\uffbf\127\uffbf\001" +
    "\002\000\006\011\163\015\162\001\002\000\044\010\uffcb" +
    "\040\uffcb\042\uffcb\045\uffcb\046\uffcb\051\uffcb\052\uffcb\053" +
    "\uffcb\054\uffcb\055\uffcb\056\uffcb\057\uffcb\062\uffcb\063\uffcb" +
    "\064\uffcb\066\uffcb\127\uffcb\001\002\000\004\127\167\001" +
    "\002\000\010\012\026\013\027\014\031\001\002\000\046" +
    "\010\uffc3\015\165\040\uffc3\042\uffc3\045\uffc3\046\uffc3\051" +
    "\uffc3\052\uffc3\053\uffc3\054\uffc3\055\uffc3\056\uffc3\057\uffc3" +
    "\062\uffc3\063\uffc3\064\uffc3\066\uffc3\127\uffc3\001\002\000" +
    "\004\127\160\001\002\000\044\010\uffc5\040\uffc5\042\uffc5" +
    "\045\uffc5\046\uffc5\051\uffc5\052\uffc5\053\uffc5\054\uffc5\055" +
    "\uffc5\056\uffc5\057\uffc5\062\uffc5\063\uffc5\064\uffc5\066\uffc5" +
    "\127\uffc5\001\002\000\006\011\uffc7\015\175\001\002\000" +
    "\004\011\171\001\002\000\010\012\026\013\027\014\031" +
    "\001\002\000\046\010\uffc4\015\173\040\uffc4\042\uffc4\045" +
    "\uffc4\046\uffc4\051\uffc4\052\uffc4\053\uffc4\054\uffc4\055\uffc4" +
    "\056\uffc4\057\uffc4\062\uffc4\063\uffc4\064\uffc4\066\uffc4\127" +
    "\uffc4\001\002\000\004\127\160\001\002\000\044\010\uffc6" +
    "\040\uffc6\042\uffc6\045\uffc6\046\uffc6\051\uffc6\052\uffc6\053" +
    "\uffc6\054\uffc6\055\uffc6\056\uffc6\057\uffc6\062\uffc6\063\uffc6" +
    "\064\uffc6\066\uffc6\127\uffc6\001\002\000\004\127\167\001" +
    "\002\000\004\011\uffc8\001\002\000\004\011\200\001\002" +
    "\000\010\012\026\013\027\014\031\001\002\000\046\010" +
    "\uffca\015\202\040\uffca\042\uffca\045\uffca\046\uffca\051\uffca" +
    "\052\uffca\053\uffca\054\uffca\055\uffca\056\uffca\057\uffca\062" +
    "\uffca\063\uffca\064\uffca\066\uffca\127\uffca\001\002\000\004" +
    "\127\160\001\002\000\044\010\uffcc\040\uffcc\042\uffcc\045" +
    "\uffcc\046\uffcc\051\uffcc\052\uffcc\053\uffcc\054\uffcc\055\uffcc" +
    "\056\uffcc\057\uffcc\062\uffcc\063\uffcc\064\uffcc\066\uffcc\127" +
    "\uffcc\001\002\000\014\042\uffdd\045\uffdd\052\uffdd\055\uffdd" +
    "\057\uffdd\001\002\000\004\044\206\001\002\000\012\005" +
    "\uffd4\043\uffd4\044\uffd4\047\uffd4\001\002\000\014\042\uffdf" +
    "\045\uffdf\052\uffdf\055\uffdf\057\uffdf\001\002\000\006\130" +
    "\063\133\064\001\002\000\004\024\212\001\002\000\046" +
    "\010\uffa6\040\uffa6\042\uffa6\045\uffa6\046\uffa6\051\uffa6\052" +
    "\uffa6\053\uffa6\054\uffa6\055\uffa6\056\uffa6\057\uffa6\062\uffa6" +
    "\063\uffa6\064\uffa6\066\uffa6\104\uffa6\127\uffa6\001\002\000" +
    "\014\042\uffd7\045\uffd7\052\uffd7\055\uffd7\057\uffd7\001\002" +
    "\000\014\042\uffe0\045\uffe0\052\uffe0\055\uffe0\057\uffe0\001" +
    "\002\000\014\042\uffda\045\uffda\052\uffda\055\uffda\057\uffda" +
    "\001\002\000\004\055\217\001\002\000\004\053\220\001" +
    "\002\000\022\016\102\017\076\023\225\036\226\127\104" +
    "\132\103\133\100\134\110\001\002\000\022\016\113\017" +
    "\114\030\242\031\241\032\245\033\243\034\240\105\244" +
    "\001\002\000\056\010\uffe6\024\uffe6\035\uffe6\037\uffe6\040" +
    "\uffe6\041\uffe6\042\uffe6\045\uffe6\046\uffe6\051\uffe6\052\uffe6" +
    "\053\uffe6\054\uffe6\055\uffe6\056\uffe6\057\uffe6\062\uffe6\063" +
    "\uffe6\064\uffe6\066\uffe6\104\uffe6\127\uffe6\001\002\000\056" +
    "\010\uffe8\024\uffe8\035\uffe8\037\uffe8\040\uffe8\041\uffe8\042" +
    "\uffe8\045\uffe8\046\uffe8\051\uffe8\052\uffe8\053\uffe8\054\uffe8" +
    "\055\uffe8\056\uffe8\057\uffe8\062\uffe8\063\uffe8\064\uffe8\066" +
    "\uffe8\104\uffe8\127\uffe8\001\002\000\056\010\uffe4\024\uffe4" +
    "\035\uffe4\037\uffe4\040\uffe4\041\uffe4\042\uffe4\045\uffe4\046" +
    "\uffe4\051\uffe4\052\uffe4\053\uffe4\054\uffe4\055\uffe4\056\uffe4" +
    "\057\uffe4\062\uffe4\063\uffe4\064\uffe4\066\uffe4\104\uffe4\127" +
    "\uffe4\001\002\000\022\016\102\017\076\023\225\036\226" +
    "\127\104\132\103\133\100\134\110\001\002\000\020\016" +
    "\102\017\076\023\225\127\104\132\103\133\100\134\110" +
    "\001\002\000\050\010\uffba\035\230\037\231\040\uffba\042" +
    "\uffba\045\uffba\046\uffba\051\uffba\052\uffba\053\uffba\054\uffba" +
    "\055\uffba\056\uffba\057\uffba\062\uffba\063\uffba\064\uffba\066" +
    "\uffba\127\uffba\001\002\000\022\016\102\017\076\023\225" +
    "\036\226\127\104\132\103\133\100\134\110\001\002\000" +
    "\022\016\102\017\076\023\225\036\226\127\104\132\103" +
    "\133\100\134\110\001\002\000\056\010\uffe9\024\uffe9\035" +
    "\uffe9\037\uffe9\040\uffe9\041\uffe9\042\uffe9\045\uffe9\046\uffe9" +
    "\051\uffe9\052\uffe9\053\uffe9\054\uffe9\055\uffe9\056\uffe9\057" +
    "\uffe9\062\uffe9\063\uffe9\064\uffe9\066\uffe9\104\uffe9\127\uffe9" +
    "\001\002\000\056\010\uffea\024\uffea\035\uffea\037\uffea\040" +
    "\uffea\041\uffea\042\uffea\045\uffea\046\uffea\051\uffea\052\uffea" +
    "\053\uffea\054\uffea\055\uffea\056\uffea\057\uffea\062\uffea\063" +
    "\uffea\064\uffea\066\uffea\104\uffea\127\uffea\001\002\000\056" +
    "\010\uffe7\024\uffe7\035\uffe7\037\uffe7\040\uffe7\041\uffe7\042" +
    "\uffe7\045\uffe7\046\uffe7\051\uffe7\052\uffe7\053\uffe7\054\uffe7" +
    "\055\uffe7\056\uffe7\057\uffe7\062\uffe7\063\uffe7\064\uffe7\066" +
    "\uffe7\104\uffe7\127\uffe7\001\002\000\024\016\113\017\114" +
    "\024\112\030\242\031\241\032\245\033\243\034\240\105" +
    "\244\001\002\000\010\024\237\035\230\037\231\001\002" +
    "\000\056\010\uffe5\024\uffe5\035\uffe5\037\uffe5\040\uffe5\041" +
    "\uffe5\042\uffe5\045\uffe5\046\uffe5\051\uffe5\052\uffe5\053\uffe5" +
    "\054\uffe5\055\uffe5\056\uffe5\057\uffe5\062\uffe5\063\uffe5\064" +
    "\uffe5\066\uffe5\104\uffe5\127\uffe5\001\002\000\020\016\102" +
    "\017\076\023\107\127\104\132\103\133\100\134\110\001" +
    "\002\000\020\016\102\017\076\023\107\127\104\132\103" +
    "\133\100\134\110\001\002\000\020\016\102\017\076\023" +
    "\107\127\104\132\103\133\100\134\110\001\002\000\020" +
    "\016\102\017\076\023\107\127\104\132\103\133\100\134" +
    "\110\001\002\000\020\016\102\017\076\023\107\127\104" +
    "\132\103\133\100\134\110\001\002\000\020\016\102\017" +
    "\076\023\107\127\104\132\103\133\100\134\110\001\002" +
    "\000\062\010\uffed\016\113\017\114\024\uffed\035\uffed\037" +
    "\uffed\040\uffed\041\uffed\042\uffed\045\uffed\046\uffed\051\uffed" +
    "\052\uffed\053\uffed\054\uffed\055\uffed\056\uffed\057\uffed\062" +
    "\uffed\063\uffed\064\uffed\066\uffed\104\uffed\127\uffed\001\002" +
    "\000\062\010\ufff0\016\113\017\114\024\ufff0\035\ufff0\037" +
    "\ufff0\040\ufff0\041\ufff0\042\ufff0\045\ufff0\046\ufff0\051\ufff0" +
    "\052\ufff0\053\ufff0\054\ufff0\055\ufff0\056\ufff0\057\ufff0\062" +
    "\ufff0\063\ufff0\064\ufff0\066\ufff0\104\ufff0\127\ufff0\001\002" +
    "\000\062\010\uffec\016\113\017\114\024\uffec\035\uffec\037" +
    "\uffec\040\uffec\041\uffec\042\uffec\045\uffec\046\uffec\051\uffec" +
    "\052\uffec\053\uffec\054\uffec\055\uffec\056\uffec\057\uffec\062" +
    "\uffec\063\uffec\064\uffec\066\uffec\104\uffec\127\uffec\001\002" +
    "\000\062\010\uffef\016\113\017\114\024\uffef\035\uffef\037" +
    "\uffef\040\uffef\041\uffef\042\uffef\045\uffef\046\uffef\051\uffef" +
    "\052\uffef\053\uffef\054\uffef\055\uffef\056\uffef\057\uffef\062" +
    "\uffef\063\uffef\064\uffef\066\uffef\104\uffef\127\uffef\001\002" +
    "\000\062\010\uffee\016\113\017\114\024\uffee\035\uffee\037" +
    "\uffee\040\uffee\041\uffee\042\uffee\045\uffee\046\uffee\051\uffee" +
    "\052\uffee\053\uffee\054\uffee\055\uffee\056\uffee\057\uffee\062" +
    "\uffee\063\uffee\064\uffee\066\uffee\104\uffee\127\uffee\001\002" +
    "\000\062\010\uffeb\016\113\017\114\024\uffeb\035\uffeb\037" +
    "\uffeb\040\uffeb\041\uffeb\042\uffeb\045\uffeb\046\uffeb\051\uffeb" +
    "\052\uffeb\053\uffeb\054\uffeb\055\uffeb\056\uffeb\057\uffeb\062" +
    "\uffeb\063\uffeb\064\uffeb\066\uffeb\104\uffeb\127\uffeb\001\002" +
    "\000\026\016\102\017\076\023\107\062\047\063\034\064" +
    "\057\127\104\132\103\133\100\134\110\001\002\000\050" +
    "\010\uffc2\016\113\017\114\040\uffc2\042\uffc2\045\uffc2\046" +
    "\uffc2\051\uffc2\052\uffc2\053\uffc2\054\uffc2\055\uffc2\056\uffc2" +
    "\057\uffc2\062\uffc2\063\uffc2\064\uffc2\066\uffc2\127\uffc2\001" +
    "\002\000\044\010\uffc1\040\uffc1\042\uffc1\045\uffc1\046\uffc1" +
    "\051\uffc1\052\uffc1\053\uffc1\054\uffc1\055\uffc1\056\uffc1\057" +
    "\uffc1\062\uffc1\063\uffc1\064\uffc1\066\uffc1\127\uffc1\001\002" +
    "\000\014\042\uffd9\045\uffd9\052\uffd9\055\uffd9\057\uffd9\001" +
    "\002\000\010\035\230\037\231\041\261\001\002\000\036" +
    "\010\053\040\040\042\uffd5\045\uffd5\046\035\051\032\053" +
    "\033\054\043\056\054\062\047\063\034\064\057\066\036" +
    "\127\042\001\002\000\006\042\263\045\264\001\002\000" +
    "\034\010\053\040\040\045\uffd5\046\035\051\032\053\033" +
    "\054\043\056\054\062\047\063\034\064\057\066\036\127" +
    "\042\001\002\000\004\040\265\001\002\000\044\010\uffb5" +
    "\040\uffb5\042\uffb5\045\uffb5\046\uffb5\051\uffb5\052\uffb5\053" +
    "\uffb5\054\uffb5\055\uffb5\056\uffb5\057\uffb5\062\uffb5\063\uffb5" +
    "\064\uffb5\066\uffb5\127\uffb5\001\002\000\004\045\267\001" +
    "\002\000\004\040\270\001\002\000\044\010\uffb4\040\uffb4" +
    "\042\uffb4\045\uffb4\046\uffb4\051\uffb4\052\uffb4\053\uffb4\054" +
    "\uffb4\055\uffb4\056\uffb4\057\uffb4\062\uffb4\063\uffb4\064\uffb4" +
    "\066\uffb4\127\uffb4\001\002\000\014\042\uffdc\045\uffdc\052" +
    "\uffdc\055\uffdc\057\uffdc\001\002\000\006\067\274\070\273" +
    "\001\002\000\004\023\306\001\002\000\004\023\275\001" +
    "\002\000\022\016\102\017\076\023\107\127\104\130\277" +
    "\132\103\133\100\134\110\001\002\000\012\016\113\017" +
    "\114\024\uffa7\071\304\001\002\000\006\024\uffa8\071\302" +
    "\001\002\000\004\024\301\001\002\000\044\010\uffac\040" +
    "\uffac\042\uffac\045\uffac\046\uffac\051\uffac\052\uffac\053\uffac" +
    "\054\uffac\055\uffac\056\uffac\057\uffac\062\uffac\063\uffac\064" +
    "\uffac\066\uffac\127\uffac\001\002\000\022\016\102\017\076" +
    "\023\107\127\104\130\277\132\103\133\100\134\110\001" +
    "\002\000\004\024\uffaa\001\002\000\022\016\102\017\076" +
    "\023\107\127\104\130\277\132\103\133\100\134\110\001" +
    "\002\000\004\024\uffa9\001\002\000\022\016\102\017\076" +
    "\023\107\127\104\130\277\132\103\133\100\134\110\001" +
    "\002\000\004\024\310\001\002\000\044\010\uffab\040\uffab" +
    "\042\uffab\045\uffab\046\uffab\051\uffab\052\uffab\053\uffab\054" +
    "\uffab\055\uffab\056\uffab\057\uffab\062\uffab\063\uffab\064\uffab" +
    "\066\uffab\127\uffab\001\002\000\050\010\053\016\113\017" +
    "\114\040\040\042\uffd5\045\uffd5\046\035\051\032\052\uffd5" +
    "\053\033\054\043\055\uffd5\056\054\057\uffd5\062\047\063" +
    "\034\064\057\066\036\127\042\001\002\000\014\042\uffd6" +
    "\045\uffd6\052\uffd6\055\uffd6\057\uffd6\001\002\000\006\130" +
    "\063\133\064\001\002\000\004\024\315\001\002\000\046" +
    "\010\uffa5\040\uffa5\042\uffa5\045\uffa5\046\uffa5\051\uffa5\052" +
    "\uffa5\053\uffa5\054\uffa5\055\uffa5\056\uffa5\057\uffa5\062\uffa5" +
    "\063\uffa5\064\uffa5\066\uffa5\104\uffa5\127\uffa5\001\002\000" +
    "\040\010\053\035\230\037\231\040\040\045\uffd5\046\035" +
    "\051\032\053\033\054\043\056\054\062\047\063\034\064" +
    "\057\066\036\127\042\001\002\000\004\045\320\001\002" +
    "\000\004\053\321\001\002\000\044\010\uffbb\040\uffbb\042" +
    "\uffbb\045\uffbb\046\uffbb\051\uffbb\052\uffbb\053\uffbb\054\uffbb" +
    "\055\uffbb\056\uffbb\057\uffbb\062\uffbb\063\uffbb\064\uffbb\066" +
    "\uffbb\127\uffbb\001\002\000\004\127\323\001\002\000\006" +
    "\045\325\052\326\001\002\000\044\010\uffb3\040\uffb3\042" +
    "\uffb3\045\uffb3\046\uffb3\051\uffb3\052\uffb3\053\uffb3\054\uffb3" +
    "\055\uffb3\056\uffb3\057\uffb3\062\uffb3\063\uffb3\064\uffb3\066" +
    "\uffb3\127\uffb3\001\002\000\004\051\341\001\002\000\012" +
    "\042\330\132\331\133\332\134\333\001\002\000\036\010" +
    "\053\040\040\045\uffd5\046\035\051\032\052\uffd5\053\033" +
    "\054\043\056\054\062\047\063\034\064\057\066\036\127" +
    "\042\001\002\000\034\010\053\040\040\045\uffd5\046\035" +
    "\051\032\053\033\054\043\056\054\062\047\063\034\064" +
    "\057\066\036\127\042\001\002\000\036\010\uffaf\040\uffaf" +
    "\045\uffaf\046\uffaf\051\uffaf\052\uffaf\053\uffaf\054\uffaf\056" +
    "\uffaf\062\uffaf\063\uffaf\064\uffaf\066\uffaf\127\uffaf\001\002" +
    "\000\036\010\uffad\040\uffad\045\uffad\046\uffad\051\uffad\052" +
    "\uffad\053\uffad\054\uffad\056\uffad\062\uffad\063\uffad\064\uffad" +
    "\066\uffad\127\uffad\001\002\000\036\010\uffae\040\uffae\045" +
    "\uffae\046\uffae\051\uffae\052\uffae\053\uffae\054\uffae\056\uffae" +
    "\062\uffae\063\uffae\064\uffae\066\uffae\127\uffae\001\002\000" +
    "\004\045\335\001\002\000\004\051\336\001\002\000\044" +
    "\010\uffb0\040\uffb0\042\uffb0\045\uffb0\046\uffb0\051\uffb0\052" +
    "\uffb0\053\uffb0\054\uffb0\055\uffb0\056\uffb0\057\uffb0\062\uffb0" +
    "\063\uffb0\064\uffb0\066\uffb0\127\uffb0\001\002\000\006\045" +
    "\325\052\326\001\002\000\044\010\uffb2\040\uffb2\042\uffb2" +
    "\045\uffb2\046\uffb2\051\uffb2\052\uffb2\053\uffb2\054\uffb2\055" +
    "\uffb2\056\uffb2\057\uffb2\062\uffb2\063\uffb2\064\uffb2\066\uffb2" +
    "\127\uffb2\001\002\000\044\010\uffb1\040\uffb1\042\uffb1\045" +
    "\uffb1\046\uffb1\051\uffb1\052\uffb1\053\uffb1\054\uffb1\055\uffb1" +
    "\056\uffb1\057\uffb1\062\uffb1\063\uffb1\064\uffb1\066\uffb1\127" +
    "\uffb1\001\002\000\010\012\026\013\027\014\031\001\002" +
    "\000\006\015\344\024\uffcd\001\002\000\004\127\022\001" +
    "\002\000\004\024\uffce\001\002\000\010\012\026\013\027" +
    "\014\031\001\002\000\034\010\053\040\040\045\uffd5\046" +
    "\035\051\032\053\033\054\043\056\054\062\047\063\034" +
    "\064\057\066\036\127\042\001\002\000\004\045\351\001" +
    "\002\000\004\044\352\001\002\000\012\005\uffd3\043\uffd3" +
    "\044\uffd3\047\uffd3\001\002\000\004\023\354\001\002\000" +
    "\006\024\355\050\356\001\002\000\034\010\053\040\040" +
    "\045\uffd5\046\035\051\032\053\033\054\043\056\054\062" +
    "\047\063\034\064\057\066\036\127\042\001\002\000\004" +
    "\127\022\001\002\000\004\024\360\001\002\000\034\010" +
    "\053\040\040\045\uffd5\046\035\051\032\053\033\054\043" +
    "\056\054\062\047\063\034\064\057\066\036\127\042\001" +
    "\002\000\004\045\362\001\002\000\004\047\363\001\002" +
    "\000\012\005\uffd2\043\uffd2\044\uffd2\047\uffd2\001\002\000" +
    "\004\045\365\001\002\000\004\047\366\001\002\000\012" +
    "\005\uffd1\043\uffd1\044\uffd1\047\uffd1\001\002\000\004\005" +
    "\uffe3\001\002\000\006\006\uff9d\043\372\001\002\000\004" +
    "\006\u01d3\001\002\000\004\122\375\001\002\000\006\006" +
    "\uff9d\043\372\001\002\000\004\006\uff9e\001\002\000\004" +
    "\127\376\001\002\000\004\102\377\001\002\000\016\012" +
    "\u0101\014\u010a\043\u0102\101\u0109\103\uff97\127\u0107\001\002" +
    "\000\016\012\u0101\014\u010a\043\u0102\101\u0109\103\uff97\127" +
    "\u0107\001\002\000\004\127\uff7a\001\002\000\012\012\u0131" +
    "\014\u0134\077\u0135\101\u0133\001\002\000\016\012\u0101\014" +
    "\u010a\043\u0102\101\u0109\103\uff97\127\u0107\001\002\000\004" +
    "\103\u012f\001\002\000\016\012\u0101\014\u010a\043\u0102\101" +
    "\u0109\103\uff97\127\u0107\001\002\000\004\127\u0122\001\002" +
    "\000\004\027\u010c\001\002\000\016\012\u0101\014\u010a\043" +
    "\u0102\101\u0109\103\uff97\127\u0107\001\002\000\004\127\uff79" +
    "\001\002\000\004\127\uff78\001\002\000\004\103\uff99\001" +
    "\002\000\026\016\102\017\076\023\107\062\u010f\063\u0111" +
    "\064\u010d\127\104\132\103\133\100\134\110\001\002\000" +
    "\006\023\u011d\104\u011e\001\002\000\010\016\113\017\114" +
    "\104\u011c\001\002\000\006\023\u0117\104\u0118\001\002\000" +
    "\044\012\uff7d\014\uff7d\040\uff7d\043\uff7d\046\uff7d\053\uff7d" +
    "\054\uff7d\056\uff7d\062\uff7d\063\uff7d\064\uff7d\101\uff7d\103" +
    "\uff7d\107\uff7d\112\uff7d\123\uff7d\127\uff7d\001\002\000\006" +
    "\023\u0112\104\u0113\001\002\000\004\130\u0114\001\002\000" +
    "\044\012\uff54\014\uff54\040\uff54\043\uff54\046\uff54\053\uff54" +
    "\054\uff54\056\uff54\062\uff54\063\uff54\064\uff54\101\uff54\103" +
    "\uff54\107\uff54\112\uff54\123\uff54\127\uff54\001\002\000\004" +
    "\024\u0115\001\002\000\004\104\u0116\001\002\000\044\012" +
    "\uff57\014\uff57\040\uff57\043\uff57\046\uff57\053\uff57\054\uff57" +
    "\056\uff57\062\uff57\063\uff57\064\uff57\101\uff57\103\uff57\107" +
    "\uff57\112\uff57\123\uff57\127\uff57\001\002\000\004\130\u0119" +
    "\001\002\000\044\012\uff55\014\uff55\040\uff55\043\uff55\046" +
    "\uff55\053\uff55\054\uff55\056\uff55\062\uff55\063\uff55\064\uff55" +
    "\101\uff55\103\uff55\107\uff55\112\uff55\123\uff55\127\uff55\001" +
    "\002\000\004\024\u011a\001\002\000\004\104\u011b\001\002" +
    "\000\044\012\uff58\014\uff58\040\uff58\043\uff58\046\uff58\053" +
    "\uff58\054\uff58\056\uff58\062\uff58\063\uff58\064\uff58\101\uff58" +
    "\103\uff58\107\uff58\112\uff58\123\uff58\127\uff58\001\002\000" +
    "\044\012\uff7e\014\uff7e\040\uff7e\043\uff7e\046\uff7e\053\uff7e" +
    "\054\uff7e\056\uff7e\062\uff7e\063\uff7e\064\uff7e\101\uff7e\103" +
    "\uff7e\107\uff7e\112\uff7e\123\uff7e\127\uff7e\001\002\000\004" +
    "\130\u011f\001\002\000\044\012\uff53\014\uff53\040\uff53\043" +
    "\uff53\046\uff53\053\uff53\054\uff53\056\uff53\062\uff53\063\uff53" +
    "\064\uff53\101\uff53\103\uff53\107\uff53\112\uff53\123\uff53\127" +
    "\uff53\001\002\000\004\024\u0120\001\002\000\004\104\u0121" +
    "\001\002\000\044\012\uff56\014\uff56\040\uff56\043\uff56\046" +
    "\uff56\053\uff56\054\uff56\056\uff56\062\uff56\063\uff56\064\uff56" +
    "\101\uff56\103\uff56\107\uff56\112\uff56\123\uff56\127\uff56\001" +
    "\002\000\010\015\u0123\027\u0125\104\u0124\001\002\000\004" +
    "\127\u0129\001\002\000\044\012\uff81\014\uff81\040\uff81\043" +
    "\uff81\046\uff81\053\uff81\054\uff81\056\uff81\062\uff81\063\uff81" +
    "\064\uff81\101\uff81\103\uff81\107\uff81\112\uff81\123\uff81\127" +
    "\uff81\001\002\000\026\016\102\017\076\023\107\062\u010f" +
    "\063\u0111\064\u010d\127\104\132\103\133\100\134\110\001" +
    "\002\000\010\016\113\017\114\104\u0128\001\002\000\044" +
    "\012\uff7b\014\uff7b\040\uff7b\043\uff7b\046\uff7b\053\uff7b\054" +
    "\uff7b\056\uff7b\062\uff7b\063\uff7b\064\uff7b\101\uff7b\103\uff7b" +
    "\107\uff7b\112\uff7b\123\uff7b\127\uff7b\001\002\000\044\012" +
    "\uff7c\014\uff7c\040\uff7c\043\uff7c\046\uff7c\053\uff7c\054\uff7c" +
    "\056\uff7c\062\uff7c\063\uff7c\064\uff7c\101\uff7c\103\uff7c\107" +
    "\uff7c\112\uff7c\123\uff7c\127\uff7c\001\002\000\006\015\u012c" +
    "\104\uff7f\001\002\000\004\104\u012b\001\002\000\044\012" +
    "\uff82\014\uff82\040\uff82\043\uff82\046\uff82\053\uff82\054\uff82" +
    "\056\uff82\062\uff82\063\uff82\064\uff82\101\uff82\103\uff82\107" +
    "\uff82\112\uff82\123\uff82\127\uff82\001\002\000\004\127\u0129" +
    "\001\002\000\004\104\uff80\001\002\000\004\103\uff9b\001" +
    "\002\000\006\006\uff9c\043\uff9c\001\002\000\004\103\uff98" +
    "\001\002\000\004\127\uff86\001\002\000\004\127\u0136\001" +
    "\002\000\004\127\uff85\001\002\000\004\127\uff84\001\002" +
    "\000\004\127\uff83\001\002\000\004\023\u0137\001\002\000" +
    "\012\012\u0101\014\u010a\024\u0138\101\u0109\001\002\000\004" +
    "\102\u01cf\001\002\000\004\127\u01cc\001\002\000\004\024" +
    "\u013b\001\002\000\004\102\u013c\001\002\000\040\012\u0101" +
    "\014\u010a\040\u0141\046\u013e\053\u013d\054\u0143\056\u0148\062" +
    "\u010f\063\u0111\064\u010d\101\u0109\103\uff8b\107\u013f\123\u0146" +
    "\127\u0107\001\002\000\004\023\u01c6\001\002\000\020\016" +
    "\102\017\076\023\107\127\104\132\103\133\100\134\110" +
    "\001\002\000\004\023\u01ad\001\002\000\042\012\u0101\014" +
    "\u010a\040\u0141\046\u013e\053\u013d\054\u0143\056\u0148\062\u010f" +
    "\063\u0111\064\u010d\101\u0109\103\uff8b\107\u013f\112\uff8b\123" +
    "\u0146\127\u0107\001\002\000\004\023\u01a2\001\002\000\042" +
    "\012\u0101\014\u010a\040\u0141\046\u013e\053\u013d\054\u0143\056" +
    "\u0148\062\u010f\063\u0111\064\u010d\101\u0109\103\uff8b\107\u013f" +
    "\112\uff8b\123\u0146\127\u0107\001\002\000\004\102\u0199\001" +
    "\002\000\042\012\u0101\014\u010a\040\u0141\046\u013e\053\u013d" +
    "\054\u0143\056\u0148\062\u010f\063\u0111\064\u010d\101\u0109\103" +
    "\uff8b\107\u013f\112\uff8b\123\u0146\127\u0107\001\002\000\042" +
    "\012\u0101\014\u010a\040\u0141\046\u013e\053\u013d\054\u0143\056" +
    "\u0148\062\u010f\063\u0111\064\u010d\101\u0109\103\uff8b\107\u013f" +
    "\112\uff8b\123\u0146\127\u0107\001\002\000\004\065\u0172\001" +
    "\002\000\004\103\u0171\001\002\000\004\023\u0155\001\002" +
    "\000\042\012\u0101\014\u010a\040\u0141\046\u013e\053\u013d\054" +
    "\u0143\056\u0148\062\u010f\063\u0111\064\u010d\101\u0109\103\uff8b" +
    "\107\u013f\112\uff8b\123\u0146\127\u0107\001\002\000\042\012" +
    "\u0101\014\u010a\040\u0141\046\u013e\053\u013d\054\u0143\056\u0148" +
    "\062\u010f\063\u0111\064\u010d\101\u0109\103\uff8b\107\u013f\112" +
    "\uff8b\123\u0146\127\u0107\001\002\000\042\012\u0101\014\u010a" +
    "\040\u0141\046\u013e\053\u013d\054\u0143\056\u0148\062\u010f\063" +
    "\u0111\064\u010d\101\u0109\103\uff8b\107\u013f\112\uff8b\123\u0146" +
    "\127\u0107\001\002\000\042\012\u0101\014\u010a\040\u0141\046" +
    "\u013e\053\u013d\054\u0143\056\u0148\062\u010f\063\u0111\064\u010d" +
    "\101\u0109\103\uff8b\107\u013f\112\uff8b\123\u0146\127\u0107\001" +
    "\002\000\042\012\u0101\014\u010a\040\u0141\046\u013e\053\u013d" +
    "\054\u0143\056\u0148\062\u010f\063\u0111\064\u010d\101\u0109\103" +
    "\uff8b\107\u013f\112\uff8b\123\u0146\127\u0107\001\002\000\042" +
    "\012\u0101\014\u010a\040\u0141\046\u013e\053\u013d\054\u0143\056" +
    "\u0148\062\u010f\063\u0111\064\u010d\101\u0109\103\uff8b\107\u013f" +
    "\112\uff8b\123\u0146\127\u0107\001\002\000\006\103\uff8f\112" +
    "\uff8f\001\002\000\006\103\uff8e\112\uff8e\001\002\000\006" +
    "\103\uff91\112\uff91\001\002\000\006\103\uff96\112\uff96\001" +
    "\002\000\006\103\uff92\112\uff92\001\002\000\006\103\uff95" +
    "\112\uff95\001\002\000\012\012\u0101\014\u010a\101\u0109\127" +
    "\u0156\001\002\000\004\027\u0165\001\002\000\004\127\u0158" +
    "\001\002\000\004\027\u0159\001\002\000\020\016\102\017" +
    "\076\023\107\127\104\132\103\133\100\134\110\001\002" +
    "\000\010\016\113\017\114\104\u015b\001\002\000\022\016" +
    "\102\017\076\023\225\036\226\127\104\132\103\133\100" +
    "\134\110\001\002\000\010\035\230\037\231\104\u015d\001" +
    "\002\000\004\127\u015e\001\002\000\004\027\u015f\001\002" +
    "\000\020\016\102\017\076\023\107\127\104\132\103\133" +
    "\100\134\110\001\002\000\010\016\113\017\114\024\u0161" +
    "\001\002\000\004\102\u0162\001\002\000\040\012\u0101\014" +
    "\u010a\040\u0141\046\u013e\053\u013d\054\u0143\056\u0148\062\u010f" +
    "\063\u0111\064\u010d\101\u0109\103\uff8b\107\u013f\123\u0146\127" +
    "\u0107\001\002\000\004\103\u0164\001\002\000\042\012\uff74" +
    "\014\uff74\040\uff74\046\uff74\053\uff74\054\uff74\056\uff74\062" +
    "\uff74\063\uff74\064\uff74\101\uff74\103\uff74\107\uff74\112\uff74" +
    "\123\uff74\127\uff74\001\002\000\020\016\102\017\076\023" +
    "\107\127\104\132\103\133\100\134\110\001\002\000\010" +
    "\016\113\017\114\104\u0167\001\002\000\022\016\102\017" +
    "\076\023\225\036\226\127\104\132\103\133\100\134\110" +
    "\001\002\000\010\035\230\037\231\104\u0169\001\002\000" +
    "\004\127\u016a\001\002\000\004\027\u016b\001\002\000\020" +
    "\016\102\017\076\023\107\127\104\132\103\133\100\134" +
    "\110\001\002\000\010\016\113\017\114\024\u016d\001\002" +
    "\000\004\102\u016e\001\002\000\040\012\u0101\014\u010a\040" +
    "\u0141\046\u013e\053\u013d\054\u0143\056\u0148\062\u010f\063\u0111" +
    "\064\u010d\101\u0109\103\uff8b\107\u013f\123\u0146\127\u0107\001" +
    "\002\000\004\103\u0170\001\002\000\042\012\uff75\014\uff75" +
    "\040\uff75\046\uff75\053\uff75\054\uff75\056\uff75\062\uff75\063" +
    "\uff75\064\uff75\101\uff75\103\uff75\107\uff75\112\uff75\123\uff75" +
    "\127\uff75\001\002\000\016\012\uff8a\014\uff8a\043\uff8a\101" +
    "\uff8a\103\uff8a\127\uff8a\001\002\000\004\124\u0173\001\002" +
    "\000\004\065\u0174\001\002\000\006\125\u0175\126\u0176\001" +
    "\002\000\004\023\u0193\001\002\000\004\023\u0177\001\002" +
    "\000\022\016\u017b\017\u0178\023\u017e\127\u017d\130\u017a\132" +
    "\u017c\133\u0179\134\u017f\001\002\000\022\016\u017b\017\u0178" +
    "\023\u017e\127\u017d\130\u017a\132\u017c\133\u0179\134\u017f\001" +
    "\002\000\016\016\uff5a\017\uff5a\020\uff5a\021\uff5a\022\uff5a" +
    "\024\uff5a\001\002\000\016\016\uff59\017\uff59\020\uff59\021" +
    "\uff59\022\uff59\024\uff59\001\002\000\022\016\u017b\017\u0178" +
    "\023\u017e\127\u017d\130\u017a\132\u017c\133\u0179\134\u017f\001" +
    "\002\000\016\016\uff5d\017\uff5d\020\uff5d\021\uff5d\022\uff5d" +
    "\024\uff5d\001\002\000\016\016\uff5b\017\uff5b\020\uff5b\021" +
    "\uff5b\022\uff5b\024\uff5b\001\002\000\022\016\u017b\017\u0178" +
    "\023\u017e\127\u017d\130\u017a\132\u017c\133\u0179\134\u017f\001" +
    "\002\000\016\016\uff5c\017\uff5c\020\uff5c\021\uff5c\022\uff5c" +
    "\024\uff5c\001\002\000\006\016\u018c\024\u018b\001\002\000" +
    "\016\016\uff61\017\uff61\020\uff61\021\uff61\022\uff61\024\uff61" +
    "\001\002\000\016\016\uff66\017\u0186\020\u0184\021\u0185\022" +
    "\u0183\024\uff66\001\002\000\022\016\u017b\017\u0178\023\u017e" +
    "\127\u017d\130\u017a\132\u017c\133\u0179\134\u017f\001\002\000" +
    "\022\016\u017b\017\u0178\023\u017e\127\u017d\130\u017a\132\u017c" +
    "\133\u0179\134\u017f\001\002\000\022\016\u017b\017\u0178\023" +
    "\u017e\127\u017d\130\u017a\132\u017c\133\u0179\134\u017f\001\002" +
    "\000\022\016\u017b\017\u0178\023\u017e\127\u017d\130\u017a\132" +
    "\u017c\133\u0179\134\u017f\001\002\000\016\016\uff62\017\uff62" +
    "\020\uff62\021\uff62\022\uff62\024\uff62\001\002\000\016\016" +
    "\uff64\017\uff64\020\uff64\021\uff64\022\uff64\024\uff64\001\002" +
    "\000\016\016\uff65\017\uff65\020\uff65\021\uff65\022\uff65\024" +
    "\uff65\001\002\000\016\016\uff63\017\uff63\020\uff63\021\uff63" +
    "\022\uff63\024\uff63\001\002\000\004\104\u018e\001\002\000" +
    "\022\016\u017b\017\u0178\023\u017e\127\u017d\130\u017a\132\u017c" +
    "\133\u0179\134\u017f\001\002\000\016\016\uff67\017\u0186\020" +
    "\u0184\021\u0185\022\u0183\024\uff67\001\002\000\042\012\uff69" +
    "\014\uff69\040\uff69\046\uff69\053\uff69\054\uff69\056\uff69\062" +
    "\uff69\063\uff69\064\uff69\101\uff69\103\uff69\107\uff69\112\uff69" +
    "\123\uff69\127\uff69\001\002\000\006\016\u018c\024\u0190\001" +
    "\002\000\016\016\uff5e\017\uff5e\020\uff5e\021\uff5e\022\uff5e" +
    "\024\uff5e\001\002\000\016\016\uff60\017\uff60\020\uff60\021" +
    "\uff60\022\uff60\024\uff60\001\002\000\016\016\uff5f\017\uff5f" +
    "\020\uff5f\021\uff5f\022\uff5f\024\uff5f\001\002\000\022\016" +
    "\u017b\017\u0178\023\u017e\127\u017d\130\u017a\132\u017c\133\u0179" +
    "\134\u017f\001\002\000\006\016\u018c\024\u0195\001\002\000" +
    "\004\104\u0196\001\002\000\042\012\uff68\014\uff68\040\uff68" +
    "\046\uff68\053\uff68\054\uff68\056\uff68\062\uff68\063\uff68\064" +
    "\uff68\101\uff68\103\uff68\107\uff68\112\uff68\123\uff68\127\uff68" +
    "\001\002\000\006\103\uff8d\112\uff8d\001\002\000\006\103" +
    "\uff94\112\uff94\001\002\000\040\012\u0101\014\u010a\040\u0141" +
    "\046\u013e\053\u013d\054\u0143\056\u0148\062\u010f\063\u0111\064" +
    "\u010d\101\u0109\103\uff8b\107\u013f\123\u0146\127\u0107\001\002" +
    "\000\004\103\u019b\001\002\000\004\053\u019c\001\002\000" +
    "\004\023\u019d\001\002\000\022\016\102\017\076\023\225" +
    "\036\226\127\104\132\103\133\100\134\110\001\002\000" +
    "\010\024\u019f\035\230\037\231\001\002\000\004\104\u01a0" +
    "\001\002\000\042\012\uff76\014\uff76\040\uff76\046\uff76\053" +
    "\uff76\054\uff76\056\uff76\062\uff76\063\uff76\064\uff76\101\uff76" +
    "\103\uff76\107\uff76\112\uff76\123\uff76\127\uff76\001\002\000" +
    "\006\103\uff93\112\uff93\001\002\000\022\016\102\017\076" +
    "\023\225\036\226\127\104\132\103\133\100\134\110\001" +
    "\002\000\010\024\u01a4\035\230\037\231\001\002\000\004" +
    "\102\u01a5\001\002\000\040\012\u0101\014\u010a\040\u0141\046" +
    "\u013e\053\u013d\054\u0143\056\u0148\062\u010f\063\u0111\064\u010d" +
    "\101\u0109\103\uff8b\107\u013f\123\u0146\127\u0107\001\002\000" +
    "\004\103\u01a7\001\002\000\044\012\uff73\014\uff73\040\uff73" +
    "\042\u01a8\046\uff73\053\uff73\054\uff73\056\uff73\062\uff73\063" +
    "\uff73\064\uff73\101\uff73\103\uff73\107\uff73\112\uff73\123\uff73" +
    "\127\uff73\001\002\000\004\102\u01a9\001\002\000\040\012" +
    "\u0101\014\u010a\040\u0141\046\u013e\053\u013d\054\u0143\056\u0148" +
    "\062\u010f\063\u0111\064\u010d\101\u0109\103\uff8b\107\u013f\123" +
    "\u0146\127\u0107\001\002\000\004\103\u01ab\001\002\000\042" +
    "\012\uff72\014\uff72\040\uff72\046\uff72\053\uff72\054\uff72\056" +
    "\uff72\062\uff72\063\uff72\064\uff72\101\uff72\103\uff72\107\uff72" +
    "\112\uff72\123\uff72\127\uff72\001\002\000\006\103\uff90\112" +
    "\uff90\001\002\000\004\127\u01ae\001\002\000\004\024\u01af" +
    "\001\002\000\004\102\u01b0\001\002\000\010\052\u01b4\103" +
    "\u01b3\110\u01b1\001\002\000\004\111\u01bf\001\002\000\004" +
    "\103\u01be\001\002\000\042\012\uff70\014\uff70\040\uff70\046" +
    "\uff70\053\uff70\054\uff70\056\uff70\062\uff70\063\uff70\064\uff70" +
    "\101\uff70\103\uff70\107\uff70\112\uff70\123\uff70\127\uff70\001" +
    "\002\000\010\132\u01b5\133\u01b6\134\u01b7\001\002\000\004" +
    "\111\uff6c\001\002\000\004\111\uff6a\001\002\000\004\111" +
    "\uff6b\001\002\000\004\111\u01b9\001\002\000\040\012\u0101" +
    "\014\u010a\040\u0141\046\u013e\053\u013d\054\u0143\056\u0148\062" +
    "\u010f\063\u0111\064\u010d\101\u0109\107\u013f\112\uff8b\123\u0146" +
    "\127\u0107\001\002\000\004\112\u01bb\001\002\000\004\104" +
    "\u01bc\001\002\000\010\052\u01b4\103\uff6e\110\u01b1\001\002" +
    "\000\004\103\uff6f\001\002\000\042\012\uff71\014\uff71\040" +
    "\uff71\046\uff71\053\uff71\054\uff71\056\uff71\062\uff71\063\uff71" +
    "\064\uff71\101\uff71\103\uff71\107\uff71\112\uff71\123\uff71\127" +
    "\uff71\001\002\000\040\012\u0101\014\u010a\040\u0141\046\u013e" +
    "\053\u013d\054\u0143\056\u0148\062\u010f\063\u0111\064\u010d\101" +
    "\u0109\107\u013f\112\uff8b\123\u0146\127\u0107\001\002\000\004" +
    "\112\u01c1\001\002\000\004\104\u01c2\001\002\000\004\103" +
    "\uff6d\001\002\000\010\016\113\017\114\104\u01c4\001\002" +
    "\000\042\012\u0101\014\u010a\040\u0141\046\u013e\053\u013d\054" +
    "\u0143\056\u0148\062\u010f\063\u0111\064\u010d\101\u0109\103\uff8b" +
    "\107\u013f\112\uff8b\123\u0146\127\u0107\001\002\000\006\103" +
    "\uff8c\112\uff8c\001\002\000\022\016\102\017\076\023\225" +
    "\036\226\127\104\132\103\133\100\134\110\001\002\000" +
    "\010\024\u01c8\035\230\037\231\001\002\000\004\102\u01c9" +
    "\001\002\000\040\012\u0101\014\u010a\040\u0141\046\u013e\053" +
    "\u013d\054\u0143\056\u0148\062\u010f\063\u0111\064\u010d\101\u0109" +
    "\103\uff8b\107\u013f\123\u0146\127\u0107\001\002\000\004\103" +
    "\u01cb\001\002\000\042\012\uff77\014\uff77\040\uff77\046\uff77" +
    "\053\uff77\054\uff77\056\uff77\062\uff77\063\uff77\064\uff77\101" +
    "\uff77\103\uff77\107\uff77\112\uff77\123\uff77\127\uff77\001\002" +
    "\000\006\015\u01cd\024\uff87\001\002\000\010\012\u0101\014" +
    "\u010a\101\u0109\001\002\000\004\024\uff88\001\002\000\040" +
    "\012\u0101\014\u010a\040\u0141\046\u013e\053\u013d\054\u0143\056" +
    "\u0148\062\u010f\063\u0111\064\u010d\101\u0109\103\uff8b\107\u013f" +
    "\123\u0146\127\u0107\001\002\000\004\103\u01d1\001\002\000" +
    "\016\012\uff89\014\uff89\043\uff89\101\uff89\103\uff89\127\uff89" +
    "\001\002\000\004\103\uff9a\001\002\000\004\007\u01d4\001" +
    "\002\000\020\012\uff4b\014\uff4b\072\u01d7\076\uff4b\077\uff4b" +
    "\101\uff4b\127\uff4b\001\002\000\004\002\000\001\002\000" +
    "\016\012\u01ea\014\u01f0\076\u01f1\077\uff46\101\u01ef\127\u01ed" +
    "\001\002\000\016\032\u01da\073\u01db\074\u01dc\075\u01d9\130" +
    "\u01d8\131\u01dd\001\002\000\020\012\uff4b\014\uff4b\072\u01d7" +
    "\076\uff4b\077\uff4b\101\uff4b\127\uff4b\001\002\000\020\012" +
    "\uff4b\014\uff4b\072\u01d7\076\uff4b\077\uff4b\101\uff4b\127\uff4b" +
    "\001\002\000\004\127\u01e1\001\002\000\020\012\uff4b\014" +
    "\uff4b\072\u01d7\076\uff4b\077\uff4b\101\uff4b\127\uff4b\001\002" +
    "\000\020\012\uff4b\014\uff4b\072\u01d7\076\uff4b\077\uff4b\101" +
    "\uff4b\127\uff4b\001\002\000\020\012\uff4b\014\uff4b\072\u01d7" +
    "\076\uff4b\077\uff4b\101\uff4b\127\uff4b\001\002\000\016\012" +
    "\uff4f\014\uff4f\076\uff4f\077\uff4f\101\uff4f\127\uff4f\001\002" +
    "\000\016\012\uff50\014\uff50\076\uff50\077\uff50\101\uff50\127" +
    "\uff50\001\002\000\016\012\uff51\014\uff51\076\uff51\077\uff51" +
    "\101\uff51\127\uff51\001\002\000\004\065\u01e2\001\002\000" +
    "\004\127\u01e3\001\002\000\004\033\u01e4\001\002\000\020" +
    "\012\uff4b\014\uff4b\072\u01d7\076\uff4b\077\uff4b\101\uff4b\127" +
    "\uff4b\001\002\000\016\012\uff4d\014\uff4d\076\uff4d\077\uff4d" +
    "\101\uff4d\127\uff4d\001\002\000\016\012\uff4e\014\uff4e\076" +
    "\uff4e\077\uff4e\101\uff4e\127\uff4e\001\002\000\016\012\uff4c" +
    "\014\uff4c\076\uff4c\077\uff4c\101\uff4c\127\uff4c\001\002\000" +
    "\016\012\u01ea\014\u01f0\076\u01f1\077\uff46\101\u01ef\127\u01ed" +
    "\001\002\000\004\127\u027d\001\002\000\004\127\uff2d\001" +
    "\002\000\016\012\u01ea\014\u01f0\076\u01f1\077\uff46\101\u01ef" +
    "\127\u01ed\001\002\000\004\077\u0205\001\002\000\004\027" +
    "\u01f9\001\002\000\016\012\u01ea\014\u01f0\076\u01f1\077\uff46" +
    "\101\u01ef\127\u01ed\001\002\000\004\127\uff2c\001\002\000" +
    "\004\127\uff2b\001\002\000\010\012\u01ea\014\u01f0\101\u01ef" +
    "\001\002\000\004\127\u01f3\001\002\000\004\027\u01f4\001" +
    "\002\000\020\016\102\017\076\023\107\127\104\132\103" +
    "\133\100\134\110\001\002\000\010\016\113\017\114\104" +
    "\u01f6\001\002\000\016\012\u01ea\014\u01f0\076\u01f1\077\uff46" +
    "\101\u01ef\127\u01ed\001\002\000\004\077\uff4a\001\002\000" +
    "\004\077\uff47\001\002\000\030\016\102\017\076\023\107" +
    "\062\047\063\034\064\057\121\u01fb\127\104\132\103\133" +
    "\100\134\110\001\002\000\010\016\113\017\114\104\u0203" +
    "\001\002\000\004\023\u0200\001\002\000\004\104\u01ff\001" +
    "\002\000\004\104\u01fe\001\002\000\044\012\uff31\014\uff31" +
    "\040\uff31\053\uff31\054\uff31\056\uff31\076\uff31\077\uff31\101" +
    "\uff31\103\uff31\106\uff31\107\uff31\112\uff31\116\uff31\120\uff31" +
    "\121\uff31\127\uff31\001\002\000\044\012\uff32\014\uff32\040" +
    "\uff32\053\uff32\054\uff32\056\uff32\076\uff32\077\uff32\101\uff32" +
    "\103\uff32\106\uff32\107\uff32\112\uff32\116\uff32\120\uff32\121" +
    "\uff32\127\uff32\001\002\000\004\024\u0201\001\002\000\004" +
    "\104\u0202\001\002\000\010\103\uff18\104\uff18\112\uff18\001" +
    "\002\000\044\012\uff33\014\uff33\040\uff33\053\uff33\054\uff33" +
    "\056\uff33\076\uff33\077\uff33\101\uff33\103\uff33\106\uff33\107" +
    "\uff33\112\uff33\116\uff33\120\uff33\121\uff33\127\uff33\001\002" +
    "\000\004\002\uff52\001\002\000\004\100\u0206\001\002\000" +
    "\004\023\u0207\001\002\000\004\024\u0208\001\002\000\004" +
    "\102\u0209\001\002\000\036\012\u01ea\014\u01f0\040\u0212\053" +
    "\u020d\054\u0215\056\u021a\101\u01ef\103\uff38\106\u0213\107\u0211" +
    "\116\u020e\120\u0217\121\u01fb\127\u01ed\001\002\000\040\012" +
    "\u01ea\014\u01f0\040\u0212\053\u020d\054\u0215\056\u021a\101\u01ef" +
    "\103\uff38\106\u0213\107\u0211\112\uff38\116\u020e\120\u0217\121" +
    "\u01fb\127\u01ed\001\002\000\040\012\u01ea\014\u01f0\040\u0212" +
    "\053\u020d\054\u0215\056\u021a\101\u01ef\103\uff38\106\u0213\107" +
    "\u0211\112\uff38\116\u020e\120\u0217\121\u01fb\127\u01ed\001\002" +
    "\000\040\012\u01ea\014\u01f0\040\u0212\053\u020d\054\u0215\056" +
    "\u021a\101\u01ef\103\uff38\106\u0213\107\u0211\112\uff38\116\u020e" +
    "\120\u0217\121\u01fb\127\u01ed\001\002\000\004\023\u0273\001" +
    "\002\000\004\023\u0269\001\002\000\040\012\u01ea\014\u01f0" +
    "\040\u0212\053\u020d\054\u0215\056\u021a\101\u01ef\103\uff38\106" +
    "\u0213\107\u0211\112\uff38\116\u020e\120\u0217\121\u01fb\127\u01ed" +
    "\001\002\000\006\103\uff3b\112\uff3b\001\002\000\004\023" +
    "\u0252\001\002\000\004\023\u0248\001\002\000\004\023\u023e" +
    "\001\002\000\040\012\u01ea\014\u01f0\040\u0212\053\u020d\054" +
    "\u0215\056\u021a\101\u01ef\103\uff38\106\u0213\107\u0211\112\uff38" +
    "\116\u020e\120\u0217\121\u01fb\127\u01ed\001\002\000\004\102" +
    "\u0235\001\002\000\040\012\u01ea\014\u01f0\040\u0212\053\u020d" +
    "\054\u0215\056\u021a\101\u01ef\103\uff38\106\u0213\107\u0211\112" +
    "\uff38\116\u020e\120\u0217\121\u01fb\127\u01ed\001\002\000\004" +
    "\023\u0231\001\002\000\040\012\u01ea\014\u01f0\040\u0212\053" +
    "\u020d\054\u0215\056\u021a\101\u01ef\103\uff38\106\u0213\107\u0211" +
    "\112\uff38\116\u020e\120\u0217\121\u01fb\127\u01ed\001\002\000" +
    "\004\103\u022f\001\002\000\004\023\u0221\001\002\000\040" +
    "\012\u01ea\014\u01f0\040\u0212\053\u020d\054\u0215\056\u021a\101" +
    "\u01ef\103\uff38\106\u0213\107\u0211\112\uff38\116\u020e\120\u0217" +
    "\121\u01fb\127\u01ed\001\002\000\006\103\uff3a\112\uff3a\001" +
    "\002\000\006\103\uff39\112\uff39\001\002\000\040\012\u01ea" +
    "\014\u01f0\040\u0212\053\u020d\054\u0215\056\u021a\101\u01ef\103" +
    "\uff38\106\u0213\107\u0211\112\uff38\116\u020e\120\u0217\121\u01fb" +
    "\127\u01ed\001\002\000\006\103\uff43\112\uff43\001\002\000" +
    "\006\103\uff3e\112\uff3e\001\002\000\004\127\u0222\001\002" +
    "\000\004\027\u0223\001\002\000\020\016\102\017\076\023" +
    "\107\127\104\132\103\133\100\134\110\001\002\000\010" +
    "\016\113\017\114\104\u0225\001\002\000\022\016\102\017" +
    "\076\023\225\036\226\127\104\132\103\133\100\134\110" +
    "\001\002\000\010\035\230\037\231\104\u0227\001\002\000" +
    "\004\127\u0228\001\002\000\004\027\u0229\001\002\000\020" +
    "\016\102\017\076\023\107\127\104\132\103\133\100\134" +
    "\110\001\002\000\010\016\113\017\114\024\u022b\001\002" +
    "\000\004\102\u022c\001\002\000\036\012\u01ea\014\u01f0\040" +
    "\u0212\053\u020d\054\u0215\056\u021a\101\u01ef\103\uff38\106\u0213" +
    "\107\u0211\116\u020e\120\u0217\121\u01fb\127\u01ed\001\002\000" +
    "\004\103\u022e\001\002\000\040\012\uff28\014\uff28\040\uff28" +
    "\053\uff28\054\uff28\056\uff28\101\uff28\103\uff28\106\uff28\107" +
    "\uff28\112\uff28\116\uff28\120\uff28\121\uff28\127\uff28\001\002" +
    "\000\004\002\uff45\001\002\000\006\103\uff40\112\uff40\001" +
    "\002\000\004\024\u0232\001\002\000\004\104\u0233\001\002" +
    "\000\006\103\uff19\112\uff19\001\002\000\006\103\uff3c\112" +
    "\uff3c\001\002\000\036\012\u01ea\014\u01f0\040\u0212\053\u020d" +
    "\054\u0215\056\u021a\101\u01ef\103\uff38\106\u0213\107\u0211\116" +
    "\u020e\120\u0217\121\u01fb\127\u01ed\001\002\000\004\103\u0237" +
    "\001\002\000\004\053\u0238\001\002\000\004\023\u0239\001" +
    "\002\000\022\016\102\017\076\023\225\036\226\127\104" +
    "\132\103\133\100\134\110\001\002\000\010\024\u023b\035" +
    "\230\037\231\001\002\000\004\104\u023c\001\002\000\040" +
    "\012\uff29\014\uff29\040\uff29\053\uff29\054\uff29\056\uff29\101" +
    "\uff29\103\uff29\106\uff29\107\uff29\112\uff29\116\uff29\120\uff29" +
    "\121\uff29\127\uff29\001\002\000\006\103\uff44\112\uff44\001" +
    "\002\000\022\016\102\017\076\023\107\127\104\130\u0240" +
    "\132\103\133\100\134\110\001\002\000\012\015\u0246\016" +
    "\113\017\114\024\uff13\001\002\000\006\015\u0244\024\uff14" +
    "\001\002\000\004\024\u0242\001\002\000\004\104\u0243\001" +
    "\002\000\040\012\uff17\014\uff17\040\uff17\053\uff17\054\uff17" +
    "\056\uff17\101\uff17\103\uff17\106\uff17\107\uff17\112\uff17\116" +
    "\uff17\120\uff17\121\uff17\127\uff17\001\002\000\022\016\102" +
    "\017\076\023\107\127\104\130\u0240\132\103\133\100\134" +
    "\110\001\002\000\004\024\uff16\001\002\000\022\016\102" +
    "\017\076\023\107\127\104\130\u0240\132\103\133\100\134" +
    "\110\001\002\000\004\024\uff15\001\002\000\022\016\102" +
    "\017\076\023\225\036\226\127\104\132\103\133\100\134" +
    "\110\001\002\000\010\024\u024a\035\230\037\231\001\002" +
    "\000\004\102\u024b\001\002\000\036\012\u01ea\014\u01f0\040" +
    "\u0212\053\u020d\054\u0215\056\u021a\101\u01ef\103\uff38\106\u0213" +
    "\107\u0211\116\u020e\120\u0217\121\u01fb\127\u01ed\001\002\000" +
    "\004\103\u024d\001\002\000\042\012\uff27\014\uff27\040\uff27" +
    "\042\u024e\053\uff27\054\uff27\056\uff27\101\uff27\103\uff27\106" +
    "\uff27\107\uff27\112\uff27\116\uff27\120\uff27\121\uff27\127\uff27" +
    "\001\002\000\004\102\u024f\001\002\000\036\012\u01ea\014" +
    "\u01f0\040\u0212\053\u020d\054\u0215\056\u021a\101\u01ef\103\uff38" +
    "\106\u0213\107\u0211\116\u020e\120\u0217\121\u01fb\127\u01ed\001" +
    "\002\000\004\103\u0251\001\002\000\040\012\uff26\014\uff26" +
    "\040\uff26\053\uff26\054\uff26\056\uff26\101\uff26\103\uff26\106" +
    "\uff26\107\uff26\112\uff26\116\uff26\120\uff26\121\uff26\127\uff26" +
    "\001\002\000\004\127\u0253\001\002\000\004\024\u0254\001" +
    "\002\000\004\102\u0255\001\002\000\010\052\u0258\103\u0257" +
    "\110\u0256\001\002\000\004\111\u0264\001\002\000\040\012" +
    "\uff24\014\uff24\040\uff24\053\uff24\054\uff24\056\uff24\101\uff24" +
    "\103\uff24\106\uff24\107\uff24\112\uff24\116\uff24\120\uff24\121" +
    "\uff24\127\uff24\001\002\000\010\132\u025b\133\u025c\134\u025d" +
    "\001\002\000\004\103\u025a\001\002\000\040\012\uff25\014" +
    "\uff25\040\uff25\053\uff25\054\uff25\056\uff25\101\uff25\103\uff25" +
    "\106\uff25\107\uff25\112\uff25\116\uff25\120\uff25\121\uff25\127" +
    "\uff25\001\002\000\004\111\uff20\001\002\000\004\111\uff1e" +
    "\001\002\000\004\111\uff1f\001\002\000\004\111\u025f\001" +
    "\002\000\036\012\u01ea\014\u01f0\040\u0212\053\u020d\054\u0215" +
    "\056\u021a\101\u01ef\106\u0213\107\u0211\112\uff38\116\u020e\120" +
    "\u0217\121\u01fb\127\u01ed\001\002\000\004\112\u0261\001\002" +
    "\000\004\104\u0262\001\002\000\010\052\u0258\103\uff22\110" +
    "\u0256\001\002\000\004\103\uff23\001\002\000\036\012\u01ea" +
    "\014\u01f0\040\u0212\053\u020d\054\u0215\056\u021a\101\u01ef\106" +
    "\u0213\107\u0211\112\uff38\116\u020e\120\u0217\121\u01fb\127\u01ed" +
    "\001\002\000\004\112\u0266\001\002\000\004\104\u0267\001" +
    "\002\000\004\103\uff21\001\002\000\006\103\uff41\112\uff41" +
    "\001\002\000\010\113\u026d\114\u026a\115\u026b\001\002\000" +
    "\004\015\uff1b\001\002\000\004\015\uff1a\001\002\000\004" +
    "\015\u026e\001\002\000\004\015\uff1c\001\002\000\004\117" +
    "\u026f\001\002\000\004\127\u0270\001\002\000\004\024\u0271" +
    "\001\002\000\004\104\u0272\001\002\000\006\103\uff1d\112" +
    "\uff1d\001\002\000\022\016\102\017\076\023\225\036\226" +
    "\127\104\132\103\133\100\134\110\001\002\000\010\024" +
    "\u0275\035\230\037\231\001\002\000\004\102\u0276\001\002" +
    "\000\036\012\u01ea\014\u01f0\040\u0212\053\u020d\054\u0215\056" +
    "\u021a\101\u01ef\103\uff38\106\u0213\107\u0211\116\u020e\120\u0217" +
    "\121\u01fb\127\u01ed\001\002\000\004\103\u0278\001\002\000" +
    "\040\012\uff2a\014\uff2a\040\uff2a\053\uff2a\054\uff2a\056\uff2a" +
    "\101\uff2a\103\uff2a\106\uff2a\107\uff2a\112\uff2a\116\uff2a\120" +
    "\uff2a\121\uff2a\127\uff2a\001\002\000\006\103\uff42\112\uff42" +
    "\001\002\000\006\103\uff3d\112\uff3d\001\002\000\006\103" +
    "\uff3f\112\uff3f\001\002\000\004\077\uff48\001\002\000\010" +
    "\015\u027e\027\u0280\104\u027f\001\002\000\004\127\u0287\001" +
    "\002\000\044\012\uff36\014\uff36\040\uff36\053\uff36\054\uff36" +
    "\056\uff36\076\uff36\077\uff36\101\uff36\103\uff36\106\uff36\107" +
    "\uff36\112\uff36\116\uff36\120\uff36\121\uff36\127\uff36\001\002" +
    "\000\030\016\102\017\076\023\107\062\047\063\034\064" +
    "\057\121\u01fb\127\104\132\103\133\100\134\110\001\002" +
    "\000\010\016\113\017\114\104\u0286\001\002\000\004\104" +
    "\u0285\001\002\000\004\104\u0284\001\002\000\044\012\uff2e" +
    "\014\uff2e\040\uff2e\053\uff2e\054\uff2e\056\uff2e\076\uff2e\077" +
    "\uff2e\101\uff2e\103\uff2e\106\uff2e\107\uff2e\112\uff2e\116\uff2e" +
    "\120\uff2e\121\uff2e\127\uff2e\001\002\000\044\012\uff2f\014" +
    "\uff2f\040\uff2f\053\uff2f\054\uff2f\056\uff2f\076\uff2f\077\uff2f" +
    "\101\uff2f\103\uff2f\106\uff2f\107\uff2f\112\uff2f\116\uff2f\120" +
    "\uff2f\121\uff2f\127\uff2f\001\002\000\044\012\uff30\014\uff30" +
    "\040\uff30\053\uff30\054\uff30\056\uff30\076\uff30\077\uff30\101" +
    "\uff30\103\uff30\106\uff30\107\uff30\112\uff30\116\uff30\120\uff30" +
    "\121\uff30\127\uff30\001\002\000\006\015\u028a\104\uff34\001" +
    "\002\000\004\104\u0289\001\002\000\044\012\uff37\014\uff37" +
    "\040\uff37\053\uff37\054\uff37\056\uff37\076\uff37\077\uff37\101" +
    "\uff37\103\uff37\106\uff37\107\uff37\112\uff37\116\uff37\120\uff37" +
    "\121\uff37\127\uff37\001\002\000\004\127\u0287\001\002\000" +
    "\004\104\uff35\001\002\000\004\077\uff49\001\002\000\004" +
    "\002\001\001\002" });

  /** Access to parse-action table. */
  public short[][] action_table() {return _action_table;}

  /** <code>reduce_goto</code> table. */
  protected static final short[][] _reduce_table = 
    unpackFromStrings(new String[] {
    "\000\u028b\000\004\002\003\001\001\000\002\001\001\000" +
    "\012\013\006\014\010\067\007\070\005\001\001\000\002" +
    "\001\001\000\012\013\006\014\010\067\007\070\366\001" +
    "\001\000\002\001\001\000\012\013\006\014\010\067\007" +
    "\070\012\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\004\111\022\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\004" +
    "\007\027\001\001\000\002\001\001\000\002\001\001\000" +
    "\030\015\054\016\051\017\036\020\055\021\043\022\057" +
    "\023\040\024\045\071\050\072\044\073\047\001\001\000" +
    "\002\001\001\000\002\001\001\000\022\046\220\047\100" +
    "\050\104\051\105\052\223\053\315\054\222\055\221\001" +
    "\001\000\002\001\001\000\012\046\310\047\100\050\104" +
    "\051\105\001\001\000\002\001\001\000\030\015\054\016" +
    "\051\017\036\020\055\021\043\022\057\023\040\024\045" +
    "\071\270\072\044\073\047\001\001\000\022\046\220\047" +
    "\100\050\104\051\105\052\223\053\257\054\222\055\221" +
    "\001\001\000\030\015\054\016\051\017\036\020\055\021" +
    "\043\022\057\023\040\024\045\071\256\072\044\073\047" +
    "\001\001\000\002\001\001\000\030\015\054\016\051\017" +
    "\036\020\055\021\043\022\057\023\040\024\045\071\215" +
    "\072\044\073\047\001\001\000\030\015\054\016\051\017" +
    "\036\020\055\021\043\022\057\023\040\024\045\071\214" +
    "\072\044\073\047\001\001\000\030\015\054\016\051\017" +
    "\036\020\055\021\043\022\057\023\040\024\045\071\213" +
    "\072\044\073\047\001\001\000\030\015\054\016\051\017" +
    "\036\020\055\021\043\022\057\023\040\024\045\071\212" +
    "\072\044\073\047\001\001\000\002\001\001\000\030\015" +
    "\054\016\051\017\036\020\055\021\043\022\057\023\040" +
    "\024\045\071\206\072\044\073\047\001\001\000\002\001" +
    "\001\000\030\015\054\016\051\017\036\020\055\021\043" +
    "\022\057\023\040\024\045\071\203\072\044\073\047\001" +
    "\001\000\002\001\001\000\002\001\001\000\030\015\054" +
    "\016\051\017\036\020\055\021\043\022\057\023\040\024" +
    "\045\071\067\072\044\073\047\001\001\000\030\015\054" +
    "\016\051\017\036\020\055\021\043\022\057\023\040\024" +
    "\045\071\066\072\044\073\047\001\001\000\002\001\001" +
    "\000\030\015\054\016\051\017\036\020\055\021\043\022" +
    "\057\023\040\024\045\071\060\072\044\073\047\001\001" +
    "\000\002\001\001\000\004\060\064\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\012\046\136\047\100\050\104\051\105\001\001\000\004" +
    "\007\073\001\001\000\002\001\001\000\012\046\076\047" +
    "\100\050\104\051\105\001\001\000\004\051\135\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\004\051\124\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\012\046\110\047" +
    "\100\050\104\051\105\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\010\047\123\050\104\051" +
    "\105\001\001\000\010\047\114\050\104\051\105\001\001" +
    "\000\002\001\001\000\006\050\122\051\105\001\001\000" +
    "\006\050\121\051\105\001\001\000\006\050\120\051\105" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\012\046\126" +
    "\047\100\050\104\051\105\001\001\000\030\015\054\016" +
    "\051\017\036\020\055\021\043\022\057\023\040\024\045" +
    "\071\130\072\044\073\047\001\001\000\012\046\132\047" +
    "\100\050\104\051\105\001\001\000\002\001\001\000\002" +
    "\001\001\000\030\015\054\016\051\017\036\020\055\021" +
    "\043\022\057\023\040\024\045\071\133\072\044\073\047" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\012\046\140\047\100\050\104" +
    "\051\105\001\001\000\030\015\054\016\051\017\036\020" +
    "\055\021\043\022\057\023\040\024\045\071\142\072\044" +
    "\073\047\001\001\000\012\046\144\047\100\050\104\051" +
    "\105\001\001\000\002\001\001\000\002\001\001\000\030" +
    "\015\054\016\051\017\036\020\055\021\043\022\057\023" +
    "\040\024\045\071\145\072\044\073\047\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\004\113" +
    "\176\001\001\000\004\007\152\001\001\000\002\001\001" +
    "\000\004\074\160\001\001\000\014\024\156\046\155\047" +
    "\100\050\104\051\105\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\004\113" +
    "\167\001\001\000\004\007\163\001\001\000\002\001\001" +
    "\000\004\074\165\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\004\007\171\001\001\000\002" +
    "\001\001\000\004\074\173\001\001\000\002\001\001\000" +
    "\004\113\175\001\001\000\002\001\001\000\002\001\001" +
    "\000\004\007\200\001\001\000\002\001\001\000\004\074" +
    "\202\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\004\060" +
    "\210\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\022\046\220\047\100\050\104" +
    "\051\105\052\223\053\226\054\222\055\221\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\022\046\234\047\100\050\104\051\105\052" +
    "\223\053\235\054\222\055\221\001\001\000\016\046\220" +
    "\047\100\050\104\051\105\052\223\055\233\001\001\000" +
    "\002\001\001\000\020\046\220\047\100\050\104\051\105" +
    "\052\223\054\232\055\221\001\001\000\020\046\220\047" +
    "\100\050\104\051\105\052\223\054\231\055\221\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\012" +
    "\046\252\047\100\050\104\051\105\001\001\000\012\046" +
    "\251\047\100\050\104\051\105\001\001\000\012\046\250" +
    "\047\100\050\104\051\105\001\001\000\012\046\247\047" +
    "\100\050\104\051\105\001\001\000\012\046\246\047\100" +
    "\050\104\051\105\001\001\000\012\046\245\047\100\050" +
    "\104\051\105\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\014\024\255\046\254\047\100\050\104" +
    "\051\105\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\030\015\054\016\051" +
    "\017\036\020\055\021\043\022\057\023\040\024\045\071" +
    "\261\072\044\073\047\001\001\000\002\001\001\000\030" +
    "\015\054\016\051\017\036\020\055\021\043\022\057\023" +
    "\040\024\045\071\265\072\044\073\047\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\014\046\275\047" +
    "\100\050\104\051\105\057\277\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\014\046\275\047\100\050\104\051\105\057\302\001\001" +
    "\000\002\001\001\000\014\046\275\047\100\050\104\051" +
    "\105\057\304\001\001\000\002\001\001\000\014\046\275" +
    "\047\100\050\104\051\105\057\306\001\001\000\002\001" +
    "\001\000\002\001\001\000\030\015\054\016\051\017\036" +
    "\020\055\021\043\022\057\023\040\024\045\071\311\072" +
    "\044\073\047\001\001\000\002\001\001\000\004\060\313" +
    "\001\001\000\002\001\001\000\002\001\001\000\030\015" +
    "\054\016\051\017\036\020\055\021\043\022\057\023\040" +
    "\024\045\071\316\072\044\073\047\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\004\116\323\001\001\000\002\001\001\000\002\001" +
    "\001\000\004\056\326\001\001\000\030\015\054\016\051" +
    "\017\036\020\055\021\043\022\057\023\040\024\045\071" +
    "\336\072\044\073\047\001\001\000\030\015\054\016\051" +
    "\017\036\020\055\021\043\022\057\023\040\024\045\071" +
    "\333\072\044\073\047\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\004\116\337\001\001\000\002" +
    "\001\001\000\002\001\001\000\004\007\342\001\001\000" +
    "\002\001\001\000\004\111\344\001\001\000\002\001\001" +
    "\000\004\007\346\001\001\000\030\015\054\016\051\017" +
    "\036\020\055\021\043\022\057\023\040\024\045\071\347" +
    "\072\044\073\047\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\030\015\054\016\051\017\036\020\055\021\043\022" +
    "\057\023\040\024\045\071\363\072\044\073\047\001\001" +
    "\000\004\111\356\001\001\000\002\001\001\000\030\015" +
    "\054\016\051\017\036\020\055\021\043\022\057\023\040" +
    "\024\045\071\360\072\044\073\047\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\006\034\372\104\370\001\001\000\002\001\001\000\002" +
    "\001\001\000\006\034\372\104\373\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\016\011\u0105" +
    "\035\u0102\037\u0104\105\u0103\106\377\107\u0107\001\001\000" +
    "\016\011\u0105\035\u0102\037\u0104\105\u01d1\106\377\107\u0107" +
    "\001\001\000\002\001\001\000\004\012\u0131\001\001\000" +
    "\016\011\u0105\035\u0102\037\u0104\105\u012f\106\377\107\u0107" +
    "\001\001\000\002\001\001\000\016\011\u0105\035\u0102\037" +
    "\u0104\105\u012d\106\377\107\u0107\001\001\000\002\001\001" +
    "\000\002\001\001\000\016\011\u0105\035\u0102\037\u0104\105" +
    "\u010a\106\377\107\u0107\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\014\036\u010f\046\u010d\047" +
    "\100\050\104\051\105\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\004\115\u0129\001\001\000\002\001" +
    "\001\000\014\036\u0126\046\u0125\047\100\050\104\051\105" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\004\115\u012c\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\006\011\u0138\112\u0139" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\032\011\u0105\035\u0143\036\u0144" +
    "\040\u0141\041\u0149\042\u014b\043\u013f\044\u014d\045\u014c\106" +
    "\u014a\107\u0148\110\u0146\001\001\000\002\001\001\000\012" +
    "\046\u01c2\047\100\050\104\051\105\001\001\000\002\001" +
    "\001\000\032\011\u0105\035\u0143\036\u0144\040\u0141\041\u0149" +
    "\042\u014b\043\u013f\044\u014d\045\u014c\106\u014a\107\u0148\110" +
    "\u01ab\001\001\000\002\001\001\000\032\011\u0105\035\u0143" +
    "\036\u0144\040\u0141\041\u0149\042\u014b\043\u013f\044\u014d\045" +
    "\u014c\106\u014a\107\u0148\110\u01a0\001\001\000\002\001\001" +
    "\000\032\011\u0105\035\u0143\036\u0144\040\u0141\041\u0149\042" +
    "\u014b\043\u013f\044\u014d\045\u014c\106\u014a\107\u0148\110\u0197" +
    "\001\001\000\032\011\u0105\035\u0143\036\u0144\040\u0141\041" +
    "\u0149\042\u014b\043\u013f\044\u014d\045\u014c\106\u014a\107\u0148" +
    "\110\u0196\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\032\011\u0105\035\u0143\036\u0144\040\u0141" +
    "\041\u0149\042\u014b\043\u013f\044\u014d\045\u014c\106\u014a\107" +
    "\u0148\110\u0153\001\001\000\032\011\u0105\035\u0143\036\u0144" +
    "\040\u0141\041\u0149\042\u014b\043\u013f\044\u014d\045\u014c\106" +
    "\u014a\107\u0148\110\u0152\001\001\000\032\011\u0105\035\u0143" +
    "\036\u0144\040\u0141\041\u0149\042\u014b\043\u013f\044\u014d\045" +
    "\u014c\106\u014a\107\u0148\110\u0151\001\001\000\032\011\u0105" +
    "\035\u0143\036\u0144\040\u0141\041\u0149\042\u014b\043\u013f\044" +
    "\u014d\045\u014c\106\u014a\107\u0148\110\u0150\001\001\000\032" +
    "\011\u0105\035\u0143\036\u0144\040\u0141\041\u0149\042\u014b\043" +
    "\u013f\044\u014d\045\u014c\106\u014a\107\u0148\110\u014f\001\001" +
    "\000\032\011\u0105\035\u0143\036\u0144\040\u0141\041\u0149\042" +
    "\u014b\043\u013f\044\u014d\045\u014c\106\u014a\107\u0148\110\u014e" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\004\011\u0156\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\012\046\u0159\047\100\050\104" +
    "\051\105\001\001\000\002\001\001\000\022\046\220\047" +
    "\100\050\104\051\105\052\223\053\u015b\054\222\055\221" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\012\046\u015f\047\100\050\104\051\105\001\001" +
    "\000\002\001\001\000\002\001\001\000\032\011\u0105\035" +
    "\u0143\036\u0144\040\u0141\041\u0149\042\u014b\043\u013f\044\u014d" +
    "\045\u014c\106\u014a\107\u0148\110\u0162\001\001\000\002\001" +
    "\001\000\002\001\001\000\012\046\u0165\047\100\050\104" +
    "\051\105\001\001\000\002\001\001\000\022\046\220\047" +
    "\100\050\104\051\105\052\223\053\u0167\054\222\055\221" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\012\046\u016b\047\100\050\104\051\105\001\001" +
    "\000\002\001\001\000\002\001\001\000\032\011\u0105\035" +
    "\u0143\036\u0144\040\u0141\041\u0149\042\u014b\043\u013f\044\u014d" +
    "\045\u014c\106\u014a\107\u0148\110\u016e\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\010\063\u017f\064\u0180\065\u0181\001\001" +
    "\000\004\064\u0191\001\001\000\002\001\001\000\002\001" +
    "\001\000\004\064\u0190\001\001\000\002\001\001\000\002" +
    "\001\001\000\010\063\u018e\064\u0180\065\u0181\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\004\064\u0189\001\001\000\004\064\u0188\001" +
    "\001\000\004\064\u0187\001\001\000\004\064\u0186\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\006\064\u0180\065\u018c" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\010\063\u0193\064\u0180\065\u0181\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\032\011\u0105\035\u0143\036\u0144\040" +
    "\u0141\041\u0149\042\u014b\043\u013f\044\u014d\045\u014c\106\u014a" +
    "\107\u0148\110\u0199\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\022\046\220\047\100\050\104" +
    "\051\105\052\223\053\u019d\054\222\055\221\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\022\046\220\047\100\050\104\051\105\052" +
    "\223\053\u01a2\054\222\055\221\001\001\000\002\001\001" +
    "\000\002\001\001\000\032\011\u0105\035\u0143\036\u0144\040" +
    "\u0141\041\u0149\042\u014b\043\u013f\044\u014d\045\u014c\106\u014a" +
    "\107\u0148\110\u01a5\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\032\011\u0105\035\u0143\036\u0144" +
    "\040\u0141\041\u0149\042\u014b\043\u013f\044\u014d\045\u014c\106" +
    "\u014a\107\u0148\110\u01a9\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\004\120\u01b1\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\004\066" +
    "\u01b7\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\032\011\u0105\035\u0143\036" +
    "\u0144\040\u0141\041\u0149\042\u014b\043\u013f\044\u014d\045\u014c" +
    "\106\u014a\107\u0148\110\u01b9\001\001\000\002\001\001\000" +
    "\002\001\001\000\004\120\u01bc\001\001\000\002\001\001" +
    "\000\002\001\001\000\032\011\u0105\035\u0143\036\u0144\040" +
    "\u0141\041\u0149\042\u014b\043\u013f\044\u014d\045\u014c\106\u014a" +
    "\107\u0148\110\u01bf\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\032\011\u0105" +
    "\035\u0143\036\u0144\040\u0141\041\u0149\042\u014b\043\u013f\044" +
    "\u014d\045\u014c\106\u014a\107\u0148\110\u01c4\001\001\000\002" +
    "\001\001\000\022\046\220\047\100\050\104\051\105\052" +
    "\223\053\u01c6\054\222\055\221\001\001\000\002\001\001" +
    "\000\002\001\001\000\032\011\u0105\035\u0143\036\u0144\040" +
    "\u0141\041\u0149\042\u014b\043\u013f\044\u014d\045\u014c\106\u014a" +
    "\107\u0148\110\u01c9\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\006\011\u0138\112\u01cd\001\001" +
    "\000\002\001\001\000\032\011\u0105\035\u0143\036\u0144\040" +
    "\u0141\041\u0149\042\u014b\043\u013f\044\u014d\045\u014c\106\u014a" +
    "\107\u0148\110\u01cf\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\006\102\u01d4" +
    "\103\u01d5\001\001\000\002\001\001\000\014\010\u01e8\025" +
    "\u01ed\075\u01eb\077\u01e7\100\u01ea\001\001\000\002\001\001" +
    "\000\004\103\u01e6\001\001\000\004\103\u01e5\001\001\000" +
    "\002\001\001\000\004\103\u01df\001\001\000\004\103\u01de" +
    "\001\001\000\004\103\u01dd\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\004\103\u01e4\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\014" +
    "\010\u01e8\025\u01ed\075\u028b\077\u01e7\100\u01ea\001\001\000" +
    "\002\001\001\000\002\001\001\000\014\010\u01e8\025\u01ed" +
    "\075\u027b\077\u01e7\100\u01ea\001\001\000\004\101\u0203\001" +
    "\001\000\002\001\001\000\014\010\u01e8\025\u01ed\075\u01f7" +
    "\077\u01e7\100\u01ea\001\001\000\002\001\001\000\002\001" +
    "\001\000\004\010\u01f1\001\001\000\002\001\001\000\002" +
    "\001\001\000\012\046\u01f4\047\100\050\104\051\105\001" +
    "\001\000\002\001\001\000\014\010\u01e8\025\u01ed\075\u01f6" +
    "\077\u01e7\100\u01ea\001\001\000\002\001\001\000\002\001" +
    "\001\000\016\006\u01fc\024\u01fb\046\u01f9\047\100\050\104" +
    "\051\105\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\036\003\u020f\005\u021b\006\u021c\010\u01e8\025\u020b\026\u020e" +
    "\027\u0217\030\u0209\031\u021a\032\u020a\033\u0215\076\u0218\077" +
    "\u0213\100\u021d\001\001\000\036\003\u020f\005\u021b\006\u021c" +
    "\010\u01e8\025\u020b\026\u020e\027\u0217\030\u0209\031\u021a\032" +
    "\u020a\033\u0215\076\u027a\077\u0213\100\u021d\001\001\000\036" +
    "\003\u020f\005\u021b\006\u021c\010\u01e8\025\u020b\026\u020e\027" +
    "\u0217\030\u0209\031\u021a\032\u020a\033\u0215\076\u0279\077\u0213" +
    "\100\u021d\001\001\000\036\003\u020f\005\u021b\006\u021c\010" +
    "\u01e8\025\u020b\026\u020e\027\u0217\030\u0209\031\u021a\032\u020a" +
    "\033\u0215\076\u0278\077\u0213\100\u021d\001\001\000\002\001" +
    "\001\000\002\001\001\000\036\003\u020f\005\u021b\006\u021c" +
    "\010\u01e8\025\u020b\026\u020e\027\u0217\030\u0209\031\u021a\032" +
    "\u020a\033\u0215\076\u0267\077\u0213\100\u021d\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\036\003\u020f\005\u021b\006\u021c\010\u01e8\025\u020b" +
    "\026\u020e\027\u0217\030\u0209\031\u021a\032\u020a\033\u0215\076" +
    "\u023c\077\u0213\100\u021d\001\001\000\002\001\001\000\036" +
    "\003\u020f\005\u021b\006\u021c\010\u01e8\025\u020b\026\u020e\027" +
    "\u0217\030\u0209\031\u021a\032\u020a\033\u0215\076\u0233\077\u0213" +
    "\100\u021d\001\001\000\002\001\001\000\036\003\u020f\005" +
    "\u021b\006\u021c\010\u01e8\025\u020b\026\u020e\027\u0217\030\u0209" +
    "\031\u021a\032\u020a\033\u0215\076\u022f\077\u0213\100\u021d\001" +
    "\001\000\002\001\001\000\002\001\001\000\036\003\u020f" +
    "\005\u021b\006\u021c\010\u01e8\025\u020b\026\u020e\027\u0217\030" +
    "\u0209\031\u021a\032\u020a\033\u0215\076\u021f\077\u0213\100\u021d" +
    "\001\001\000\002\001\001\000\002\001\001\000\036\003" +
    "\u020f\005\u021b\006\u021c\010\u01e8\025\u020b\026\u020e\027\u0217" +
    "\030\u0209\031\u021a\032\u020a\033\u0215\076\u021e\077\u0213\100" +
    "\u021d\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\012\046\u0223\047\100\050" +
    "\104\051\105\001\001\000\002\001\001\000\022\046\220" +
    "\047\100\050\104\051\105\052\223\053\u0225\054\222\055" +
    "\221\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\012\046\u0229\047\100\050\104\051\105\001" +
    "\001\000\002\001\001\000\002\001\001\000\036\003\u020f" +
    "\005\u021b\006\u021c\010\u01e8\025\u020b\026\u020e\027\u0217\030" +
    "\u0209\031\u021a\032\u020a\033\u0215\076\u022c\077\u0213\100\u021d" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\036\003\u020f\005" +
    "\u021b\006\u021c\010\u01e8\025\u020b\026\u020e\027\u0217\030\u0209" +
    "\031\u021a\032\u020a\033\u0215\076\u0235\077\u0213\100\u021d\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\022\046\220\047\100\050\104\051\105\052\223\053" +
    "\u0239\054\222\055\221\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\014\046" +
    "\u023e\047\100\050\104\051\105\061\u0240\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\014\046\u023e\047\100\050\104" +
    "\051\105\061\u0244\001\001\000\002\001\001\000\014\046" +
    "\u023e\047\100\050\104\051\105\061\u0246\001\001\000\002" +
    "\001\001\000\022\046\220\047\100\050\104\051\105\052" +
    "\223\053\u0248\054\222\055\221\001\001\000\002\001\001" +
    "\000\002\001\001\000\036\003\u020f\005\u021b\006\u021c\010" +
    "\u01e8\025\u020b\026\u020e\027\u0217\030\u0209\031\u021a\032\u020a" +
    "\033\u0215\076\u024b\077\u0213\100\u021d\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\036\003\u020f" +
    "\005\u021b\006\u021c\010\u01e8\025\u020b\026\u020e\027\u0217\030" +
    "\u0209\031\u021a\032\u020a\033\u0215\076\u024f\077\u0213\100\u021d" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\004\117\u0258" +
    "\001\001\000\002\001\001\000\002\001\001\000\004\062" +
    "\u025d\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\036\003\u020f\005\u021b\006\u021c\010\u01e8\025\u020b" +
    "\026\u020e\027\u0217\030\u0209\031\u021a\032\u020a\033\u0215\076" +
    "\u025f\077\u0213\100\u021d\001\001\000\002\001\001\000\002" +
    "\001\001\000\004\117\u0262\001\001\000\002\001\001\000" +
    "\036\003\u020f\005\u021b\006\u021c\010\u01e8\025\u020b\026\u020e" +
    "\027\u0217\030\u0209\031\u021a\032\u020a\033\u0215\076\u0264\077" +
    "\u0213\100\u021d\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\004\004\u026b\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\022" +
    "\046\220\047\100\050\104\051\105\052\223\053\u0273\054" +
    "\222\055\221\001\001\000\002\001\001\000\002\001\001" +
    "\000\036\003\u020f\005\u021b\006\u021c\010\u01e8\025\u020b\026" +
    "\u020e\027\u0217\030\u0209\031\u021a\032\u020a\033\u0215\076\u0276" +
    "\077\u0213\100\u021d\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\004\114\u0287\001" +
    "\001\000\002\001\001\000\016\006\u0282\024\u0281\046\u0280" +
    "\047\100\050\104\051\105\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\004\114\u028a\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001" });

  /** Access to <code>reduce_goto</code> table. */
  public short[][] reduce_table() {return _reduce_table;}

  /** Instance of action encapsulation class. */
  protected CUP$VParser$actions action_obj;

  /** Action encapsulation object initializer. */
  protected void init_actions()
    {
      action_obj = new CUP$VParser$actions(this);
    }

  /** Invoke a user supplied parse action. */
  public java_cup.runtime.Symbol do_action(
    int                        act_num,
    java_cup.runtime.lr_parser parser,
    java.util.Stack            stack,
    int                        top)
    throws java.lang.Exception
  {
    /* call code in generated class */
    return action_obj.CUP$VParser$do_action(act_num, parser, stack, top);
  }

  /** Indicates start state. */
  public int start_state() {return 0;}
  /** Indicates start production. */
  public int start_production() {return 0;}

  /** <code>EOF</code> Symbol index. */
  public int EOF_sym() {return 0;}

  /** <code>error</code> Symbol index. */
  public int error_sym() {return 1;}




    private VCompilerFrame vCompilerFrame;
    private AbstractSyntaxTree abstractSyntaxTree;

    public VParser(VLexer vLexer, VCompilerFrame vCompilerFrame) { 
        super(vLexer);
        this.vCompilerFrame = vCompilerFrame;
    }

    public AbstractSyntaxTree getAST(){
        return abstractSyntaxTree;
    }   

    /**
     * Metodo que crea nuevas instancias de la clase Declaration y las guarda en una lista enlazada.
     * @param varList Lista de id's para el atributo id de la instancia que se creara.
     * @param dataType Tipo de dato de todas las instancias que se crearan.
     * @return LinkedList con todas las instancias creadas.
     */
    private LinkedList<Instruction> getDeclarations(LinkedList<Id> varList, Type dataType){
        LinkedList<Instruction> declarations = new LinkedList<>();
        for(Id id : varList){
            declarations.add(new Declaration(id.getId(), dataType, Role.VAR, id.getRow(), id.getColumn()));
        }
        return declarations;
    }
    
    public void syntax_error(Symbol s){
        vCompilerFrame.printMessage("Error Sintactico: No se esperaba [" +s.value+ "]. Linea " +s.left+ " Columna " +s.right+"\n");
    }

    public void unrecovered_syntax_error(Symbol s){
        vCompilerFrame.printMessage("Error Sintactico: No se esperaba [" +s.value+ "]. Linea " +s.left+ " Columna " +s.right+"\n");
    } 


/** Cup generated class to encapsulate user supplied action code.*/
@SuppressWarnings({"rawtypes", "unchecked", "unused"})
class CUP$VParser$actions {
  private final VParser parser;

  /** Constructor */
  CUP$VParser$actions(VParser parser) {
    this.parser = parser;
  }

  /** Method 0 with the actual generated action code for actions 0 to 300. */
  public final java_cup.runtime.Symbol CUP$VParser$do_action_part00000000(
    int                        CUP$VParser$act_num,
    java_cup.runtime.lr_parser CUP$VParser$parser,
    java.util.Stack            CUP$VParser$stack,
    int                        CUP$VParser$top)
    throws java.lang.Exception
    {
      /* Symbol object for return from actions */
      java_cup.runtime.Symbol CUP$VParser$result;

      /* select the action based on the action number */
      switch (CUP$VParser$act_num)
        {
          /*. . . . . . . . . . . . . . . . . . . .*/
          case 0: // $START ::= s EOF 
            {
              Object RESULT =null;
		int start_valleft = ((java_cup.runtime.Symbol)CUP$VParser$stack.elementAt(CUP$VParser$top-1)).left;
		int start_valright = ((java_cup.runtime.Symbol)CUP$VParser$stack.elementAt(CUP$VParser$top-1)).right;
		Object start_val = (Object)((java_cup.runtime.Symbol) CUP$VParser$stack.elementAt(CUP$VParser$top-1)).value;
		RESULT = start_val;
              CUP$VParser$result = parser.getSymbolFactory().newSymbol("$START",0, ((java_cup.runtime.Symbol)CUP$VParser$stack.elementAt(CUP$VParser$top-1)), ((java_cup.runtime.Symbol)CUP$VParser$stack.peek()), RESULT);
            }
          /* ACCEPT */
          CUP$VParser$parser.done_parsing();
          return CUP$VParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 1: // s ::= VB_SEPARATOR vb_code J_SEPARATOR java_code P_SEPARATOR C_SEPARATOR c_code 
            {
              Object RESULT =null;
		int vbInstructionsleft = ((java_cup.runtime.Symbol)CUP$VParser$stack.elementAt(CUP$VParser$top-5)).left;
		int vbInstructionsright = ((java_cup.runtime.Symbol)CUP$VParser$stack.elementAt(CUP$VParser$top-5)).right;
		LinkedList<Instruction> vbInstructions = (LinkedList<Instruction>)((java_cup.runtime.Symbol) CUP$VParser$stack.elementAt(CUP$VParser$top-5)).value;
		int javaInstructionsleft = ((java_cup.runtime.Symbol)CUP$VParser$stack.elementAt(CUP$VParser$top-3)).left;
		int javaInstructionsright = ((java_cup.runtime.Symbol)CUP$VParser$stack.elementAt(CUP$VParser$top-3)).right;
		LinkedList<Instruction> javaInstructions = (LinkedList<Instruction>)((java_cup.runtime.Symbol) CUP$VParser$stack.elementAt(CUP$VParser$top-3)).value;
		int cInstructionsleft = ((java_cup.runtime.Symbol)CUP$VParser$stack.peek()).left;
		int cInstructionsright = ((java_cup.runtime.Symbol)CUP$VParser$stack.peek()).right;
		LinkedList<Instruction> cInstructions = (LinkedList<Instruction>)((java_cup.runtime.Symbol) CUP$VParser$stack.peek()).value;
		
            abstractSyntaxTree = new AbstractSyntaxTree(vbInstructions, javaInstructions, null, cInstructions);
        
              CUP$VParser$result = parser.getSymbolFactory().newSymbol("s",0, ((java_cup.runtime.Symbol)CUP$VParser$stack.elementAt(CUP$VParser$top-6)), ((java_cup.runtime.Symbol)CUP$VParser$stack.peek()), RESULT);
            }
          return CUP$VParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 2: // arithmetic_op ::= arithmetic_op PLUS term 
            {
              Operation RESULT =null;
		int value1left = ((java_cup.runtime.Symbol)CUP$VParser$stack.elementAt(CUP$VParser$top-2)).left;
		int value1right = ((java_cup.runtime.Symbol)CUP$VParser$stack.elementAt(CUP$VParser$top-2)).right;
		Operation value1 = (Operation)((java_cup.runtime.Symbol) CUP$VParser$stack.elementAt(CUP$VParser$top-2)).value;
		int value2left = ((java_cup.runtime.Symbol)CUP$VParser$stack.peek()).left;
		int value2right = ((java_cup.runtime.Symbol)CUP$VParser$stack.peek()).right;
		Operation value2 = (Operation)((java_cup.runtime.Symbol) CUP$VParser$stack.peek()).value;
		 RESULT = new Operation(value1, value2, OperationType.SUM); 
              CUP$VParser$result = parser.getSymbolFactory().newSymbol("arithmetic_op",36, ((java_cup.runtime.Symbol)CUP$VParser$stack.elementAt(CUP$VParser$top-2)), ((java_cup.runtime.Symbol)CUP$VParser$stack.peek()), RESULT);
            }
          return CUP$VParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 3: // arithmetic_op ::= arithmetic_op MINUS term 
            {
              Operation RESULT =null;
		int value1left = ((java_cup.runtime.Symbol)CUP$VParser$stack.elementAt(CUP$VParser$top-2)).left;
		int value1right = ((java_cup.runtime.Symbol)CUP$VParser$stack.elementAt(CUP$VParser$top-2)).right;
		Operation value1 = (Operation)((java_cup.runtime.Symbol) CUP$VParser$stack.elementAt(CUP$VParser$top-2)).value;
		int value2left = ((java_cup.runtime.Symbol)CUP$VParser$stack.peek()).left;
		int value2right = ((java_cup.runtime.Symbol)CUP$VParser$stack.peek()).right;
		Operation value2 = (Operation)((java_cup.runtime.Symbol) CUP$VParser$stack.peek()).value;
		 RESULT = new Operation(value1, value2, OperationType.SUBTRACTION); 
              CUP$VParser$result = parser.getSymbolFactory().newSymbol("arithmetic_op",36, ((java_cup.runtime.Symbol)CUP$VParser$stack.elementAt(CUP$VParser$top-2)), ((java_cup.runtime.Symbol)CUP$VParser$stack.peek()), RESULT);
            }
          return CUP$VParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 4: // arithmetic_op ::= term 
            {
              Operation RESULT =null;
		int valueleft = ((java_cup.runtime.Symbol)CUP$VParser$stack.peek()).left;
		int valueright = ((java_cup.runtime.Symbol)CUP$VParser$stack.peek()).right;
		Operation value = (Operation)((java_cup.runtime.Symbol) CUP$VParser$stack.peek()).value;
		 RESULT = value; 
              CUP$VParser$result = parser.getSymbolFactory().newSymbol("arithmetic_op",36, ((java_cup.runtime.Symbol)CUP$VParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$VParser$stack.peek()), RESULT);
            }
          return CUP$VParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 5: // term ::= term MULTIPLICATION factor 
            {
              Operation RESULT =null;
		int value1left = ((java_cup.runtime.Symbol)CUP$VParser$stack.elementAt(CUP$VParser$top-2)).left;
		int value1right = ((java_cup.runtime.Symbol)CUP$VParser$stack.elementAt(CUP$VParser$top-2)).right;
		Operation value1 = (Operation)((java_cup.runtime.Symbol) CUP$VParser$stack.elementAt(CUP$VParser$top-2)).value;
		int value2left = ((java_cup.runtime.Symbol)CUP$VParser$stack.peek()).left;
		int value2right = ((java_cup.runtime.Symbol)CUP$VParser$stack.peek()).right;
		Operation value2 = (Operation)((java_cup.runtime.Symbol) CUP$VParser$stack.peek()).value;
		 RESULT = new Operation(value1, value2, OperationType.MULTIPLICATION); 
              CUP$VParser$result = parser.getSymbolFactory().newSymbol("term",37, ((java_cup.runtime.Symbol)CUP$VParser$stack.elementAt(CUP$VParser$top-2)), ((java_cup.runtime.Symbol)CUP$VParser$stack.peek()), RESULT);
            }
          return CUP$VParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 6: // term ::= term DIVISION factor 
            {
              Operation RESULT =null;
		int value1left = ((java_cup.runtime.Symbol)CUP$VParser$stack.elementAt(CUP$VParser$top-2)).left;
		int value1right = ((java_cup.runtime.Symbol)CUP$VParser$stack.elementAt(CUP$VParser$top-2)).right;
		Operation value1 = (Operation)((java_cup.runtime.Symbol) CUP$VParser$stack.elementAt(CUP$VParser$top-2)).value;
		int value2left = ((java_cup.runtime.Symbol)CUP$VParser$stack.peek()).left;
		int value2right = ((java_cup.runtime.Symbol)CUP$VParser$stack.peek()).right;
		Operation value2 = (Operation)((java_cup.runtime.Symbol) CUP$VParser$stack.peek()).value;
		 RESULT = new Operation(value1, value2, OperationType.DIVISION); 
              CUP$VParser$result = parser.getSymbolFactory().newSymbol("term",37, ((java_cup.runtime.Symbol)CUP$VParser$stack.elementAt(CUP$VParser$top-2)), ((java_cup.runtime.Symbol)CUP$VParser$stack.peek()), RESULT);
            }
          return CUP$VParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 7: // term ::= term MOD factor 
            {
              Operation RESULT =null;
		int value1left = ((java_cup.runtime.Symbol)CUP$VParser$stack.elementAt(CUP$VParser$top-2)).left;
		int value1right = ((java_cup.runtime.Symbol)CUP$VParser$stack.elementAt(CUP$VParser$top-2)).right;
		Operation value1 = (Operation)((java_cup.runtime.Symbol) CUP$VParser$stack.elementAt(CUP$VParser$top-2)).value;
		int value2left = ((java_cup.runtime.Symbol)CUP$VParser$stack.peek()).left;
		int value2right = ((java_cup.runtime.Symbol)CUP$VParser$stack.peek()).right;
		Operation value2 = (Operation)((java_cup.runtime.Symbol) CUP$VParser$stack.peek()).value;
		 RESULT = new Operation(value1, value2, OperationType.MOD); 
              CUP$VParser$result = parser.getSymbolFactory().newSymbol("term",37, ((java_cup.runtime.Symbol)CUP$VParser$stack.elementAt(CUP$VParser$top-2)), ((java_cup.runtime.Symbol)CUP$VParser$stack.peek()), RESULT);
            }
          return CUP$VParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 8: // term ::= factor 
            {
              Operation RESULT =null;
		int valueleft = ((java_cup.runtime.Symbol)CUP$VParser$stack.peek()).left;
		int valueright = ((java_cup.runtime.Symbol)CUP$VParser$stack.peek()).right;
		Operation value = (Operation)((java_cup.runtime.Symbol) CUP$VParser$stack.peek()).value;
		 RESULT = value; 
              CUP$VParser$result = parser.getSymbolFactory().newSymbol("term",37, ((java_cup.runtime.Symbol)CUP$VParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$VParser$stack.peek()), RESULT);
            }
          return CUP$VParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 9: // factor ::= PLUS op_value 
            {
              Operation RESULT =null;
		int valueleft = ((java_cup.runtime.Symbol)CUP$VParser$stack.peek()).left;
		int valueright = ((java_cup.runtime.Symbol)CUP$VParser$stack.peek()).right;
		Operation value = (Operation)((java_cup.runtime.Symbol) CUP$VParser$stack.peek()).value;
		 RESULT = new Operation(value, OperationType.PLUS); 
              CUP$VParser$result = parser.getSymbolFactory().newSymbol("factor",38, ((java_cup.runtime.Symbol)CUP$VParser$stack.elementAt(CUP$VParser$top-1)), ((java_cup.runtime.Symbol)CUP$VParser$stack.peek()), RESULT);
            }
          return CUP$VParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 10: // factor ::= MINUS op_value 
            {
              Operation RESULT =null;
		int valueleft = ((java_cup.runtime.Symbol)CUP$VParser$stack.peek()).left;
		int valueright = ((java_cup.runtime.Symbol)CUP$VParser$stack.peek()).right;
		Operation value = (Operation)((java_cup.runtime.Symbol) CUP$VParser$stack.peek()).value;
		 RESULT = new Operation(value, OperationType.MINUS); 
              CUP$VParser$result = parser.getSymbolFactory().newSymbol("factor",38, ((java_cup.runtime.Symbol)CUP$VParser$stack.elementAt(CUP$VParser$top-1)), ((java_cup.runtime.Symbol)CUP$VParser$stack.peek()), RESULT);
            }
          return CUP$VParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 11: // factor ::= op_value 
            {
              Operation RESULT =null;
		int valueleft = ((java_cup.runtime.Symbol)CUP$VParser$stack.peek()).left;
		int valueright = ((java_cup.runtime.Symbol)CUP$VParser$stack.peek()).right;
		Operation value = (Operation)((java_cup.runtime.Symbol) CUP$VParser$stack.peek()).value;
		 RESULT = value; 
              CUP$VParser$result = parser.getSymbolFactory().newSymbol("factor",38, ((java_cup.runtime.Symbol)CUP$VParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$VParser$stack.peek()), RESULT);
            }
          return CUP$VParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 12: // op_value ::= PARENTHESISO arithmetic_op PARENTHESISC 
            {
              Operation RESULT =null;
		int valueleft = ((java_cup.runtime.Symbol)CUP$VParser$stack.elementAt(CUP$VParser$top-1)).left;
		int valueright = ((java_cup.runtime.Symbol)CUP$VParser$stack.elementAt(CUP$VParser$top-1)).right;
		Operation value = (Operation)((java_cup.runtime.Symbol) CUP$VParser$stack.elementAt(CUP$VParser$top-1)).value;
		 RESULT = value; 
              CUP$VParser$result = parser.getSymbolFactory().newSymbol("op_value",39, ((java_cup.runtime.Symbol)CUP$VParser$stack.elementAt(CUP$VParser$top-2)), ((java_cup.runtime.Symbol)CUP$VParser$stack.peek()), RESULT);
            }
          return CUP$VParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 13: // op_value ::= INTEGERNUM 
            {
              Operation RESULT =null;
		int valueleft = ((java_cup.runtime.Symbol)CUP$VParser$stack.peek()).left;
		int valueright = ((java_cup.runtime.Symbol)CUP$VParser$stack.peek()).right;
		Integer value = (Integer)((java_cup.runtime.Symbol) CUP$VParser$stack.peek()).value;
		 RESULT = new Operation(value); 
              CUP$VParser$result = parser.getSymbolFactory().newSymbol("op_value",39, ((java_cup.runtime.Symbol)CUP$VParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$VParser$stack.peek()), RESULT);
            }
          return CUP$VParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 14: // op_value ::= DOUBLENUM 
            {
              Operation RESULT =null;
		int valueleft = ((java_cup.runtime.Symbol)CUP$VParser$stack.peek()).left;
		int valueright = ((java_cup.runtime.Symbol)CUP$VParser$stack.peek()).right;
		Double value = (Double)((java_cup.runtime.Symbol) CUP$VParser$stack.peek()).value;
		 RESULT = new Operation(value); 
              CUP$VParser$result = parser.getSymbolFactory().newSymbol("op_value",39, ((java_cup.runtime.Symbol)CUP$VParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$VParser$stack.peek()), RESULT);
            }
          return CUP$VParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 15: // op_value ::= ID 
            {
              Operation RESULT =null;
		int varNameleft = ((java_cup.runtime.Symbol)CUP$VParser$stack.peek()).left;
		int varNameright = ((java_cup.runtime.Symbol)CUP$VParser$stack.peek()).right;
		String varName = (String)((java_cup.runtime.Symbol) CUP$VParser$stack.peek()).value;
		 RESULT = new Operation(varName, OperationType.ID, varNameleft, varNameright); 
              CUP$VParser$result = parser.getSymbolFactory().newSymbol("op_value",39, ((java_cup.runtime.Symbol)CUP$VParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$VParser$stack.peek()), RESULT);
            }
          return CUP$VParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 16: // op_value ::= CHARACTER 
            {
              Operation RESULT =null;
		int valueleft = ((java_cup.runtime.Symbol)CUP$VParser$stack.peek()).left;
		int valueright = ((java_cup.runtime.Symbol)CUP$VParser$stack.peek()).right;
		char value = (char)((java_cup.runtime.Symbol) CUP$VParser$stack.peek()).value;
		 RESULT = new Operation(value); 
              CUP$VParser$result = parser.getSymbolFactory().newSymbol("op_value",39, ((java_cup.runtime.Symbol)CUP$VParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$VParser$stack.peek()), RESULT);
            }
          return CUP$VParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 17: // relational_op ::= arithmetic_op COMPARATION arithmetic_op 
            {
              Operation RESULT =null;
		int value1left = ((java_cup.runtime.Symbol)CUP$VParser$stack.elementAt(CUP$VParser$top-2)).left;
		int value1right = ((java_cup.runtime.Symbol)CUP$VParser$stack.elementAt(CUP$VParser$top-2)).right;
		Operation value1 = (Operation)((java_cup.runtime.Symbol) CUP$VParser$stack.elementAt(CUP$VParser$top-2)).value;
		int value2left = ((java_cup.runtime.Symbol)CUP$VParser$stack.peek()).left;
		int value2right = ((java_cup.runtime.Symbol)CUP$VParser$stack.peek()).right;
		Operation value2 = (Operation)((java_cup.runtime.Symbol) CUP$VParser$stack.peek()).value;
		 RESULT = new Operation(value1, value2, OperationType.EQUALS); 
              CUP$VParser$result = parser.getSymbolFactory().newSymbol("relational_op",40, ((java_cup.runtime.Symbol)CUP$VParser$stack.elementAt(CUP$VParser$top-2)), ((java_cup.runtime.Symbol)CUP$VParser$stack.peek()), RESULT);
            }
          return CUP$VParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 18: // relational_op ::= arithmetic_op LESSEQUALTHAN arithmetic_op 
            {
              Operation RESULT =null;
		int value1left = ((java_cup.runtime.Symbol)CUP$VParser$stack.elementAt(CUP$VParser$top-2)).left;
		int value1right = ((java_cup.runtime.Symbol)CUP$VParser$stack.elementAt(CUP$VParser$top-2)).right;
		Operation value1 = (Operation)((java_cup.runtime.Symbol) CUP$VParser$stack.elementAt(CUP$VParser$top-2)).value;
		int value2left = ((java_cup.runtime.Symbol)CUP$VParser$stack.peek()).left;
		int value2right = ((java_cup.runtime.Symbol)CUP$VParser$stack.peek()).right;
		Operation value2 = (Operation)((java_cup.runtime.Symbol) CUP$VParser$stack.peek()).value;
		 RESULT = new Operation(value1, value2, OperationType.LESS_EQUAL_THAN); 
              CUP$VParser$result = parser.getSymbolFactory().newSymbol("relational_op",40, ((java_cup.runtime.Symbol)CUP$VParser$stack.elementAt(CUP$VParser$top-2)), ((java_cup.runtime.Symbol)CUP$VParser$stack.peek()), RESULT);
            }
          return CUP$VParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 19: // relational_op ::= arithmetic_op GREATEREQUALTHAN arithmetic_op 
            {
              Operation RESULT =null;
		int value1left = ((java_cup.runtime.Symbol)CUP$VParser$stack.elementAt(CUP$VParser$top-2)).left;
		int value1right = ((java_cup.runtime.Symbol)CUP$VParser$stack.elementAt(CUP$VParser$top-2)).right;
		Operation value1 = (Operation)((java_cup.runtime.Symbol) CUP$VParser$stack.elementAt(CUP$VParser$top-2)).value;
		int value2left = ((java_cup.runtime.Symbol)CUP$VParser$stack.peek()).left;
		int value2right = ((java_cup.runtime.Symbol)CUP$VParser$stack.peek()).right;
		Operation value2 = (Operation)((java_cup.runtime.Symbol) CUP$VParser$stack.peek()).value;
		 RESULT = new Operation(value1, value2, OperationType.GREATER_EQUAL_THAN); 
              CUP$VParser$result = parser.getSymbolFactory().newSymbol("relational_op",40, ((java_cup.runtime.Symbol)CUP$VParser$stack.elementAt(CUP$VParser$top-2)), ((java_cup.runtime.Symbol)CUP$VParser$stack.peek()), RESULT);
            }
          return CUP$VParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 20: // relational_op ::= arithmetic_op LESSTHAN arithmetic_op 
            {
              Operation RESULT =null;
		int value1left = ((java_cup.runtime.Symbol)CUP$VParser$stack.elementAt(CUP$VParser$top-2)).left;
		int value1right = ((java_cup.runtime.Symbol)CUP$VParser$stack.elementAt(CUP$VParser$top-2)).right;
		Operation value1 = (Operation)((java_cup.runtime.Symbol) CUP$VParser$stack.elementAt(CUP$VParser$top-2)).value;
		int value2left = ((java_cup.runtime.Symbol)CUP$VParser$stack.peek()).left;
		int value2right = ((java_cup.runtime.Symbol)CUP$VParser$stack.peek()).right;
		Operation value2 = (Operation)((java_cup.runtime.Symbol) CUP$VParser$stack.peek()).value;
		 RESULT = new Operation(value1, value2, OperationType.LESS_THAN); 
              CUP$VParser$result = parser.getSymbolFactory().newSymbol("relational_op",40, ((java_cup.runtime.Symbol)CUP$VParser$stack.elementAt(CUP$VParser$top-2)), ((java_cup.runtime.Symbol)CUP$VParser$stack.peek()), RESULT);
            }
          return CUP$VParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 21: // relational_op ::= arithmetic_op GREATERTHAN arithmetic_op 
            {
              Operation RESULT =null;
		int value1left = ((java_cup.runtime.Symbol)CUP$VParser$stack.elementAt(CUP$VParser$top-2)).left;
		int value1right = ((java_cup.runtime.Symbol)CUP$VParser$stack.elementAt(CUP$VParser$top-2)).right;
		Operation value1 = (Operation)((java_cup.runtime.Symbol) CUP$VParser$stack.elementAt(CUP$VParser$top-2)).value;
		int value2left = ((java_cup.runtime.Symbol)CUP$VParser$stack.peek()).left;
		int value2right = ((java_cup.runtime.Symbol)CUP$VParser$stack.peek()).right;
		Operation value2 = (Operation)((java_cup.runtime.Symbol) CUP$VParser$stack.peek()).value;
		 RESULT = new Operation(value1, value2, OperationType.GREATER_THAN); 
              CUP$VParser$result = parser.getSymbolFactory().newSymbol("relational_op",40, ((java_cup.runtime.Symbol)CUP$VParser$stack.elementAt(CUP$VParser$top-2)), ((java_cup.runtime.Symbol)CUP$VParser$stack.peek()), RESULT);
            }
          return CUP$VParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 22: // relational_op ::= arithmetic_op NOTEQUAL arithmetic_op 
            {
              Operation RESULT =null;
		int value1left = ((java_cup.runtime.Symbol)CUP$VParser$stack.elementAt(CUP$VParser$top-2)).left;
		int value1right = ((java_cup.runtime.Symbol)CUP$VParser$stack.elementAt(CUP$VParser$top-2)).right;
		Operation value1 = (Operation)((java_cup.runtime.Symbol) CUP$VParser$stack.elementAt(CUP$VParser$top-2)).value;
		int value2left = ((java_cup.runtime.Symbol)CUP$VParser$stack.peek()).left;
		int value2right = ((java_cup.runtime.Symbol)CUP$VParser$stack.peek()).right;
		Operation value2 = (Operation)((java_cup.runtime.Symbol) CUP$VParser$stack.peek()).value;
		 RESULT = new Operation(value1, value2, OperationType.NOTEQUAL); 
              CUP$VParser$result = parser.getSymbolFactory().newSymbol("relational_op",40, ((java_cup.runtime.Symbol)CUP$VParser$stack.elementAt(CUP$VParser$top-2)), ((java_cup.runtime.Symbol)CUP$VParser$stack.peek()), RESULT);
            }
          return CUP$VParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 23: // logical_op ::= logical_op AND logical_term 
            {
              Operation RESULT =null;
		int value1left = ((java_cup.runtime.Symbol)CUP$VParser$stack.elementAt(CUP$VParser$top-2)).left;
		int value1right = ((java_cup.runtime.Symbol)CUP$VParser$stack.elementAt(CUP$VParser$top-2)).right;
		Operation value1 = (Operation)((java_cup.runtime.Symbol) CUP$VParser$stack.elementAt(CUP$VParser$top-2)).value;
		int value2left = ((java_cup.runtime.Symbol)CUP$VParser$stack.peek()).left;
		int value2right = ((java_cup.runtime.Symbol)CUP$VParser$stack.peek()).right;
		Operation value2 = (Operation)((java_cup.runtime.Symbol) CUP$VParser$stack.peek()).value;
		 RESULT = new Operation(value1, value2, OperationType.AND); 
              CUP$VParser$result = parser.getSymbolFactory().newSymbol("logical_op",41, ((java_cup.runtime.Symbol)CUP$VParser$stack.elementAt(CUP$VParser$top-2)), ((java_cup.runtime.Symbol)CUP$VParser$stack.peek()), RESULT);
            }
          return CUP$VParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 24: // logical_op ::= logical_op OR logical_term 
            {
              Operation RESULT =null;
		int value1left = ((java_cup.runtime.Symbol)CUP$VParser$stack.elementAt(CUP$VParser$top-2)).left;
		int value1right = ((java_cup.runtime.Symbol)CUP$VParser$stack.elementAt(CUP$VParser$top-2)).right;
		Operation value1 = (Operation)((java_cup.runtime.Symbol) CUP$VParser$stack.elementAt(CUP$VParser$top-2)).value;
		int value2left = ((java_cup.runtime.Symbol)CUP$VParser$stack.peek()).left;
		int value2right = ((java_cup.runtime.Symbol)CUP$VParser$stack.peek()).right;
		Operation value2 = (Operation)((java_cup.runtime.Symbol) CUP$VParser$stack.peek()).value;
		 RESULT = new Operation(value1, value2, OperationType.OR); 
              CUP$VParser$result = parser.getSymbolFactory().newSymbol("logical_op",41, ((java_cup.runtime.Symbol)CUP$VParser$stack.elementAt(CUP$VParser$top-2)), ((java_cup.runtime.Symbol)CUP$VParser$stack.peek()), RESULT);
            }
          return CUP$VParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 25: // logical_op ::= logical_term 
            {
              Operation RESULT =null;
		int valueleft = ((java_cup.runtime.Symbol)CUP$VParser$stack.peek()).left;
		int valueright = ((java_cup.runtime.Symbol)CUP$VParser$stack.peek()).right;
		Operation value = (Operation)((java_cup.runtime.Symbol) CUP$VParser$stack.peek()).value;
		 RESULT = value; 
              CUP$VParser$result = parser.getSymbolFactory().newSymbol("logical_op",41, ((java_cup.runtime.Symbol)CUP$VParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$VParser$stack.peek()), RESULT);
            }
          return CUP$VParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 26: // logical_term ::= NOT logical_factor 
            {
              Operation RESULT =null;
		int valueleft = ((java_cup.runtime.Symbol)CUP$VParser$stack.peek()).left;
		int valueright = ((java_cup.runtime.Symbol)CUP$VParser$stack.peek()).right;
		Operation value = (Operation)((java_cup.runtime.Symbol) CUP$VParser$stack.peek()).value;
		 RESULT = new Operation(value, OperationType.NOT); 
              CUP$VParser$result = parser.getSymbolFactory().newSymbol("logical_term",42, ((java_cup.runtime.Symbol)CUP$VParser$stack.elementAt(CUP$VParser$top-1)), ((java_cup.runtime.Symbol)CUP$VParser$stack.peek()), RESULT);
            }
          return CUP$VParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 27: // logical_term ::= logical_factor 
            {
              Operation RESULT =null;
		int valueleft = ((java_cup.runtime.Symbol)CUP$VParser$stack.peek()).left;
		int valueright = ((java_cup.runtime.Symbol)CUP$VParser$stack.peek()).right;
		Operation value = (Operation)((java_cup.runtime.Symbol) CUP$VParser$stack.peek()).value;
		 RESULT = value; 
              CUP$VParser$result = parser.getSymbolFactory().newSymbol("logical_term",42, ((java_cup.runtime.Symbol)CUP$VParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$VParser$stack.peek()), RESULT);
            }
          return CUP$VParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 28: // logical_factor ::= PARENTHESISO logical_op PARENTHESISC 
            {
              Operation RESULT =null;
		int valueleft = ((java_cup.runtime.Symbol)CUP$VParser$stack.elementAt(CUP$VParser$top-1)).left;
		int valueright = ((java_cup.runtime.Symbol)CUP$VParser$stack.elementAt(CUP$VParser$top-1)).right;
		Operation value = (Operation)((java_cup.runtime.Symbol) CUP$VParser$stack.elementAt(CUP$VParser$top-1)).value;
		 RESULT = value; 
              CUP$VParser$result = parser.getSymbolFactory().newSymbol("logical_factor",43, ((java_cup.runtime.Symbol)CUP$VParser$stack.elementAt(CUP$VParser$top-2)), ((java_cup.runtime.Symbol)CUP$VParser$stack.peek()), RESULT);
            }
          return CUP$VParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 29: // logical_factor ::= relational_op 
            {
              Operation RESULT =null;
		int valueleft = ((java_cup.runtime.Symbol)CUP$VParser$stack.peek()).left;
		int valueright = ((java_cup.runtime.Symbol)CUP$VParser$stack.peek()).right;
		Operation value = (Operation)((java_cup.runtime.Symbol) CUP$VParser$stack.peek()).value;
		 RESULT = value; 
              CUP$VParser$result = parser.getSymbolFactory().newSymbol("logical_factor",43, ((java_cup.runtime.Symbol)CUP$VParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$VParser$stack.peek()), RESULT);
            }
          return CUP$VParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 30: // vb_code ::= vb_function vb_code 
            {
              LinkedList<Instruction> RESULT =null;
		int instructionleft = ((java_cup.runtime.Symbol)CUP$VParser$stack.elementAt(CUP$VParser$top-1)).left;
		int instructionright = ((java_cup.runtime.Symbol)CUP$VParser$stack.elementAt(CUP$VParser$top-1)).right;
		Instruction instruction = (Instruction)((java_cup.runtime.Symbol) CUP$VParser$stack.elementAt(CUP$VParser$top-1)).value;
		int instructionsListleft = ((java_cup.runtime.Symbol)CUP$VParser$stack.peek()).left;
		int instructionsListright = ((java_cup.runtime.Symbol)CUP$VParser$stack.peek()).right;
		LinkedList<Instruction> instructionsList = (LinkedList<Instruction>)((java_cup.runtime.Symbol) CUP$VParser$stack.peek()).value;
		 instructionsList.addFirst(instruction); RESULT = instructionsList; 
              CUP$VParser$result = parser.getSymbolFactory().newSymbol("vb_code",54, ((java_cup.runtime.Symbol)CUP$VParser$stack.elementAt(CUP$VParser$top-1)), ((java_cup.runtime.Symbol)CUP$VParser$stack.peek()), RESULT);
            }
          return CUP$VParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 31: // vb_code ::= vb_procedure vb_code 
            {
              LinkedList<Instruction> RESULT =null;
		int instructionleft = ((java_cup.runtime.Symbol)CUP$VParser$stack.elementAt(CUP$VParser$top-1)).left;
		int instructionright = ((java_cup.runtime.Symbol)CUP$VParser$stack.elementAt(CUP$VParser$top-1)).right;
		Instruction instruction = (Instruction)((java_cup.runtime.Symbol) CUP$VParser$stack.elementAt(CUP$VParser$top-1)).value;
		int instructionsListleft = ((java_cup.runtime.Symbol)CUP$VParser$stack.peek()).left;
		int instructionsListright = ((java_cup.runtime.Symbol)CUP$VParser$stack.peek()).right;
		LinkedList<Instruction> instructionsList = (LinkedList<Instruction>)((java_cup.runtime.Symbol) CUP$VParser$stack.peek()).value;
		 instructionsList.addFirst(instruction); RESULT = instructionsList; 
              CUP$VParser$result = parser.getSymbolFactory().newSymbol("vb_code",54, ((java_cup.runtime.Symbol)CUP$VParser$stack.elementAt(CUP$VParser$top-1)), ((java_cup.runtime.Symbol)CUP$VParser$stack.peek()), RESULT);
            }
          return CUP$VParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 32: // vb_code ::= 
            {
              LinkedList<Instruction> RESULT =null;
		 RESULT = new LinkedList<Instruction>(); 
              CUP$VParser$result = parser.getSymbolFactory().newSymbol("vb_code",54, ((java_cup.runtime.Symbol)CUP$VParser$stack.peek()), RESULT);
            }
          return CUP$VParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 33: // vb_code_statements ::= vb_declaration vb_code_statements 
            {
              LinkedList<Instruction> RESULT =null;
		int instructionsleft = ((java_cup.runtime.Symbol)CUP$VParser$stack.elementAt(CUP$VParser$top-1)).left;
		int instructionsright = ((java_cup.runtime.Symbol)CUP$VParser$stack.elementAt(CUP$VParser$top-1)).right;
		LinkedList<Instruction> instructions = (LinkedList<Instruction>)((java_cup.runtime.Symbol) CUP$VParser$stack.elementAt(CUP$VParser$top-1)).value;
		int instructionsListleft = ((java_cup.runtime.Symbol)CUP$VParser$stack.peek()).left;
		int instructionsListright = ((java_cup.runtime.Symbol)CUP$VParser$stack.peek()).right;
		LinkedList<Instruction> instructionsList = (LinkedList<Instruction>)((java_cup.runtime.Symbol) CUP$VParser$stack.peek()).value;
		 instructionsList.addAll(0, instructions); RESULT = instructionsList; 
              CUP$VParser$result = parser.getSymbolFactory().newSymbol("vb_code_statements",55, ((java_cup.runtime.Symbol)CUP$VParser$stack.elementAt(CUP$VParser$top-1)), ((java_cup.runtime.Symbol)CUP$VParser$stack.peek()), RESULT);
            }
          return CUP$VParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 34: // vb_code_statements ::= vb_declaration_assignment vb_code_statements 
            {
              LinkedList<Instruction> RESULT =null;
		int instructionsleft = ((java_cup.runtime.Symbol)CUP$VParser$stack.elementAt(CUP$VParser$top-1)).left;
		int instructionsright = ((java_cup.runtime.Symbol)CUP$VParser$stack.elementAt(CUP$VParser$top-1)).right;
		LinkedList<Instruction> instructions = (LinkedList<Instruction>)((java_cup.runtime.Symbol) CUP$VParser$stack.elementAt(CUP$VParser$top-1)).value;
		int instructionsListleft = ((java_cup.runtime.Symbol)CUP$VParser$stack.peek()).left;
		int instructionsListright = ((java_cup.runtime.Symbol)CUP$VParser$stack.peek()).right;
		LinkedList<Instruction> instructionsList = (LinkedList<Instruction>)((java_cup.runtime.Symbol) CUP$VParser$stack.peek()).value;
		 instructionsList.addAll(0, instructions); RESULT = instructionsList; 
              CUP$VParser$result = parser.getSymbolFactory().newSymbol("vb_code_statements",55, ((java_cup.runtime.Symbol)CUP$VParser$stack.elementAt(CUP$VParser$top-1)), ((java_cup.runtime.Symbol)CUP$VParser$stack.peek()), RESULT);
            }
          return CUP$VParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 35: // vb_code_statements ::= vb_assignment vb_code_statements 
            {
              LinkedList<Instruction> RESULT =null;
		int instructionleft = ((java_cup.runtime.Symbol)CUP$VParser$stack.elementAt(CUP$VParser$top-1)).left;
		int instructionright = ((java_cup.runtime.Symbol)CUP$VParser$stack.elementAt(CUP$VParser$top-1)).right;
		Instruction instruction = (Instruction)((java_cup.runtime.Symbol) CUP$VParser$stack.elementAt(CUP$VParser$top-1)).value;
		int instructionsListleft = ((java_cup.runtime.Symbol)CUP$VParser$stack.peek()).left;
		int instructionsListright = ((java_cup.runtime.Symbol)CUP$VParser$stack.peek()).right;
		LinkedList<Instruction> instructionsList = (LinkedList<Instruction>)((java_cup.runtime.Symbol) CUP$VParser$stack.peek()).value;
		 instructionsList.addFirst(instruction); RESULT = instructionsList; 
              CUP$VParser$result = parser.getSymbolFactory().newSymbol("vb_code_statements",55, ((java_cup.runtime.Symbol)CUP$VParser$stack.elementAt(CUP$VParser$top-1)), ((java_cup.runtime.Symbol)CUP$VParser$stack.peek()), RESULT);
            }
          return CUP$VParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 36: // vb_code_statements ::= vb_while vb_code_statements 
            {
              LinkedList<Instruction> RESULT =null;
		int instructionleft = ((java_cup.runtime.Symbol)CUP$VParser$stack.elementAt(CUP$VParser$top-1)).left;
		int instructionright = ((java_cup.runtime.Symbol)CUP$VParser$stack.elementAt(CUP$VParser$top-1)).right;
		Instruction instruction = (Instruction)((java_cup.runtime.Symbol) CUP$VParser$stack.elementAt(CUP$VParser$top-1)).value;
		int instructionsListleft = ((java_cup.runtime.Symbol)CUP$VParser$stack.peek()).left;
		int instructionsListright = ((java_cup.runtime.Symbol)CUP$VParser$stack.peek()).right;
		LinkedList<Instruction> instructionsList = (LinkedList<Instruction>)((java_cup.runtime.Symbol) CUP$VParser$stack.peek()).value;
		 instructionsList.addFirst(instruction); RESULT = instructionsList; 
              CUP$VParser$result = parser.getSymbolFactory().newSymbol("vb_code_statements",55, ((java_cup.runtime.Symbol)CUP$VParser$stack.elementAt(CUP$VParser$top-1)), ((java_cup.runtime.Symbol)CUP$VParser$stack.peek()), RESULT);
            }
          return CUP$VParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 37: // vb_code_statements ::= vb_do_while vb_code_statements 
            {
              LinkedList<Instruction> RESULT =null;
		int instructionleft = ((java_cup.runtime.Symbol)CUP$VParser$stack.elementAt(CUP$VParser$top-1)).left;
		int instructionright = ((java_cup.runtime.Symbol)CUP$VParser$stack.elementAt(CUP$VParser$top-1)).right;
		Instruction instruction = (Instruction)((java_cup.runtime.Symbol) CUP$VParser$stack.elementAt(CUP$VParser$top-1)).value;
		int instructionsListleft = ((java_cup.runtime.Symbol)CUP$VParser$stack.peek()).left;
		int instructionsListright = ((java_cup.runtime.Symbol)CUP$VParser$stack.peek()).right;
		LinkedList<Instruction> instructionsList = (LinkedList<Instruction>)((java_cup.runtime.Symbol) CUP$VParser$stack.peek()).value;
		 instructionsList.addFirst(instruction); RESULT = instructionsList; 
              CUP$VParser$result = parser.getSymbolFactory().newSymbol("vb_code_statements",55, ((java_cup.runtime.Symbol)CUP$VParser$stack.elementAt(CUP$VParser$top-1)), ((java_cup.runtime.Symbol)CUP$VParser$stack.peek()), RESULT);
            }
          return CUP$VParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 38: // vb_code_statements ::= vb_for vb_code_statements 
            {
              LinkedList<Instruction> RESULT =null;
		int instructionleft = ((java_cup.runtime.Symbol)CUP$VParser$stack.elementAt(CUP$VParser$top-1)).left;
		int instructionright = ((java_cup.runtime.Symbol)CUP$VParser$stack.elementAt(CUP$VParser$top-1)).right;
		Instruction instruction = (Instruction)((java_cup.runtime.Symbol) CUP$VParser$stack.elementAt(CUP$VParser$top-1)).value;
		int instructionsListleft = ((java_cup.runtime.Symbol)CUP$VParser$stack.peek()).left;
		int instructionsListright = ((java_cup.runtime.Symbol)CUP$VParser$stack.peek()).right;
		LinkedList<Instruction> instructionsList = (LinkedList<Instruction>)((java_cup.runtime.Symbol) CUP$VParser$stack.peek()).value;
		 instructionsList.addFirst(instruction); RESULT = instructionsList; 
              CUP$VParser$result = parser.getSymbolFactory().newSymbol("vb_code_statements",55, ((java_cup.runtime.Symbol)CUP$VParser$stack.elementAt(CUP$VParser$top-1)), ((java_cup.runtime.Symbol)CUP$VParser$stack.peek()), RESULT);
            }
          return CUP$VParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 39: // vb_code_statements ::= vb_if vb_code_statements 
            {
              LinkedList<Instruction> RESULT =null;
		int instructionleft = ((java_cup.runtime.Symbol)CUP$VParser$stack.elementAt(CUP$VParser$top-1)).left;
		int instructionright = ((java_cup.runtime.Symbol)CUP$VParser$stack.elementAt(CUP$VParser$top-1)).right;
		Instruction instruction = (Instruction)((java_cup.runtime.Symbol) CUP$VParser$stack.elementAt(CUP$VParser$top-1)).value;
		int instructionsListleft = ((java_cup.runtime.Symbol)CUP$VParser$stack.peek()).left;
		int instructionsListright = ((java_cup.runtime.Symbol)CUP$VParser$stack.peek()).right;
		LinkedList<Instruction> instructionsList = (LinkedList<Instruction>)((java_cup.runtime.Symbol) CUP$VParser$stack.peek()).value;
		 instructionsList.addFirst(instruction); RESULT = instructionsList; 
              CUP$VParser$result = parser.getSymbolFactory().newSymbol("vb_code_statements",55, ((java_cup.runtime.Symbol)CUP$VParser$stack.elementAt(CUP$VParser$top-1)), ((java_cup.runtime.Symbol)CUP$VParser$stack.peek()), RESULT);
            }
          return CUP$VParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 40: // vb_code_statements ::= vb_switch vb_code_statements 
            {
              LinkedList<Instruction> RESULT =null;
		int instructionleft = ((java_cup.runtime.Symbol)CUP$VParser$stack.elementAt(CUP$VParser$top-1)).left;
		int instructionright = ((java_cup.runtime.Symbol)CUP$VParser$stack.elementAt(CUP$VParser$top-1)).right;
		Instruction instruction = (Instruction)((java_cup.runtime.Symbol) CUP$VParser$stack.elementAt(CUP$VParser$top-1)).value;
		int instructionsListleft = ((java_cup.runtime.Symbol)CUP$VParser$stack.peek()).left;
		int instructionsListright = ((java_cup.runtime.Symbol)CUP$VParser$stack.peek()).right;
		LinkedList<Instruction> instructionsList = (LinkedList<Instruction>)((java_cup.runtime.Symbol) CUP$VParser$stack.peek()).value;
		 instructionsList.addFirst(instruction); RESULT = instructionsList; 
              CUP$VParser$result = parser.getSymbolFactory().newSymbol("vb_code_statements",55, ((java_cup.runtime.Symbol)CUP$VParser$stack.elementAt(CUP$VParser$top-1)), ((java_cup.runtime.Symbol)CUP$VParser$stack.peek()), RESULT);
            }
          return CUP$VParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 41: // vb_code_statements ::= vb_screen_messages vb_code_statements 
            {
              LinkedList<Instruction> RESULT =null;
		int instructionleft = ((java_cup.runtime.Symbol)CUP$VParser$stack.elementAt(CUP$VParser$top-1)).left;
		int instructionright = ((java_cup.runtime.Symbol)CUP$VParser$stack.elementAt(CUP$VParser$top-1)).right;
		Instruction instruction = (Instruction)((java_cup.runtime.Symbol) CUP$VParser$stack.elementAt(CUP$VParser$top-1)).value;
		int instructionsListleft = ((java_cup.runtime.Symbol)CUP$VParser$stack.peek()).left;
		int instructionsListright = ((java_cup.runtime.Symbol)CUP$VParser$stack.peek()).right;
		LinkedList<Instruction> instructionsList = (LinkedList<Instruction>)((java_cup.runtime.Symbol) CUP$VParser$stack.peek()).value;
		 instructionsList.addFirst(instruction); RESULT = instructionsList; 
              CUP$VParser$result = parser.getSymbolFactory().newSymbol("vb_code_statements",55, ((java_cup.runtime.Symbol)CUP$VParser$stack.elementAt(CUP$VParser$top-1)), ((java_cup.runtime.Symbol)CUP$VParser$stack.peek()), RESULT);
            }
          return CUP$VParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 42: // vb_code_statements ::= vb_data_request vb_code_statements 
            {
              LinkedList<Instruction> RESULT =null;
		int instructionleft = ((java_cup.runtime.Symbol)CUP$VParser$stack.elementAt(CUP$VParser$top-1)).left;
		int instructionright = ((java_cup.runtime.Symbol)CUP$VParser$stack.elementAt(CUP$VParser$top-1)).right;
		Instruction instruction = (Instruction)((java_cup.runtime.Symbol) CUP$VParser$stack.elementAt(CUP$VParser$top-1)).value;
		int instructionsListleft = ((java_cup.runtime.Symbol)CUP$VParser$stack.peek()).left;
		int instructionsListright = ((java_cup.runtime.Symbol)CUP$VParser$stack.peek()).right;
		LinkedList<Instruction> instructionsList = (LinkedList<Instruction>)((java_cup.runtime.Symbol) CUP$VParser$stack.peek()).value;
		 instructionsList.addFirst(instruction); RESULT = instructionsList; 
              CUP$VParser$result = parser.getSymbolFactory().newSymbol("vb_code_statements",55, ((java_cup.runtime.Symbol)CUP$VParser$stack.elementAt(CUP$VParser$top-1)), ((java_cup.runtime.Symbol)CUP$VParser$stack.peek()), RESULT);
            }
          return CUP$VParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 43: // vb_code_statements ::= RETURN arithmetic_op vb_code_statements 
            {
              LinkedList<Instruction> RESULT =null;
		int instructionleft = ((java_cup.runtime.Symbol)CUP$VParser$stack.elementAt(CUP$VParser$top-1)).left;
		int instructionright = ((java_cup.runtime.Symbol)CUP$VParser$stack.elementAt(CUP$VParser$top-1)).right;
		Operation instruction = (Operation)((java_cup.runtime.Symbol) CUP$VParser$stack.elementAt(CUP$VParser$top-1)).value;
		int instructionsListleft = ((java_cup.runtime.Symbol)CUP$VParser$stack.peek()).left;
		int instructionsListright = ((java_cup.runtime.Symbol)CUP$VParser$stack.peek()).right;
		LinkedList<Instruction> instructionsList = (LinkedList<Instruction>)((java_cup.runtime.Symbol) CUP$VParser$stack.peek()).value;
		 instructionsList.addFirst(new Return(instruction)); RESULT = instructionsList; 
              CUP$VParser$result = parser.getSymbolFactory().newSymbol("vb_code_statements",55, ((java_cup.runtime.Symbol)CUP$VParser$stack.elementAt(CUP$VParser$top-2)), ((java_cup.runtime.Symbol)CUP$VParser$stack.peek()), RESULT);
            }
          return CUP$VParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 44: // vb_code_statements ::= 
            {
              LinkedList<Instruction> RESULT =null;
		 RESULT = new LinkedList<Instruction>(); 
              CUP$VParser$result = parser.getSymbolFactory().newSymbol("vb_code_statements",55, ((java_cup.runtime.Symbol)CUP$VParser$stack.peek()), RESULT);
            }
          return CUP$VParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 45: // vb_function ::= vb_access_modifier FUNCTION ID PARENTHESISO BYVAL vb_params PARENTHESISC AS vb_data_type vb_code_statements END FUNCTION 
            {
              Instruction RESULT =null;
		int accessModifierleft = ((java_cup.runtime.Symbol)CUP$VParser$stack.elementAt(CUP$VParser$top-11)).left;
		int accessModifierright = ((java_cup.runtime.Symbol)CUP$VParser$stack.elementAt(CUP$VParser$top-11)).right;
		AccessModifier accessModifier = (AccessModifier)((java_cup.runtime.Symbol) CUP$VParser$stack.elementAt(CUP$VParser$top-11)).value;
		int nameleft = ((java_cup.runtime.Symbol)CUP$VParser$stack.elementAt(CUP$VParser$top-9)).left;
		int nameright = ((java_cup.runtime.Symbol)CUP$VParser$stack.elementAt(CUP$VParser$top-9)).right;
		String name = (String)((java_cup.runtime.Symbol) CUP$VParser$stack.elementAt(CUP$VParser$top-9)).value;
		int paramsleft = ((java_cup.runtime.Symbol)CUP$VParser$stack.elementAt(CUP$VParser$top-6)).left;
		int paramsright = ((java_cup.runtime.Symbol)CUP$VParser$stack.elementAt(CUP$VParser$top-6)).right;
		LinkedList<Declaration> params = (LinkedList<Declaration>)((java_cup.runtime.Symbol) CUP$VParser$stack.elementAt(CUP$VParser$top-6)).value;
		int returnTypeleft = ((java_cup.runtime.Symbol)CUP$VParser$stack.elementAt(CUP$VParser$top-3)).left;
		int returnTyperight = ((java_cup.runtime.Symbol)CUP$VParser$stack.elementAt(CUP$VParser$top-3)).right;
		Type returnType = (Type)((java_cup.runtime.Symbol) CUP$VParser$stack.elementAt(CUP$VParser$top-3)).value;
		int instructionsListleft = ((java_cup.runtime.Symbol)CUP$VParser$stack.elementAt(CUP$VParser$top-2)).left;
		int instructionsListright = ((java_cup.runtime.Symbol)CUP$VParser$stack.elementAt(CUP$VParser$top-2)).right;
		LinkedList<Instruction> instructionsList = (LinkedList<Instruction>)((java_cup.runtime.Symbol) CUP$VParser$stack.elementAt(CUP$VParser$top-2)).value;
		 RESULT = new Method(accessModifier, returnType, name, params, instructionsList, nameleft, nameright); 
              CUP$VParser$result = parser.getSymbolFactory().newSymbol("vb_function",9, ((java_cup.runtime.Symbol)CUP$VParser$stack.elementAt(CUP$VParser$top-11)), ((java_cup.runtime.Symbol)CUP$VParser$stack.peek()), RESULT);
            }
          return CUP$VParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 46: // vb_function ::= vb_access_modifier FUNCTION ID PARENTHESISO PARENTHESISC AS vb_data_type vb_code_statements END FUNCTION 
            {
              Instruction RESULT =null;
		int accessModifierleft = ((java_cup.runtime.Symbol)CUP$VParser$stack.elementAt(CUP$VParser$top-9)).left;
		int accessModifierright = ((java_cup.runtime.Symbol)CUP$VParser$stack.elementAt(CUP$VParser$top-9)).right;
		AccessModifier accessModifier = (AccessModifier)((java_cup.runtime.Symbol) CUP$VParser$stack.elementAt(CUP$VParser$top-9)).value;
		int nameleft = ((java_cup.runtime.Symbol)CUP$VParser$stack.elementAt(CUP$VParser$top-7)).left;
		int nameright = ((java_cup.runtime.Symbol)CUP$VParser$stack.elementAt(CUP$VParser$top-7)).right;
		String name = (String)((java_cup.runtime.Symbol) CUP$VParser$stack.elementAt(CUP$VParser$top-7)).value;
		int returnTypeleft = ((java_cup.runtime.Symbol)CUP$VParser$stack.elementAt(CUP$VParser$top-3)).left;
		int returnTyperight = ((java_cup.runtime.Symbol)CUP$VParser$stack.elementAt(CUP$VParser$top-3)).right;
		Type returnType = (Type)((java_cup.runtime.Symbol) CUP$VParser$stack.elementAt(CUP$VParser$top-3)).value;
		int instructionsListleft = ((java_cup.runtime.Symbol)CUP$VParser$stack.elementAt(CUP$VParser$top-2)).left;
		int instructionsListright = ((java_cup.runtime.Symbol)CUP$VParser$stack.elementAt(CUP$VParser$top-2)).right;
		LinkedList<Instruction> instructionsList = (LinkedList<Instruction>)((java_cup.runtime.Symbol) CUP$VParser$stack.elementAt(CUP$VParser$top-2)).value;
		 RESULT = new Method(accessModifier, returnType, name, instructionsList, nameleft, nameright); 
              CUP$VParser$result = parser.getSymbolFactory().newSymbol("vb_function",9, ((java_cup.runtime.Symbol)CUP$VParser$stack.elementAt(CUP$VParser$top-9)), ((java_cup.runtime.Symbol)CUP$VParser$stack.peek()), RESULT);
            }
          return CUP$VParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 47: // vb_procedure ::= vb_access_modifier SUB ID PARENTHESISO BYVAL vb_params PARENTHESISC vb_code_statements END SUB 
            {
              Instruction RESULT =null;
		int accessModifierleft = ((java_cup.runtime.Symbol)CUP$VParser$stack.elementAt(CUP$VParser$top-9)).left;
		int accessModifierright = ((java_cup.runtime.Symbol)CUP$VParser$stack.elementAt(CUP$VParser$top-9)).right;
		AccessModifier accessModifier = (AccessModifier)((java_cup.runtime.Symbol) CUP$VParser$stack.elementAt(CUP$VParser$top-9)).value;
		int nameleft = ((java_cup.runtime.Symbol)CUP$VParser$stack.elementAt(CUP$VParser$top-7)).left;
		int nameright = ((java_cup.runtime.Symbol)CUP$VParser$stack.elementAt(CUP$VParser$top-7)).right;
		String name = (String)((java_cup.runtime.Symbol) CUP$VParser$stack.elementAt(CUP$VParser$top-7)).value;
		int paramsleft = ((java_cup.runtime.Symbol)CUP$VParser$stack.elementAt(CUP$VParser$top-4)).left;
		int paramsright = ((java_cup.runtime.Symbol)CUP$VParser$stack.elementAt(CUP$VParser$top-4)).right;
		LinkedList<Declaration> params = (LinkedList<Declaration>)((java_cup.runtime.Symbol) CUP$VParser$stack.elementAt(CUP$VParser$top-4)).value;
		int instructionsListleft = ((java_cup.runtime.Symbol)CUP$VParser$stack.elementAt(CUP$VParser$top-2)).left;
		int instructionsListright = ((java_cup.runtime.Symbol)CUP$VParser$stack.elementAt(CUP$VParser$top-2)).right;
		LinkedList<Instruction> instructionsList = (LinkedList<Instruction>)((java_cup.runtime.Symbol) CUP$VParser$stack.elementAt(CUP$VParser$top-2)).value;
		 RESULT = new Method(accessModifier, Type.VOID, name, params, instructionsList, nameleft, nameright); 
              CUP$VParser$result = parser.getSymbolFactory().newSymbol("vb_procedure",10, ((java_cup.runtime.Symbol)CUP$VParser$stack.elementAt(CUP$VParser$top-9)), ((java_cup.runtime.Symbol)CUP$VParser$stack.peek()), RESULT);
            }
          return CUP$VParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 48: // vb_procedure ::= vb_access_modifier SUB ID PARENTHESISO PARENTHESISC vb_code_statements END SUB 
            {
              Instruction RESULT =null;
		int accessModifierleft = ((java_cup.runtime.Symbol)CUP$VParser$stack.elementAt(CUP$VParser$top-7)).left;
		int accessModifierright = ((java_cup.runtime.Symbol)CUP$VParser$stack.elementAt(CUP$VParser$top-7)).right;
		AccessModifier accessModifier = (AccessModifier)((java_cup.runtime.Symbol) CUP$VParser$stack.elementAt(CUP$VParser$top-7)).value;
		int nameleft = ((java_cup.runtime.Symbol)CUP$VParser$stack.elementAt(CUP$VParser$top-5)).left;
		int nameright = ((java_cup.runtime.Symbol)CUP$VParser$stack.elementAt(CUP$VParser$top-5)).right;
		String name = (String)((java_cup.runtime.Symbol) CUP$VParser$stack.elementAt(CUP$VParser$top-5)).value;
		int instructionsListleft = ((java_cup.runtime.Symbol)CUP$VParser$stack.elementAt(CUP$VParser$top-2)).left;
		int instructionsListright = ((java_cup.runtime.Symbol)CUP$VParser$stack.elementAt(CUP$VParser$top-2)).right;
		LinkedList<Instruction> instructionsList = (LinkedList<Instruction>)((java_cup.runtime.Symbol) CUP$VParser$stack.elementAt(CUP$VParser$top-2)).value;
		 RESULT = new Method(accessModifier, Type.VOID, name, instructionsList, nameleft, nameright); 
              CUP$VParser$result = parser.getSymbolFactory().newSymbol("vb_procedure",10, ((java_cup.runtime.Symbol)CUP$VParser$stack.elementAt(CUP$VParser$top-7)), ((java_cup.runtime.Symbol)CUP$VParser$stack.peek()), RESULT);
            }
          return CUP$VParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 49: // vb_access_modifier ::= PUBLIC 
            {
              AccessModifier RESULT =null;
		 RESULT = AccessModifier.PUBLIC; 
              CUP$VParser$result = parser.getSymbolFactory().newSymbol("vb_access_modifier",53, ((java_cup.runtime.Symbol)CUP$VParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$VParser$stack.peek()), RESULT);
            }
          return CUP$VParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 50: // vb_access_modifier ::= 
            {
              AccessModifier RESULT =null;
		 RESULT = AccessModifier.DEFAULT; 
              CUP$VParser$result = parser.getSymbolFactory().newSymbol("vb_access_modifier",53, ((java_cup.runtime.Symbol)CUP$VParser$stack.peek()), RESULT);
            }
          return CUP$VParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 51: // vb_params ::= ID AS vb_data_type COMMA vb_params 
            {
              LinkedList<Declaration> RESULT =null;
		int paramNameleft = ((java_cup.runtime.Symbol)CUP$VParser$stack.elementAt(CUP$VParser$top-4)).left;
		int paramNameright = ((java_cup.runtime.Symbol)CUP$VParser$stack.elementAt(CUP$VParser$top-4)).right;
		String paramName = (String)((java_cup.runtime.Symbol) CUP$VParser$stack.elementAt(CUP$VParser$top-4)).value;
		int dataTypeleft = ((java_cup.runtime.Symbol)CUP$VParser$stack.elementAt(CUP$VParser$top-2)).left;
		int dataTyperight = ((java_cup.runtime.Symbol)CUP$VParser$stack.elementAt(CUP$VParser$top-2)).right;
		Type dataType = (Type)((java_cup.runtime.Symbol) CUP$VParser$stack.elementAt(CUP$VParser$top-2)).value;
		int paramsListleft = ((java_cup.runtime.Symbol)CUP$VParser$stack.peek()).left;
		int paramsListright = ((java_cup.runtime.Symbol)CUP$VParser$stack.peek()).right;
		LinkedList<Declaration> paramsList = (LinkedList<Declaration>)((java_cup.runtime.Symbol) CUP$VParser$stack.peek()).value;
		 paramsList.addFirst(new Declaration(paramName, dataType, Role.PARAM, paramNameleft, paramNameright)); RESULT = paramsList; 
              CUP$VParser$result = parser.getSymbolFactory().newSymbol("vb_params",71, ((java_cup.runtime.Symbol)CUP$VParser$stack.elementAt(CUP$VParser$top-4)), ((java_cup.runtime.Symbol)CUP$VParser$stack.peek()), RESULT);
            }
          return CUP$VParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 52: // vb_params ::= ID AS vb_data_type 
            {
              LinkedList<Declaration> RESULT =null;
		int paramNameleft = ((java_cup.runtime.Symbol)CUP$VParser$stack.elementAt(CUP$VParser$top-2)).left;
		int paramNameright = ((java_cup.runtime.Symbol)CUP$VParser$stack.elementAt(CUP$VParser$top-2)).right;
		String paramName = (String)((java_cup.runtime.Symbol) CUP$VParser$stack.elementAt(CUP$VParser$top-2)).value;
		int dataTypeleft = ((java_cup.runtime.Symbol)CUP$VParser$stack.peek()).left;
		int dataTyperight = ((java_cup.runtime.Symbol)CUP$VParser$stack.peek()).right;
		Type dataType = (Type)((java_cup.runtime.Symbol) CUP$VParser$stack.peek()).value;
		 RESULT = new LinkedList<Declaration>(); RESULT.add(new Declaration(paramName, dataType, Role.PARAM, paramNameleft, paramNameright)); 
              CUP$VParser$result = parser.getSymbolFactory().newSymbol("vb_params",71, ((java_cup.runtime.Symbol)CUP$VParser$stack.elementAt(CUP$VParser$top-2)), ((java_cup.runtime.Symbol)CUP$VParser$stack.peek()), RESULT);
            }
          return CUP$VParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 53: // vb_declaration ::= DIM ID COMMA vb_var_list AS vb_data_type COMMA vb_multiple_type_declaration 
            {
              LinkedList<Instruction> RESULT =null;
		int varNameleft = ((java_cup.runtime.Symbol)CUP$VParser$stack.elementAt(CUP$VParser$top-6)).left;
		int varNameright = ((java_cup.runtime.Symbol)CUP$VParser$stack.elementAt(CUP$VParser$top-6)).right;
		String varName = (String)((java_cup.runtime.Symbol) CUP$VParser$stack.elementAt(CUP$VParser$top-6)).value;
		int varListleft = ((java_cup.runtime.Symbol)CUP$VParser$stack.elementAt(CUP$VParser$top-4)).left;
		int varListright = ((java_cup.runtime.Symbol)CUP$VParser$stack.elementAt(CUP$VParser$top-4)).right;
		LinkedList<Id> varList = (LinkedList<Id>)((java_cup.runtime.Symbol) CUP$VParser$stack.elementAt(CUP$VParser$top-4)).value;
		int dataTypeleft = ((java_cup.runtime.Symbol)CUP$VParser$stack.elementAt(CUP$VParser$top-2)).left;
		int dataTyperight = ((java_cup.runtime.Symbol)CUP$VParser$stack.elementAt(CUP$VParser$top-2)).right;
		Type dataType = (Type)((java_cup.runtime.Symbol) CUP$VParser$stack.elementAt(CUP$VParser$top-2)).value;
		int statementsListleft = ((java_cup.runtime.Symbol)CUP$VParser$stack.peek()).left;
		int statementsListright = ((java_cup.runtime.Symbol)CUP$VParser$stack.peek()).right;
		LinkedList<Instruction> statementsList = (LinkedList<Instruction>)((java_cup.runtime.Symbol) CUP$VParser$stack.peek()).value;
		 varList.addFirst(new Id(varName, varNameleft, varNameright)); statementsList.addAll(0, getDeclarations(varList, dataType)); RESULT = statementsList; 
              CUP$VParser$result = parser.getSymbolFactory().newSymbol("vb_declaration",56, ((java_cup.runtime.Symbol)CUP$VParser$stack.elementAt(CUP$VParser$top-7)), ((java_cup.runtime.Symbol)CUP$VParser$stack.peek()), RESULT);
            }
          return CUP$VParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 54: // vb_declaration ::= DIM ID AS vb_data_type COMMA vb_multiple_type_declaration 
            {
              LinkedList<Instruction> RESULT =null;
		int varNameleft = ((java_cup.runtime.Symbol)CUP$VParser$stack.elementAt(CUP$VParser$top-4)).left;
		int varNameright = ((java_cup.runtime.Symbol)CUP$VParser$stack.elementAt(CUP$VParser$top-4)).right;
		String varName = (String)((java_cup.runtime.Symbol) CUP$VParser$stack.elementAt(CUP$VParser$top-4)).value;
		int dataTypeleft = ((java_cup.runtime.Symbol)CUP$VParser$stack.elementAt(CUP$VParser$top-2)).left;
		int dataTyperight = ((java_cup.runtime.Symbol)CUP$VParser$stack.elementAt(CUP$VParser$top-2)).right;
		Type dataType = (Type)((java_cup.runtime.Symbol) CUP$VParser$stack.elementAt(CUP$VParser$top-2)).value;
		int statementsListleft = ((java_cup.runtime.Symbol)CUP$VParser$stack.peek()).left;
		int statementsListright = ((java_cup.runtime.Symbol)CUP$VParser$stack.peek()).right;
		LinkedList<Instruction> statementsList = (LinkedList<Instruction>)((java_cup.runtime.Symbol) CUP$VParser$stack.peek()).value;
		 statementsList.add(new Declaration(varName, dataType, Role.VAR, varNameleft, varNameright)); RESULT = statementsList; 
              CUP$VParser$result = parser.getSymbolFactory().newSymbol("vb_declaration",56, ((java_cup.runtime.Symbol)CUP$VParser$stack.elementAt(CUP$VParser$top-5)), ((java_cup.runtime.Symbol)CUP$VParser$stack.peek()), RESULT);
            }
          return CUP$VParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 55: // vb_declaration ::= DIM ID COMMA vb_var_list AS vb_data_type 
            {
              LinkedList<Instruction> RESULT =null;
		int varNameleft = ((java_cup.runtime.Symbol)CUP$VParser$stack.elementAt(CUP$VParser$top-4)).left;
		int varNameright = ((java_cup.runtime.Symbol)CUP$VParser$stack.elementAt(CUP$VParser$top-4)).right;
		String varName = (String)((java_cup.runtime.Symbol) CUP$VParser$stack.elementAt(CUP$VParser$top-4)).value;
		int varListleft = ((java_cup.runtime.Symbol)CUP$VParser$stack.elementAt(CUP$VParser$top-2)).left;
		int varListright = ((java_cup.runtime.Symbol)CUP$VParser$stack.elementAt(CUP$VParser$top-2)).right;
		LinkedList<Id> varList = (LinkedList<Id>)((java_cup.runtime.Symbol) CUP$VParser$stack.elementAt(CUP$VParser$top-2)).value;
		int dataTypeleft = ((java_cup.runtime.Symbol)CUP$VParser$stack.peek()).left;
		int dataTyperight = ((java_cup.runtime.Symbol)CUP$VParser$stack.peek()).right;
		Type dataType = (Type)((java_cup.runtime.Symbol) CUP$VParser$stack.peek()).value;
		 varList.addFirst(new Id(varName, varNameleft, varNameright)); RESULT = getDeclarations(varList, dataType); 
              CUP$VParser$result = parser.getSymbolFactory().newSymbol("vb_declaration",56, ((java_cup.runtime.Symbol)CUP$VParser$stack.elementAt(CUP$VParser$top-5)), ((java_cup.runtime.Symbol)CUP$VParser$stack.peek()), RESULT);
            }
          return CUP$VParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 56: // vb_declaration ::= DIM ID AS vb_data_type 
            {
              LinkedList<Instruction> RESULT =null;
		int varNameleft = ((java_cup.runtime.Symbol)CUP$VParser$stack.elementAt(CUP$VParser$top-2)).left;
		int varNameright = ((java_cup.runtime.Symbol)CUP$VParser$stack.elementAt(CUP$VParser$top-2)).right;
		String varName = (String)((java_cup.runtime.Symbol) CUP$VParser$stack.elementAt(CUP$VParser$top-2)).value;
		int dataTypeleft = ((java_cup.runtime.Symbol)CUP$VParser$stack.peek()).left;
		int dataTyperight = ((java_cup.runtime.Symbol)CUP$VParser$stack.peek()).right;
		Type dataType = (Type)((java_cup.runtime.Symbol) CUP$VParser$stack.peek()).value;
		 RESULT = new LinkedList<Instruction>(); RESULT.add(new Declaration(varName, dataType, Role.VAR, varNameleft, varNameright)); 
              CUP$VParser$result = parser.getSymbolFactory().newSymbol("vb_declaration",56, ((java_cup.runtime.Symbol)CUP$VParser$stack.elementAt(CUP$VParser$top-3)), ((java_cup.runtime.Symbol)CUP$VParser$stack.peek()), RESULT);
            }
          return CUP$VParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 57: // vb_var_list ::= ID COMMA vb_var_list 
            {
              LinkedList<Id> RESULT =null;
		int varNameleft = ((java_cup.runtime.Symbol)CUP$VParser$stack.elementAt(CUP$VParser$top-2)).left;
		int varNameright = ((java_cup.runtime.Symbol)CUP$VParser$stack.elementAt(CUP$VParser$top-2)).right;
		String varName = (String)((java_cup.runtime.Symbol) CUP$VParser$stack.elementAt(CUP$VParser$top-2)).value;
		int varListleft = ((java_cup.runtime.Symbol)CUP$VParser$stack.peek()).left;
		int varListright = ((java_cup.runtime.Symbol)CUP$VParser$stack.peek()).right;
		LinkedList<Id> varList = (LinkedList<Id>)((java_cup.runtime.Symbol) CUP$VParser$stack.peek()).value;
		 varList.addFirst(new Id(varName, varNameleft, varNameright)); RESULT = varList; 
              CUP$VParser$result = parser.getSymbolFactory().newSymbol("vb_var_list",73, ((java_cup.runtime.Symbol)CUP$VParser$stack.elementAt(CUP$VParser$top-2)), ((java_cup.runtime.Symbol)CUP$VParser$stack.peek()), RESULT);
            }
          return CUP$VParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 58: // vb_var_list ::= ID 
            {
              LinkedList<Id> RESULT =null;
		int varNameleft = ((java_cup.runtime.Symbol)CUP$VParser$stack.peek()).left;
		int varNameright = ((java_cup.runtime.Symbol)CUP$VParser$stack.peek()).right;
		String varName = (String)((java_cup.runtime.Symbol) CUP$VParser$stack.peek()).value;
		 RESULT = new LinkedList<Id>(); RESULT.add(new Id(varName, varNameleft, varNameright)); 
              CUP$VParser$result = parser.getSymbolFactory().newSymbol("vb_var_list",73, ((java_cup.runtime.Symbol)CUP$VParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$VParser$stack.peek()), RESULT);
            }
          return CUP$VParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 59: // vb_multiple_type_declaration ::= ID COMMA vb_var_list AS vb_data_type COMMA vb_multiple_type_declaration 
            {
              LinkedList<Instruction> RESULT =null;
		int varNameleft = ((java_cup.runtime.Symbol)CUP$VParser$stack.elementAt(CUP$VParser$top-6)).left;
		int varNameright = ((java_cup.runtime.Symbol)CUP$VParser$stack.elementAt(CUP$VParser$top-6)).right;
		String varName = (String)((java_cup.runtime.Symbol) CUP$VParser$stack.elementAt(CUP$VParser$top-6)).value;
		int varListleft = ((java_cup.runtime.Symbol)CUP$VParser$stack.elementAt(CUP$VParser$top-4)).left;
		int varListright = ((java_cup.runtime.Symbol)CUP$VParser$stack.elementAt(CUP$VParser$top-4)).right;
		LinkedList<Id> varList = (LinkedList<Id>)((java_cup.runtime.Symbol) CUP$VParser$stack.elementAt(CUP$VParser$top-4)).value;
		int dataTypeleft = ((java_cup.runtime.Symbol)CUP$VParser$stack.elementAt(CUP$VParser$top-2)).left;
		int dataTyperight = ((java_cup.runtime.Symbol)CUP$VParser$stack.elementAt(CUP$VParser$top-2)).right;
		Type dataType = (Type)((java_cup.runtime.Symbol) CUP$VParser$stack.elementAt(CUP$VParser$top-2)).value;
		int statementsListleft = ((java_cup.runtime.Symbol)CUP$VParser$stack.peek()).left;
		int statementsListright = ((java_cup.runtime.Symbol)CUP$VParser$stack.peek()).right;
		LinkedList<Instruction> statementsList = (LinkedList<Instruction>)((java_cup.runtime.Symbol) CUP$VParser$stack.peek()).value;
		 varList.addFirst(new Id(varName, varNameleft, varNameright)); statementsList.addAll(0, getDeclarations(varList, dataType)); RESULT = statementsList; 
              CUP$VParser$result = parser.getSymbolFactory().newSymbol("vb_multiple_type_declaration",58, ((java_cup.runtime.Symbol)CUP$VParser$stack.elementAt(CUP$VParser$top-6)), ((java_cup.runtime.Symbol)CUP$VParser$stack.peek()), RESULT);
            }
          return CUP$VParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 60: // vb_multiple_type_declaration ::= ID AS vb_data_type COMMA vb_multiple_type_declaration 
            {
              LinkedList<Instruction> RESULT =null;
		int varNameleft = ((java_cup.runtime.Symbol)CUP$VParser$stack.elementAt(CUP$VParser$top-4)).left;
		int varNameright = ((java_cup.runtime.Symbol)CUP$VParser$stack.elementAt(CUP$VParser$top-4)).right;
		String varName = (String)((java_cup.runtime.Symbol) CUP$VParser$stack.elementAt(CUP$VParser$top-4)).value;
		int dataTypeleft = ((java_cup.runtime.Symbol)CUP$VParser$stack.elementAt(CUP$VParser$top-2)).left;
		int dataTyperight = ((java_cup.runtime.Symbol)CUP$VParser$stack.elementAt(CUP$VParser$top-2)).right;
		Type dataType = (Type)((java_cup.runtime.Symbol) CUP$VParser$stack.elementAt(CUP$VParser$top-2)).value;
		int statementsListleft = ((java_cup.runtime.Symbol)CUP$VParser$stack.peek()).left;
		int statementsListright = ((java_cup.runtime.Symbol)CUP$VParser$stack.peek()).right;
		LinkedList<Instruction> statementsList = (LinkedList<Instruction>)((java_cup.runtime.Symbol) CUP$VParser$stack.peek()).value;
		 statementsList.add(new Declaration(varName, dataType, Role.VAR, varNameleft, varNameright)); RESULT = statementsList; 
              CUP$VParser$result = parser.getSymbolFactory().newSymbol("vb_multiple_type_declaration",58, ((java_cup.runtime.Symbol)CUP$VParser$stack.elementAt(CUP$VParser$top-4)), ((java_cup.runtime.Symbol)CUP$VParser$stack.peek()), RESULT);
            }
          return CUP$VParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 61: // vb_multiple_type_declaration ::= ID COMMA vb_var_list AS vb_data_type 
            {
              LinkedList<Instruction> RESULT =null;
		int varNameleft = ((java_cup.runtime.Symbol)CUP$VParser$stack.elementAt(CUP$VParser$top-4)).left;
		int varNameright = ((java_cup.runtime.Symbol)CUP$VParser$stack.elementAt(CUP$VParser$top-4)).right;
		String varName = (String)((java_cup.runtime.Symbol) CUP$VParser$stack.elementAt(CUP$VParser$top-4)).value;
		int varListleft = ((java_cup.runtime.Symbol)CUP$VParser$stack.elementAt(CUP$VParser$top-2)).left;
		int varListright = ((java_cup.runtime.Symbol)CUP$VParser$stack.elementAt(CUP$VParser$top-2)).right;
		LinkedList<Id> varList = (LinkedList<Id>)((java_cup.runtime.Symbol) CUP$VParser$stack.elementAt(CUP$VParser$top-2)).value;
		int dataTypeleft = ((java_cup.runtime.Symbol)CUP$VParser$stack.peek()).left;
		int dataTyperight = ((java_cup.runtime.Symbol)CUP$VParser$stack.peek()).right;
		Type dataType = (Type)((java_cup.runtime.Symbol) CUP$VParser$stack.peek()).value;
		 varList.addFirst(new Id(varName, varNameleft, varNameright)); RESULT = getDeclarations(varList, dataType); 
              CUP$VParser$result = parser.getSymbolFactory().newSymbol("vb_multiple_type_declaration",58, ((java_cup.runtime.Symbol)CUP$VParser$stack.elementAt(CUP$VParser$top-4)), ((java_cup.runtime.Symbol)CUP$VParser$stack.peek()), RESULT);
            }
          return CUP$VParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 62: // vb_multiple_type_declaration ::= ID AS vb_data_type 
            {
              LinkedList<Instruction> RESULT =null;
		int varNameleft = ((java_cup.runtime.Symbol)CUP$VParser$stack.elementAt(CUP$VParser$top-2)).left;
		int varNameright = ((java_cup.runtime.Symbol)CUP$VParser$stack.elementAt(CUP$VParser$top-2)).right;
		String varName = (String)((java_cup.runtime.Symbol) CUP$VParser$stack.elementAt(CUP$VParser$top-2)).value;
		int dataTypeleft = ((java_cup.runtime.Symbol)CUP$VParser$stack.peek()).left;
		int dataTyperight = ((java_cup.runtime.Symbol)CUP$VParser$stack.peek()).right;
		Type dataType = (Type)((java_cup.runtime.Symbol) CUP$VParser$stack.peek()).value;
		 RESULT = new LinkedList<Instruction>(); RESULT.add(new Declaration(varName, dataType, Role.VAR, varNameleft, varNameright)); 
              CUP$VParser$result = parser.getSymbolFactory().newSymbol("vb_multiple_type_declaration",58, ((java_cup.runtime.Symbol)CUP$VParser$stack.elementAt(CUP$VParser$top-2)), ((java_cup.runtime.Symbol)CUP$VParser$stack.peek()), RESULT);
            }
          return CUP$VParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 63: // vb_assignment ::= ID COMPARATION arithmetic_op 
            {
              Instruction RESULT =null;
		int varNameleft = ((java_cup.runtime.Symbol)CUP$VParser$stack.elementAt(CUP$VParser$top-2)).left;
		int varNameright = ((java_cup.runtime.Symbol)CUP$VParser$stack.elementAt(CUP$VParser$top-2)).right;
		String varName = (String)((java_cup.runtime.Symbol) CUP$VParser$stack.elementAt(CUP$VParser$top-2)).value;
		int valueleft = ((java_cup.runtime.Symbol)CUP$VParser$stack.peek()).left;
		int valueright = ((java_cup.runtime.Symbol)CUP$VParser$stack.peek()).right;
		Operation value = (Operation)((java_cup.runtime.Symbol) CUP$VParser$stack.peek()).value;
		 RESULT = new Assignment(varName, value, varNameleft, varNameright); 
              CUP$VParser$result = parser.getSymbolFactory().newSymbol("vb_assignment",11, ((java_cup.runtime.Symbol)CUP$VParser$stack.elementAt(CUP$VParser$top-2)), ((java_cup.runtime.Symbol)CUP$VParser$stack.peek()), RESULT);
            }
          return CUP$VParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 64: // vb_assignment ::= ID COMPARATION vb_data_request 
            {
              Instruction RESULT =null;
		int varNameleft = ((java_cup.runtime.Symbol)CUP$VParser$stack.elementAt(CUP$VParser$top-2)).left;
		int varNameright = ((java_cup.runtime.Symbol)CUP$VParser$stack.elementAt(CUP$VParser$top-2)).right;
		String varName = (String)((java_cup.runtime.Symbol) CUP$VParser$stack.elementAt(CUP$VParser$top-2)).value;
		int valueleft = ((java_cup.runtime.Symbol)CUP$VParser$stack.peek()).left;
		int valueright = ((java_cup.runtime.Symbol)CUP$VParser$stack.peek()).right;
		Instruction value = (Instruction)((java_cup.runtime.Symbol) CUP$VParser$stack.peek()).value;
		 RESULT = new Assignment(varName, value, varNameleft, varNameright); 
              CUP$VParser$result = parser.getSymbolFactory().newSymbol("vb_assignment",11, ((java_cup.runtime.Symbol)CUP$VParser$stack.elementAt(CUP$VParser$top-2)), ((java_cup.runtime.Symbol)CUP$VParser$stack.peek()), RESULT);
            }
          return CUP$VParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 65: // vb_declaration_assignment ::= DIM ID AS vb_data_type COMPARATION arithmetic_op 
            {
              LinkedList<Instruction> RESULT =null;
		int varNameleft = ((java_cup.runtime.Symbol)CUP$VParser$stack.elementAt(CUP$VParser$top-4)).left;
		int varNameright = ((java_cup.runtime.Symbol)CUP$VParser$stack.elementAt(CUP$VParser$top-4)).right;
		String varName = (String)((java_cup.runtime.Symbol) CUP$VParser$stack.elementAt(CUP$VParser$top-4)).value;
		int dataTypeleft = ((java_cup.runtime.Symbol)CUP$VParser$stack.elementAt(CUP$VParser$top-2)).left;
		int dataTyperight = ((java_cup.runtime.Symbol)CUP$VParser$stack.elementAt(CUP$VParser$top-2)).right;
		Type dataType = (Type)((java_cup.runtime.Symbol) CUP$VParser$stack.elementAt(CUP$VParser$top-2)).value;
		int valueleft = ((java_cup.runtime.Symbol)CUP$VParser$stack.peek()).left;
		int valueright = ((java_cup.runtime.Symbol)CUP$VParser$stack.peek()).right;
		Operation value = (Operation)((java_cup.runtime.Symbol) CUP$VParser$stack.peek()).value;
		 RESULT = new LinkedList<Instruction>(); RESULT.addFirst(new Declaration(varName, dataType, Role.VAR, varNameleft, varNameright)); RESULT.addLast(new Assignment(varName, value, varNameleft, varNameright)); 
              CUP$VParser$result = parser.getSymbolFactory().newSymbol("vb_declaration_assignment",57, ((java_cup.runtime.Symbol)CUP$VParser$stack.elementAt(CUP$VParser$top-5)), ((java_cup.runtime.Symbol)CUP$VParser$stack.peek()), RESULT);
            }
          return CUP$VParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 66: // vb_declaration_assignment ::= DIM ID AS vb_data_type COMPARATION vb_data_request 
            {
              LinkedList<Instruction> RESULT =null;
		int varNameleft = ((java_cup.runtime.Symbol)CUP$VParser$stack.elementAt(CUP$VParser$top-4)).left;
		int varNameright = ((java_cup.runtime.Symbol)CUP$VParser$stack.elementAt(CUP$VParser$top-4)).right;
		String varName = (String)((java_cup.runtime.Symbol) CUP$VParser$stack.elementAt(CUP$VParser$top-4)).value;
		int dataTypeleft = ((java_cup.runtime.Symbol)CUP$VParser$stack.elementAt(CUP$VParser$top-2)).left;
		int dataTyperight = ((java_cup.runtime.Symbol)CUP$VParser$stack.elementAt(CUP$VParser$top-2)).right;
		Type dataType = (Type)((java_cup.runtime.Symbol) CUP$VParser$stack.elementAt(CUP$VParser$top-2)).value;
		int valueleft = ((java_cup.runtime.Symbol)CUP$VParser$stack.peek()).left;
		int valueright = ((java_cup.runtime.Symbol)CUP$VParser$stack.peek()).right;
		Instruction value = (Instruction)((java_cup.runtime.Symbol) CUP$VParser$stack.peek()).value;
		 RESULT = new LinkedList<Instruction>(); RESULT.addFirst(new Declaration(varName, dataType, Role.VAR, varNameleft, varNameright)); RESULT.addLast(new Assignment(varName, value, varNameleft, varNameright)); 
              CUP$VParser$result = parser.getSymbolFactory().newSymbol("vb_declaration_assignment",57, ((java_cup.runtime.Symbol)CUP$VParser$stack.elementAt(CUP$VParser$top-5)), ((java_cup.runtime.Symbol)CUP$VParser$stack.peek()), RESULT);
            }
          return CUP$VParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 67: // vb_data_type ::= INTEGER 
            {
              Type RESULT =null;
		 RESULT = Type.INT; 
              CUP$VParser$result = parser.getSymbolFactory().newSymbol("vb_data_type",5, ((java_cup.runtime.Symbol)CUP$VParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$VParser$stack.peek()), RESULT);
            }
          return CUP$VParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 68: // vb_data_type ::= DOUBLE 
            {
              Type RESULT =null;
		 RESULT = Type.FLOAT; 
              CUP$VParser$result = parser.getSymbolFactory().newSymbol("vb_data_type",5, ((java_cup.runtime.Symbol)CUP$VParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$VParser$stack.peek()), RESULT);
            }
          return CUP$VParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 69: // vb_data_type ::= CHAR 
            {
              Type RESULT =null;
		 RESULT = Type.CHAR; 
              CUP$VParser$result = parser.getSymbolFactory().newSymbol("vb_data_type",5, ((java_cup.runtime.Symbol)CUP$VParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$VParser$stack.peek()), RESULT);
            }
          return CUP$VParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 70: // vb_while ::= WHILE logical_op vb_code_statements END WHILE 
            {
              Instruction RESULT =null;
		int conditionleft = ((java_cup.runtime.Symbol)CUP$VParser$stack.elementAt(CUP$VParser$top-3)).left;
		int conditionright = ((java_cup.runtime.Symbol)CUP$VParser$stack.elementAt(CUP$VParser$top-3)).right;
		Operation condition = (Operation)((java_cup.runtime.Symbol) CUP$VParser$stack.elementAt(CUP$VParser$top-3)).value;
		int instructionsleft = ((java_cup.runtime.Symbol)CUP$VParser$stack.elementAt(CUP$VParser$top-2)).left;
		int instructionsright = ((java_cup.runtime.Symbol)CUP$VParser$stack.elementAt(CUP$VParser$top-2)).right;
		LinkedList<Instruction> instructions = (LinkedList<Instruction>)((java_cup.runtime.Symbol) CUP$VParser$stack.elementAt(CUP$VParser$top-2)).value;
		 RESULT = new While(condition, instructions); 
              CUP$VParser$result = parser.getSymbolFactory().newSymbol("vb_while",12, ((java_cup.runtime.Symbol)CUP$VParser$stack.elementAt(CUP$VParser$top-4)), ((java_cup.runtime.Symbol)CUP$VParser$stack.peek()), RESULT);
            }
          return CUP$VParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 71: // vb_do_while ::= DO vb_code_statements LOOP WHILE logical_op 
            {
              Instruction RESULT =null;
		int instructionsleft = ((java_cup.runtime.Symbol)CUP$VParser$stack.elementAt(CUP$VParser$top-3)).left;
		int instructionsright = ((java_cup.runtime.Symbol)CUP$VParser$stack.elementAt(CUP$VParser$top-3)).right;
		LinkedList<Instruction> instructions = (LinkedList<Instruction>)((java_cup.runtime.Symbol) CUP$VParser$stack.elementAt(CUP$VParser$top-3)).value;
		int conditionleft = ((java_cup.runtime.Symbol)CUP$VParser$stack.peek()).left;
		int conditionright = ((java_cup.runtime.Symbol)CUP$VParser$stack.peek()).right;
		Operation condition = (Operation)((java_cup.runtime.Symbol) CUP$VParser$stack.peek()).value;
		 RESULT = new DoWhile(condition, instructions); 
              CUP$VParser$result = parser.getSymbolFactory().newSymbol("vb_do_while",13, ((java_cup.runtime.Symbol)CUP$VParser$stack.elementAt(CUP$VParser$top-4)), ((java_cup.runtime.Symbol)CUP$VParser$stack.peek()), RESULT);
            }
          return CUP$VParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 72: // vb_for ::= FOR ID COMPARATION arithmetic_op TO arithmetic_op STEP arithmetic_op vb_code_statements NEXT 
            {
              Instruction RESULT =null;
		int varNameleft = ((java_cup.runtime.Symbol)CUP$VParser$stack.elementAt(CUP$VParser$top-8)).left;
		int varNameright = ((java_cup.runtime.Symbol)CUP$VParser$stack.elementAt(CUP$VParser$top-8)).right;
		String varName = (String)((java_cup.runtime.Symbol) CUP$VParser$stack.elementAt(CUP$VParser$top-8)).value;
		int value1left = ((java_cup.runtime.Symbol)CUP$VParser$stack.elementAt(CUP$VParser$top-6)).left;
		int value1right = ((java_cup.runtime.Symbol)CUP$VParser$stack.elementAt(CUP$VParser$top-6)).right;
		Operation value1 = (Operation)((java_cup.runtime.Symbol) CUP$VParser$stack.elementAt(CUP$VParser$top-6)).value;
		int value2left = ((java_cup.runtime.Symbol)CUP$VParser$stack.elementAt(CUP$VParser$top-4)).left;
		int value2right = ((java_cup.runtime.Symbol)CUP$VParser$stack.elementAt(CUP$VParser$top-4)).right;
		Operation value2 = (Operation)((java_cup.runtime.Symbol) CUP$VParser$stack.elementAt(CUP$VParser$top-4)).value;
		int value3left = ((java_cup.runtime.Symbol)CUP$VParser$stack.elementAt(CUP$VParser$top-2)).left;
		int value3right = ((java_cup.runtime.Symbol)CUP$VParser$stack.elementAt(CUP$VParser$top-2)).right;
		Operation value3 = (Operation)((java_cup.runtime.Symbol) CUP$VParser$stack.elementAt(CUP$VParser$top-2)).value;
		int instructionsleft = ((java_cup.runtime.Symbol)CUP$VParser$stack.elementAt(CUP$VParser$top-1)).left;
		int instructionsright = ((java_cup.runtime.Symbol)CUP$VParser$stack.elementAt(CUP$VParser$top-1)).right;
		LinkedList<Instruction> instructions = (LinkedList<Instruction>)((java_cup.runtime.Symbol) CUP$VParser$stack.elementAt(CUP$VParser$top-1)).value;
		  Assignment assignment = new Assignment(varName, value1, varNameleft, varNameright);
                Operation condition = new Operation(new Operation(varName, OperationType.ID, varNameleft, varNameright), value2, OperationType.LESS_EQUAL_THAN);
                Assignment increasing = new Assignment(varName, new Operation(new Operation(varName, OperationType.ID, varNameleft, varNameright), value3, OperationType.SUM), varNameleft, varNameright);
                RESULT = new For(assignment, condition, increasing, instructions);
            
              CUP$VParser$result = parser.getSymbolFactory().newSymbol("vb_for",14, ((java_cup.runtime.Symbol)CUP$VParser$stack.elementAt(CUP$VParser$top-9)), ((java_cup.runtime.Symbol)CUP$VParser$stack.peek()), RESULT);
            }
          return CUP$VParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 73: // vb_for ::= FOR ID COMPARATION arithmetic_op TO arithmetic_op vb_code_statements NEXT 
            {
              Instruction RESULT =null;
		int varNameleft = ((java_cup.runtime.Symbol)CUP$VParser$stack.elementAt(CUP$VParser$top-6)).left;
		int varNameright = ((java_cup.runtime.Symbol)CUP$VParser$stack.elementAt(CUP$VParser$top-6)).right;
		String varName = (String)((java_cup.runtime.Symbol) CUP$VParser$stack.elementAt(CUP$VParser$top-6)).value;
		int value1left = ((java_cup.runtime.Symbol)CUP$VParser$stack.elementAt(CUP$VParser$top-4)).left;
		int value1right = ((java_cup.runtime.Symbol)CUP$VParser$stack.elementAt(CUP$VParser$top-4)).right;
		Operation value1 = (Operation)((java_cup.runtime.Symbol) CUP$VParser$stack.elementAt(CUP$VParser$top-4)).value;
		int value2left = ((java_cup.runtime.Symbol)CUP$VParser$stack.elementAt(CUP$VParser$top-2)).left;
		int value2right = ((java_cup.runtime.Symbol)CUP$VParser$stack.elementAt(CUP$VParser$top-2)).right;
		Operation value2 = (Operation)((java_cup.runtime.Symbol) CUP$VParser$stack.elementAt(CUP$VParser$top-2)).value;
		int instructionsleft = ((java_cup.runtime.Symbol)CUP$VParser$stack.elementAt(CUP$VParser$top-1)).left;
		int instructionsright = ((java_cup.runtime.Symbol)CUP$VParser$stack.elementAt(CUP$VParser$top-1)).right;
		LinkedList<Instruction> instructions = (LinkedList<Instruction>)((java_cup.runtime.Symbol) CUP$VParser$stack.elementAt(CUP$VParser$top-1)).value;
		  Assignment assignment = new Assignment(varName, value1, varNameleft, varNameright);
                Operation condition = new Operation(value1, value2, OperationType.LESS_EQUAL_THAN);
                Assignment increasing = new Assignment(varName, new Operation(new Operation(varName, OperationType.ID, varNameleft, varNameright), new Operation(1), OperationType.SUM), varNameleft, varNameright);
                RESULT = new For(assignment, condition, increasing, instructions);
             
              CUP$VParser$result = parser.getSymbolFactory().newSymbol("vb_for",14, ((java_cup.runtime.Symbol)CUP$VParser$stack.elementAt(CUP$VParser$top-7)), ((java_cup.runtime.Symbol)CUP$VParser$stack.peek()), RESULT);
            }
          return CUP$VParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 74: // vb_for ::= FOR ID AS vb_data_type COMPARATION arithmetic_op TO arithmetic_op STEP arithmetic_op vb_code_statements NEXT 
            {
              Instruction RESULT =null;
		int varNameleft = ((java_cup.runtime.Symbol)CUP$VParser$stack.elementAt(CUP$VParser$top-10)).left;
		int varNameright = ((java_cup.runtime.Symbol)CUP$VParser$stack.elementAt(CUP$VParser$top-10)).right;
		String varName = (String)((java_cup.runtime.Symbol) CUP$VParser$stack.elementAt(CUP$VParser$top-10)).value;
		int dataTypeleft = ((java_cup.runtime.Symbol)CUP$VParser$stack.elementAt(CUP$VParser$top-8)).left;
		int dataTyperight = ((java_cup.runtime.Symbol)CUP$VParser$stack.elementAt(CUP$VParser$top-8)).right;
		Type dataType = (Type)((java_cup.runtime.Symbol) CUP$VParser$stack.elementAt(CUP$VParser$top-8)).value;
		int value1left = ((java_cup.runtime.Symbol)CUP$VParser$stack.elementAt(CUP$VParser$top-6)).left;
		int value1right = ((java_cup.runtime.Symbol)CUP$VParser$stack.elementAt(CUP$VParser$top-6)).right;
		Operation value1 = (Operation)((java_cup.runtime.Symbol) CUP$VParser$stack.elementAt(CUP$VParser$top-6)).value;
		int value2left = ((java_cup.runtime.Symbol)CUP$VParser$stack.elementAt(CUP$VParser$top-4)).left;
		int value2right = ((java_cup.runtime.Symbol)CUP$VParser$stack.elementAt(CUP$VParser$top-4)).right;
		Operation value2 = (Operation)((java_cup.runtime.Symbol) CUP$VParser$stack.elementAt(CUP$VParser$top-4)).value;
		int value3left = ((java_cup.runtime.Symbol)CUP$VParser$stack.elementAt(CUP$VParser$top-2)).left;
		int value3right = ((java_cup.runtime.Symbol)CUP$VParser$stack.elementAt(CUP$VParser$top-2)).right;
		Operation value3 = (Operation)((java_cup.runtime.Symbol) CUP$VParser$stack.elementAt(CUP$VParser$top-2)).value;
		int instructionsleft = ((java_cup.runtime.Symbol)CUP$VParser$stack.elementAt(CUP$VParser$top-1)).left;
		int instructionsright = ((java_cup.runtime.Symbol)CUP$VParser$stack.elementAt(CUP$VParser$top-1)).right;
		LinkedList<Instruction> instructions = (LinkedList<Instruction>)((java_cup.runtime.Symbol) CUP$VParser$stack.elementAt(CUP$VParser$top-1)).value;
		  Declaration declaration = new Declaration(varName, dataType, Role.VAR, varNameleft, varNameright);
                Assignment assignment = new Assignment(varName, value1, varNameleft, varNameright);
                Operation condition = new Operation(new Operation(varName, OperationType.ID, varNameleft, varNameright), value2, OperationType.LESS_EQUAL_THAN);
                Assignment increasing = new Assignment(varName, new Operation(new Operation(varName, OperationType.ID, varNameleft, varNameright), value3, OperationType.SUM), varNameleft, varNameright);
                RESULT = new For(declaration, assignment, condition, increasing, instructions);
            
              CUP$VParser$result = parser.getSymbolFactory().newSymbol("vb_for",14, ((java_cup.runtime.Symbol)CUP$VParser$stack.elementAt(CUP$VParser$top-11)), ((java_cup.runtime.Symbol)CUP$VParser$stack.peek()), RESULT);
            }
          return CUP$VParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 75: // vb_for ::= FOR ID AS vb_data_type COMPARATION arithmetic_op TO arithmetic_op vb_code_statements NEXT 
            {
              Instruction RESULT =null;
		int varNameleft = ((java_cup.runtime.Symbol)CUP$VParser$stack.elementAt(CUP$VParser$top-8)).left;
		int varNameright = ((java_cup.runtime.Symbol)CUP$VParser$stack.elementAt(CUP$VParser$top-8)).right;
		String varName = (String)((java_cup.runtime.Symbol) CUP$VParser$stack.elementAt(CUP$VParser$top-8)).value;
		int dataTypeleft = ((java_cup.runtime.Symbol)CUP$VParser$stack.elementAt(CUP$VParser$top-6)).left;
		int dataTyperight = ((java_cup.runtime.Symbol)CUP$VParser$stack.elementAt(CUP$VParser$top-6)).right;
		Type dataType = (Type)((java_cup.runtime.Symbol) CUP$VParser$stack.elementAt(CUP$VParser$top-6)).value;
		int value1left = ((java_cup.runtime.Symbol)CUP$VParser$stack.elementAt(CUP$VParser$top-4)).left;
		int value1right = ((java_cup.runtime.Symbol)CUP$VParser$stack.elementAt(CUP$VParser$top-4)).right;
		Operation value1 = (Operation)((java_cup.runtime.Symbol) CUP$VParser$stack.elementAt(CUP$VParser$top-4)).value;
		int value2left = ((java_cup.runtime.Symbol)CUP$VParser$stack.elementAt(CUP$VParser$top-2)).left;
		int value2right = ((java_cup.runtime.Symbol)CUP$VParser$stack.elementAt(CUP$VParser$top-2)).right;
		Operation value2 = (Operation)((java_cup.runtime.Symbol) CUP$VParser$stack.elementAt(CUP$VParser$top-2)).value;
		int instructionsleft = ((java_cup.runtime.Symbol)CUP$VParser$stack.elementAt(CUP$VParser$top-1)).left;
		int instructionsright = ((java_cup.runtime.Symbol)CUP$VParser$stack.elementAt(CUP$VParser$top-1)).right;
		LinkedList<Instruction> instructions = (LinkedList<Instruction>)((java_cup.runtime.Symbol) CUP$VParser$stack.elementAt(CUP$VParser$top-1)).value;
		  Declaration declaration = new Declaration(varName, dataType, Role.VAR, varNameleft, varNameright);
                Assignment assignment = new Assignment(varName, value1, varNameleft, varNameright);
                Operation condition = new Operation(value1, value2, OperationType.LESS_EQUAL_THAN);
                Assignment increasing = new Assignment(varName, new Operation(new Operation(varName, OperationType.ID, varNameleft, varNameright), new Operation(1), OperationType.SUM), varNameleft, varNameright);
                RESULT = new For(declaration, assignment, condition, increasing, instructions);
             
              CUP$VParser$result = parser.getSymbolFactory().newSymbol("vb_for",14, ((java_cup.runtime.Symbol)CUP$VParser$stack.elementAt(CUP$VParser$top-9)), ((java_cup.runtime.Symbol)CUP$VParser$stack.peek()), RESULT);
            }
          return CUP$VParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 76: // vb_if ::= IF logical_op THEN vb_code_statements END IF 
            {
              Instruction RESULT =null;
		int conditionleft = ((java_cup.runtime.Symbol)CUP$VParser$stack.elementAt(CUP$VParser$top-4)).left;
		int conditionright = ((java_cup.runtime.Symbol)CUP$VParser$stack.elementAt(CUP$VParser$top-4)).right;
		Operation condition = (Operation)((java_cup.runtime.Symbol) CUP$VParser$stack.elementAt(CUP$VParser$top-4)).value;
		int instructionsleft = ((java_cup.runtime.Symbol)CUP$VParser$stack.elementAt(CUP$VParser$top-2)).left;
		int instructionsright = ((java_cup.runtime.Symbol)CUP$VParser$stack.elementAt(CUP$VParser$top-2)).right;
		LinkedList<Instruction> instructions = (LinkedList<Instruction>)((java_cup.runtime.Symbol) CUP$VParser$stack.elementAt(CUP$VParser$top-2)).value;
		 RESULT = new If(condition, instructions); 
              CUP$VParser$result = parser.getSymbolFactory().newSymbol("vb_if",15, ((java_cup.runtime.Symbol)CUP$VParser$stack.elementAt(CUP$VParser$top-5)), ((java_cup.runtime.Symbol)CUP$VParser$stack.peek()), RESULT);
            }
          return CUP$VParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 77: // vb_if ::= IF logical_op THEN vb_code_statements ELSE vb_code_statements END IF 
            {
              Instruction RESULT =null;
		int conditionleft = ((java_cup.runtime.Symbol)CUP$VParser$stack.elementAt(CUP$VParser$top-6)).left;
		int conditionright = ((java_cup.runtime.Symbol)CUP$VParser$stack.elementAt(CUP$VParser$top-6)).right;
		Operation condition = (Operation)((java_cup.runtime.Symbol) CUP$VParser$stack.elementAt(CUP$VParser$top-6)).value;
		int instructionsleft = ((java_cup.runtime.Symbol)CUP$VParser$stack.elementAt(CUP$VParser$top-4)).left;
		int instructionsright = ((java_cup.runtime.Symbol)CUP$VParser$stack.elementAt(CUP$VParser$top-4)).right;
		LinkedList<Instruction> instructions = (LinkedList<Instruction>)((java_cup.runtime.Symbol) CUP$VParser$stack.elementAt(CUP$VParser$top-4)).value;
		int elseInstructionsleft = ((java_cup.runtime.Symbol)CUP$VParser$stack.elementAt(CUP$VParser$top-2)).left;
		int elseInstructionsright = ((java_cup.runtime.Symbol)CUP$VParser$stack.elementAt(CUP$VParser$top-2)).right;
		LinkedList<Instruction> elseInstructions = (LinkedList<Instruction>)((java_cup.runtime.Symbol) CUP$VParser$stack.elementAt(CUP$VParser$top-2)).value;
		 RESULT = new If(condition, instructions, elseInstructions); 
              CUP$VParser$result = parser.getSymbolFactory().newSymbol("vb_if",15, ((java_cup.runtime.Symbol)CUP$VParser$stack.elementAt(CUP$VParser$top-7)), ((java_cup.runtime.Symbol)CUP$VParser$stack.peek()), RESULT);
            }
          return CUP$VParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 78: // vb_switch ::= SELECT CASE ID vb_switch_cases 
            {
              Instruction RESULT =null;
		int varNameleft = ((java_cup.runtime.Symbol)CUP$VParser$stack.elementAt(CUP$VParser$top-1)).left;
		int varNameright = ((java_cup.runtime.Symbol)CUP$VParser$stack.elementAt(CUP$VParser$top-1)).right;
		String varName = (String)((java_cup.runtime.Symbol) CUP$VParser$stack.elementAt(CUP$VParser$top-1)).value;
		int instructionsleft = ((java_cup.runtime.Symbol)CUP$VParser$stack.peek()).left;
		int instructionsright = ((java_cup.runtime.Symbol)CUP$VParser$stack.peek()).right;
		LinkedList<Case> instructions = (LinkedList<Case>)((java_cup.runtime.Symbol) CUP$VParser$stack.peek()).value;
		 RESULT = new Switch(new Operation(varName, OperationType.ID, varNameleft, varNameright), instructions); 
              CUP$VParser$result = parser.getSymbolFactory().newSymbol("vb_switch",17, ((java_cup.runtime.Symbol)CUP$VParser$stack.elementAt(CUP$VParser$top-3)), ((java_cup.runtime.Symbol)CUP$VParser$stack.peek()), RESULT);
            }
          return CUP$VParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 79: // vb_switch_cases ::= CASE vb_switch_data vb_code_statements vb_switch_cases 
            {
              LinkedList<Case> RESULT =null;
		int valueleft = ((java_cup.runtime.Symbol)CUP$VParser$stack.elementAt(CUP$VParser$top-2)).left;
		int valueright = ((java_cup.runtime.Symbol)CUP$VParser$stack.elementAt(CUP$VParser$top-2)).right;
		Operation value = (Operation)((java_cup.runtime.Symbol) CUP$VParser$stack.elementAt(CUP$VParser$top-2)).value;
		int instructionsleft = ((java_cup.runtime.Symbol)CUP$VParser$stack.elementAt(CUP$VParser$top-1)).left;
		int instructionsright = ((java_cup.runtime.Symbol)CUP$VParser$stack.elementAt(CUP$VParser$top-1)).right;
		LinkedList<Instruction> instructions = (LinkedList<Instruction>)((java_cup.runtime.Symbol) CUP$VParser$stack.elementAt(CUP$VParser$top-1)).value;
		int instructionsListleft = ((java_cup.runtime.Symbol)CUP$VParser$stack.peek()).left;
		int instructionsListright = ((java_cup.runtime.Symbol)CUP$VParser$stack.peek()).right;
		LinkedList<Case> instructionsList = (LinkedList<Case>)((java_cup.runtime.Symbol) CUP$VParser$stack.peek()).value;
		 instructionsList.addFirst(new Case(value, instructions, valueleft, valueright));  RESULT = instructionsList; 
              CUP$VParser$result = parser.getSymbolFactory().newSymbol("vb_switch_cases",76, ((java_cup.runtime.Symbol)CUP$VParser$stack.elementAt(CUP$VParser$top-3)), ((java_cup.runtime.Symbol)CUP$VParser$stack.peek()), RESULT);
            }
          return CUP$VParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 80: // vb_switch_cases ::= END SELECT 
            {
              LinkedList<Case> RESULT =null;
		 RESULT = new LinkedList<Case>(); 
              CUP$VParser$result = parser.getSymbolFactory().newSymbol("vb_switch_cases",76, ((java_cup.runtime.Symbol)CUP$VParser$stack.elementAt(CUP$VParser$top-1)), ((java_cup.runtime.Symbol)CUP$VParser$stack.peek()), RESULT);
            }
          return CUP$VParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 81: // vb_switch_cases ::= CASE ELSE vb_code_statements END SELECT 
            {
              LinkedList<Case> RESULT =null;
		int instructionsleft = ((java_cup.runtime.Symbol)CUP$VParser$stack.elementAt(CUP$VParser$top-2)).left;
		int instructionsright = ((java_cup.runtime.Symbol)CUP$VParser$stack.elementAt(CUP$VParser$top-2)).right;
		LinkedList<Instruction> instructions = (LinkedList<Instruction>)((java_cup.runtime.Symbol) CUP$VParser$stack.elementAt(CUP$VParser$top-2)).value;
		 RESULT = new LinkedList<Case>(); RESULT.add(new Case(instructions)); 
              CUP$VParser$result = parser.getSymbolFactory().newSymbol("vb_switch_cases",76, ((java_cup.runtime.Symbol)CUP$VParser$stack.elementAt(CUP$VParser$top-4)), ((java_cup.runtime.Symbol)CUP$VParser$stack.peek()), RESULT);
            }
          return CUP$VParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 82: // vb_switch_data ::= INTEGERNUM 
            {
              Operation RESULT =null;
		int valueleft = ((java_cup.runtime.Symbol)CUP$VParser$stack.peek()).left;
		int valueright = ((java_cup.runtime.Symbol)CUP$VParser$stack.peek()).right;
		Integer value = (Integer)((java_cup.runtime.Symbol) CUP$VParser$stack.peek()).value;
		 RESULT = new Operation(value); 
              CUP$VParser$result = parser.getSymbolFactory().newSymbol("vb_switch_data",44, ((java_cup.runtime.Symbol)CUP$VParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$VParser$stack.peek()), RESULT);
            }
          return CUP$VParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 83: // vb_switch_data ::= DOUBLENUM 
            {
              Operation RESULT =null;
		int valueleft = ((java_cup.runtime.Symbol)CUP$VParser$stack.peek()).left;
		int valueright = ((java_cup.runtime.Symbol)CUP$VParser$stack.peek()).right;
		Double value = (Double)((java_cup.runtime.Symbol) CUP$VParser$stack.peek()).value;
		 RESULT = new Operation(value); 
              CUP$VParser$result = parser.getSymbolFactory().newSymbol("vb_switch_data",44, ((java_cup.runtime.Symbol)CUP$VParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$VParser$stack.peek()), RESULT);
            }
          return CUP$VParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 84: // vb_switch_data ::= CHARACTER 
            {
              Operation RESULT =null;
		int valueleft = ((java_cup.runtime.Symbol)CUP$VParser$stack.peek()).left;
		int valueright = ((java_cup.runtime.Symbol)CUP$VParser$stack.peek()).right;
		char value = (char)((java_cup.runtime.Symbol) CUP$VParser$stack.peek()).value;
		 RESULT = new Operation(value); 
              CUP$VParser$result = parser.getSymbolFactory().newSymbol("vb_switch_data",44, ((java_cup.runtime.Symbol)CUP$VParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$VParser$stack.peek()), RESULT);
            }
          return CUP$VParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 85: // vb_screen_messages ::= CONSOLE FULLSTOP WRITE PARENTHESISO vb_message PARENTHESISC 
            {
              Instruction RESULT =null;
		int messageleft = ((java_cup.runtime.Symbol)CUP$VParser$stack.elementAt(CUP$VParser$top-1)).left;
		int messageright = ((java_cup.runtime.Symbol)CUP$VParser$stack.elementAt(CUP$VParser$top-1)).right;
		Operation message = (Operation)((java_cup.runtime.Symbol) CUP$VParser$stack.elementAt(CUP$VParser$top-1)).value;
		 RESULT = new Print(message, PrintType.PRINT); 
              CUP$VParser$result = parser.getSymbolFactory().newSymbol("vb_screen_messages",16, ((java_cup.runtime.Symbol)CUP$VParser$stack.elementAt(CUP$VParser$top-5)), ((java_cup.runtime.Symbol)CUP$VParser$stack.peek()), RESULT);
            }
          return CUP$VParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 86: // vb_screen_messages ::= CONSOLE FULLSTOP WRITELINE PARENTHESISO vb_message PARENTHESISC 
            {
              Instruction RESULT =null;
		int messageleft = ((java_cup.runtime.Symbol)CUP$VParser$stack.elementAt(CUP$VParser$top-1)).left;
		int messageright = ((java_cup.runtime.Symbol)CUP$VParser$stack.elementAt(CUP$VParser$top-1)).right;
		Operation message = (Operation)((java_cup.runtime.Symbol) CUP$VParser$stack.elementAt(CUP$VParser$top-1)).value;
		 RESULT = new Print(message, PrintType.PRINTLN); 
              CUP$VParser$result = parser.getSymbolFactory().newSymbol("vb_screen_messages",16, ((java_cup.runtime.Symbol)CUP$VParser$stack.elementAt(CUP$VParser$top-5)), ((java_cup.runtime.Symbol)CUP$VParser$stack.peek()), RESULT);
            }
          return CUP$VParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 87: // vb_message ::= LITERAL CONCAT vb_message 
            {
              Operation RESULT =null;
		int value1left = ((java_cup.runtime.Symbol)CUP$VParser$stack.elementAt(CUP$VParser$top-2)).left;
		int value1right = ((java_cup.runtime.Symbol)CUP$VParser$stack.elementAt(CUP$VParser$top-2)).right;
		String value1 = (String)((java_cup.runtime.Symbol) CUP$VParser$stack.elementAt(CUP$VParser$top-2)).value;
		int value2left = ((java_cup.runtime.Symbol)CUP$VParser$stack.peek()).left;
		int value2right = ((java_cup.runtime.Symbol)CUP$VParser$stack.peek()).right;
		Operation value2 = (Operation)((java_cup.runtime.Symbol) CUP$VParser$stack.peek()).value;
		 RESULT = new Operation(new Operation(value1, OperationType.LITERAL, value1left, value1right), value2, OperationType.CONCAT); 
              CUP$VParser$result = parser.getSymbolFactory().newSymbol("vb_message",45, ((java_cup.runtime.Symbol)CUP$VParser$stack.elementAt(CUP$VParser$top-2)), ((java_cup.runtime.Symbol)CUP$VParser$stack.peek()), RESULT);
            }
          return CUP$VParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 88: // vb_message ::= arithmetic_op CONCAT vb_message 
            {
              Operation RESULT =null;
		int value1left = ((java_cup.runtime.Symbol)CUP$VParser$stack.elementAt(CUP$VParser$top-2)).left;
		int value1right = ((java_cup.runtime.Symbol)CUP$VParser$stack.elementAt(CUP$VParser$top-2)).right;
		Operation value1 = (Operation)((java_cup.runtime.Symbol) CUP$VParser$stack.elementAt(CUP$VParser$top-2)).value;
		int value2left = ((java_cup.runtime.Symbol)CUP$VParser$stack.peek()).left;
		int value2right = ((java_cup.runtime.Symbol)CUP$VParser$stack.peek()).right;
		Operation value2 = (Operation)((java_cup.runtime.Symbol) CUP$VParser$stack.peek()).value;
		 RESULT = new Operation(value1, value2, OperationType.CONCAT); 
              CUP$VParser$result = parser.getSymbolFactory().newSymbol("vb_message",45, ((java_cup.runtime.Symbol)CUP$VParser$stack.elementAt(CUP$VParser$top-2)), ((java_cup.runtime.Symbol)CUP$VParser$stack.peek()), RESULT);
            }
          return CUP$VParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 89: // vb_message ::= LITERAL 
            {
              Operation RESULT =null;
		int valueleft = ((java_cup.runtime.Symbol)CUP$VParser$stack.peek()).left;
		int valueright = ((java_cup.runtime.Symbol)CUP$VParser$stack.peek()).right;
		String value = (String)((java_cup.runtime.Symbol) CUP$VParser$stack.peek()).value;
		 RESULT = new Operation(value, OperationType.LITERAL, valueleft, valueright); 
              CUP$VParser$result = parser.getSymbolFactory().newSymbol("vb_message",45, ((java_cup.runtime.Symbol)CUP$VParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$VParser$stack.peek()), RESULT);
            }
          return CUP$VParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 90: // vb_message ::= arithmetic_op 
            {
              Operation RESULT =null;
		int valueleft = ((java_cup.runtime.Symbol)CUP$VParser$stack.peek()).left;
		int valueright = ((java_cup.runtime.Symbol)CUP$VParser$stack.peek()).right;
		Operation value = (Operation)((java_cup.runtime.Symbol) CUP$VParser$stack.peek()).value;
		 RESULT = value; 
              CUP$VParser$result = parser.getSymbolFactory().newSymbol("vb_message",45, ((java_cup.runtime.Symbol)CUP$VParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$VParser$stack.peek()), RESULT);
            }
          return CUP$VParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 91: // vb_data_request ::= INTINPUT PARENTHESISO vb_request_message PARENTHESISC 
            {
              Instruction RESULT =null;
		int messageleft = ((java_cup.runtime.Symbol)CUP$VParser$stack.elementAt(CUP$VParser$top-1)).left;
		int messageright = ((java_cup.runtime.Symbol)CUP$VParser$stack.elementAt(CUP$VParser$top-1)).right;
		Operation message = (Operation)((java_cup.runtime.Symbol) CUP$VParser$stack.elementAt(CUP$VParser$top-1)).value;
		 RESULT = new Input(Type.INT, new Print(message, PrintType.PRINT)); 
              CUP$VParser$result = parser.getSymbolFactory().newSymbol("vb_data_request",18, ((java_cup.runtime.Symbol)CUP$VParser$stack.elementAt(CUP$VParser$top-3)), ((java_cup.runtime.Symbol)CUP$VParser$stack.peek()), RESULT);
            }
          return CUP$VParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 92: // vb_data_request ::= FLOATINPUT PARENTHESISO vb_request_message PARENTHESISC 
            {
              Instruction RESULT =null;
		int messageleft = ((java_cup.runtime.Symbol)CUP$VParser$stack.elementAt(CUP$VParser$top-1)).left;
		int messageright = ((java_cup.runtime.Symbol)CUP$VParser$stack.elementAt(CUP$VParser$top-1)).right;
		Operation message = (Operation)((java_cup.runtime.Symbol) CUP$VParser$stack.elementAt(CUP$VParser$top-1)).value;
		 RESULT = new Input(Type.FLOAT, new Print(message, PrintType.PRINT)); 
              CUP$VParser$result = parser.getSymbolFactory().newSymbol("vb_data_request",18, ((java_cup.runtime.Symbol)CUP$VParser$stack.elementAt(CUP$VParser$top-3)), ((java_cup.runtime.Symbol)CUP$VParser$stack.peek()), RESULT);
            }
          return CUP$VParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 93: // vb_data_request ::= CHARINPUT PARENTHESISO vb_request_message PARENTHESISC 
            {
              Instruction RESULT =null;
		int messageleft = ((java_cup.runtime.Symbol)CUP$VParser$stack.elementAt(CUP$VParser$top-1)).left;
		int messageright = ((java_cup.runtime.Symbol)CUP$VParser$stack.elementAt(CUP$VParser$top-1)).right;
		Operation message = (Operation)((java_cup.runtime.Symbol) CUP$VParser$stack.elementAt(CUP$VParser$top-1)).value;
		 RESULT = new Input(Type.CHAR, new Print(message, PrintType.PRINT)); 
              CUP$VParser$result = parser.getSymbolFactory().newSymbol("vb_data_request",18, ((java_cup.runtime.Symbol)CUP$VParser$stack.elementAt(CUP$VParser$top-3)), ((java_cup.runtime.Symbol)CUP$VParser$stack.peek()), RESULT);
            }
          return CUP$VParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 94: // vb_data_request ::= INTINPUT 
            {
              Instruction RESULT =null;
		 RESULT = new Input(Type.INT); 
              CUP$VParser$result = parser.getSymbolFactory().newSymbol("vb_data_request",18, ((java_cup.runtime.Symbol)CUP$VParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$VParser$stack.peek()), RESULT);
            }
          return CUP$VParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 95: // vb_data_request ::= FLOATINPUT 
            {
              Instruction RESULT =null;
		 RESULT = new Input(Type.FLOAT); 
              CUP$VParser$result = parser.getSymbolFactory().newSymbol("vb_data_request",18, ((java_cup.runtime.Symbol)CUP$VParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$VParser$stack.peek()), RESULT);
            }
          return CUP$VParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 96: // vb_data_request ::= CHARINPUT 
            {
              Instruction RESULT =null;
		 RESULT = new Input(Type.CHAR); 
              CUP$VParser$result = parser.getSymbolFactory().newSymbol("vb_data_request",18, ((java_cup.runtime.Symbol)CUP$VParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$VParser$stack.peek()), RESULT);
            }
          return CUP$VParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 97: // vb_request_message ::= LITERAL 
            {
              Operation RESULT =null;
		int valueleft = ((java_cup.runtime.Symbol)CUP$VParser$stack.peek()).left;
		int valueright = ((java_cup.runtime.Symbol)CUP$VParser$stack.peek()).right;
		String value = (String)((java_cup.runtime.Symbol) CUP$VParser$stack.peek()).value;
		 RESULT = new Operation(value, OperationType.LITERAL, valueleft, valueright); 
              CUP$VParser$result = parser.getSymbolFactory().newSymbol("vb_request_message",46, ((java_cup.runtime.Symbol)CUP$VParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$VParser$stack.peek()), RESULT);
            }
          return CUP$VParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 98: // vb_request_message ::= CHARACTER 
            {
              Operation RESULT =null;
		int valueleft = ((java_cup.runtime.Symbol)CUP$VParser$stack.peek()).left;
		int valueright = ((java_cup.runtime.Symbol)CUP$VParser$stack.peek()).right;
		char value = (char)((java_cup.runtime.Symbol) CUP$VParser$stack.peek()).value;
		 RESULT = new Operation(String.valueOf(value), OperationType.LITERAL, valueleft, valueright); 
              CUP$VParser$result = parser.getSymbolFactory().newSymbol("vb_request_message",46, ((java_cup.runtime.Symbol)CUP$VParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$VParser$stack.peek()), RESULT);
            }
          return CUP$VParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 99: // java_code ::= java_class java_code 
            {
              LinkedList<Instruction> RESULT =null;
		int instructionleft = ((java_cup.runtime.Symbol)CUP$VParser$stack.elementAt(CUP$VParser$top-1)).left;
		int instructionright = ((java_cup.runtime.Symbol)CUP$VParser$stack.elementAt(CUP$VParser$top-1)).right;
		Instruction instruction = (Instruction)((java_cup.runtime.Symbol) CUP$VParser$stack.elementAt(CUP$VParser$top-1)).value;
		int instructionsListleft = ((java_cup.runtime.Symbol)CUP$VParser$stack.peek()).left;
		int instructionsListright = ((java_cup.runtime.Symbol)CUP$VParser$stack.peek()).right;
		LinkedList<Instruction> instructionsList = (LinkedList<Instruction>)((java_cup.runtime.Symbol) CUP$VParser$stack.peek()).value;
		 instructionsList.addFirst(instruction); RESULT = instructionsList; 
              CUP$VParser$result = parser.getSymbolFactory().newSymbol("java_code",66, ((java_cup.runtime.Symbol)CUP$VParser$stack.elementAt(CUP$VParser$top-1)), ((java_cup.runtime.Symbol)CUP$VParser$stack.peek()), RESULT);
            }
          return CUP$VParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 100: // java_code ::= 
            {
              LinkedList<Instruction> RESULT =null;
		 RESULT = new LinkedList<Instruction>(); 
              CUP$VParser$result = parser.getSymbolFactory().newSymbol("java_code",66, ((java_cup.runtime.Symbol)CUP$VParser$stack.peek()), RESULT);
            }
          return CUP$VParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 101: // java_class ::= PUBLIC CLASS ID CURLYBRACKETO java_class_statements CURLYBRACKETC 
            {
              Instruction RESULT =null;
		int idleft = ((java_cup.runtime.Symbol)CUP$VParser$stack.elementAt(CUP$VParser$top-3)).left;
		int idright = ((java_cup.runtime.Symbol)CUP$VParser$stack.elementAt(CUP$VParser$top-3)).right;
		String id = (String)((java_cup.runtime.Symbol) CUP$VParser$stack.elementAt(CUP$VParser$top-3)).value;
		int instructionsleft = ((java_cup.runtime.Symbol)CUP$VParser$stack.elementAt(CUP$VParser$top-1)).left;
		int instructionsright = ((java_cup.runtime.Symbol)CUP$VParser$stack.elementAt(CUP$VParser$top-1)).right;
		LinkedList<Instruction> instructions = (LinkedList<Instruction>)((java_cup.runtime.Symbol) CUP$VParser$stack.elementAt(CUP$VParser$top-1)).value;
		 RESULT = new JavaClass(AccessModifier.PUBLIC, id, instructions); 
              CUP$VParser$result = parser.getSymbolFactory().newSymbol("java_class",26, ((java_cup.runtime.Symbol)CUP$VParser$stack.elementAt(CUP$VParser$top-5)), ((java_cup.runtime.Symbol)CUP$VParser$stack.peek()), RESULT);
            }
          return CUP$VParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 102: // java_class_statements ::= java_method java_class_statements 
            {
              LinkedList<Instruction> RESULT =null;
		int instructionleft = ((java_cup.runtime.Symbol)CUP$VParser$stack.elementAt(CUP$VParser$top-1)).left;
		int instructionright = ((java_cup.runtime.Symbol)CUP$VParser$stack.elementAt(CUP$VParser$top-1)).right;
		Instruction instruction = (Instruction)((java_cup.runtime.Symbol) CUP$VParser$stack.elementAt(CUP$VParser$top-1)).value;
		int instructionsListleft = ((java_cup.runtime.Symbol)CUP$VParser$stack.peek()).left;
		int instructionsListright = ((java_cup.runtime.Symbol)CUP$VParser$stack.peek()).right;
		LinkedList<Instruction> instructionsList = (LinkedList<Instruction>)((java_cup.runtime.Symbol) CUP$VParser$stack.peek()).value;
		 instructionsList.addFirst(instruction); RESULT = instructionsList; 
              CUP$VParser$result = parser.getSymbolFactory().newSymbol("java_class_statements",67, ((java_cup.runtime.Symbol)CUP$VParser$stack.elementAt(CUP$VParser$top-1)), ((java_cup.runtime.Symbol)CUP$VParser$stack.peek()), RESULT);
            }
          return CUP$VParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 103: // java_class_statements ::= java_declaration java_class_statements 
            {
              LinkedList<Instruction> RESULT =null;
		int instructionsleft = ((java_cup.runtime.Symbol)CUP$VParser$stack.elementAt(CUP$VParser$top-1)).left;
		int instructionsright = ((java_cup.runtime.Symbol)CUP$VParser$stack.elementAt(CUP$VParser$top-1)).right;
		LinkedList<Instruction> instructions = (LinkedList<Instruction>)((java_cup.runtime.Symbol) CUP$VParser$stack.elementAt(CUP$VParser$top-1)).value;
		int instructionsListleft = ((java_cup.runtime.Symbol)CUP$VParser$stack.peek()).left;
		int instructionsListright = ((java_cup.runtime.Symbol)CUP$VParser$stack.peek()).right;
		LinkedList<Instruction> instructionsList = (LinkedList<Instruction>)((java_cup.runtime.Symbol) CUP$VParser$stack.peek()).value;
		 instructionsList.addAll(0, instructions); RESULT = instructionsList; 
              CUP$VParser$result = parser.getSymbolFactory().newSymbol("java_class_statements",67, ((java_cup.runtime.Symbol)CUP$VParser$stack.elementAt(CUP$VParser$top-1)), ((java_cup.runtime.Symbol)CUP$VParser$stack.peek()), RESULT);
            }
          return CUP$VParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 104: // java_class_statements ::= java_declaration_assignment java_class_statements 
            {
              LinkedList<Instruction> RESULT =null;
		int instructionsleft = ((java_cup.runtime.Symbol)CUP$VParser$stack.elementAt(CUP$VParser$top-1)).left;
		int instructionsright = ((java_cup.runtime.Symbol)CUP$VParser$stack.elementAt(CUP$VParser$top-1)).right;
		LinkedList<Instruction> instructions = (LinkedList<Instruction>)((java_cup.runtime.Symbol) CUP$VParser$stack.elementAt(CUP$VParser$top-1)).value;
		int instructionsListleft = ((java_cup.runtime.Symbol)CUP$VParser$stack.peek()).left;
		int instructionsListright = ((java_cup.runtime.Symbol)CUP$VParser$stack.peek()).right;
		LinkedList<Instruction> instructionsList = (LinkedList<Instruction>)((java_cup.runtime.Symbol) CUP$VParser$stack.peek()).value;
		 instructionsList.addAll(0, instructions); RESULT = instructionsList; 
              CUP$VParser$result = parser.getSymbolFactory().newSymbol("java_class_statements",67, ((java_cup.runtime.Symbol)CUP$VParser$stack.elementAt(CUP$VParser$top-1)), ((java_cup.runtime.Symbol)CUP$VParser$stack.peek()), RESULT);
            }
          return CUP$VParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 105: // java_class_statements ::= java_assignment java_class_statements 
            {
              LinkedList<Instruction> RESULT =null;
		int instructionleft = ((java_cup.runtime.Symbol)CUP$VParser$stack.elementAt(CUP$VParser$top-1)).left;
		int instructionright = ((java_cup.runtime.Symbol)CUP$VParser$stack.elementAt(CUP$VParser$top-1)).right;
		Instruction instruction = (Instruction)((java_cup.runtime.Symbol) CUP$VParser$stack.elementAt(CUP$VParser$top-1)).value;
		int instructionsListleft = ((java_cup.runtime.Symbol)CUP$VParser$stack.peek()).left;
		int instructionsListright = ((java_cup.runtime.Symbol)CUP$VParser$stack.peek()).right;
		LinkedList<Instruction> instructionsList = (LinkedList<Instruction>)((java_cup.runtime.Symbol) CUP$VParser$stack.peek()).value;
		 instructionsList.addFirst(instruction); RESULT = instructionsList; 
              CUP$VParser$result = parser.getSymbolFactory().newSymbol("java_class_statements",67, ((java_cup.runtime.Symbol)CUP$VParser$stack.elementAt(CUP$VParser$top-1)), ((java_cup.runtime.Symbol)CUP$VParser$stack.peek()), RESULT);
            }
          return CUP$VParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 106: // java_class_statements ::= 
            {
              LinkedList<Instruction> RESULT =null;
		 RESULT = new LinkedList<Instruction>(); 
              CUP$VParser$result = parser.getSymbolFactory().newSymbol("java_class_statements",67, ((java_cup.runtime.Symbol)CUP$VParser$stack.peek()), RESULT);
            }
          return CUP$VParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 107: // java_code_statements ::= java_declaration java_code_statements 
            {
              LinkedList<Instruction> RESULT =null;
		int instructionsleft = ((java_cup.runtime.Symbol)CUP$VParser$stack.elementAt(CUP$VParser$top-1)).left;
		int instructionsright = ((java_cup.runtime.Symbol)CUP$VParser$stack.elementAt(CUP$VParser$top-1)).right;
		LinkedList<Instruction> instructions = (LinkedList<Instruction>)((java_cup.runtime.Symbol) CUP$VParser$stack.elementAt(CUP$VParser$top-1)).value;
		int instructionsListleft = ((java_cup.runtime.Symbol)CUP$VParser$stack.peek()).left;
		int instructionsListright = ((java_cup.runtime.Symbol)CUP$VParser$stack.peek()).right;
		LinkedList<Instruction> instructionsList = (LinkedList<Instruction>)((java_cup.runtime.Symbol) CUP$VParser$stack.peek()).value;
		 instructionsList.addAll(0, instructions); RESULT = instructionsList; 
              CUP$VParser$result = parser.getSymbolFactory().newSymbol("java_code_statements",70, ((java_cup.runtime.Symbol)CUP$VParser$stack.elementAt(CUP$VParser$top-1)), ((java_cup.runtime.Symbol)CUP$VParser$stack.peek()), RESULT);
            }
          return CUP$VParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 108: // java_code_statements ::= java_declaration_assignment java_code_statements 
            {
              LinkedList<Instruction> RESULT =null;
		int instructionsleft = ((java_cup.runtime.Symbol)CUP$VParser$stack.elementAt(CUP$VParser$top-1)).left;
		int instructionsright = ((java_cup.runtime.Symbol)CUP$VParser$stack.elementAt(CUP$VParser$top-1)).right;
		LinkedList<Instruction> instructions = (LinkedList<Instruction>)((java_cup.runtime.Symbol) CUP$VParser$stack.elementAt(CUP$VParser$top-1)).value;
		int instructionsListleft = ((java_cup.runtime.Symbol)CUP$VParser$stack.peek()).left;
		int instructionsListright = ((java_cup.runtime.Symbol)CUP$VParser$stack.peek()).right;
		LinkedList<Instruction> instructionsList = (LinkedList<Instruction>)((java_cup.runtime.Symbol) CUP$VParser$stack.peek()).value;
		 instructionsList.addAll(0, instructions); RESULT = instructionsList; 
              CUP$VParser$result = parser.getSymbolFactory().newSymbol("java_code_statements",70, ((java_cup.runtime.Symbol)CUP$VParser$stack.elementAt(CUP$VParser$top-1)), ((java_cup.runtime.Symbol)CUP$VParser$stack.peek()), RESULT);
            }
          return CUP$VParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 109: // java_code_statements ::= java_assignment java_code_statements 
            {
              LinkedList<Instruction> RESULT =null;
		int instructionleft = ((java_cup.runtime.Symbol)CUP$VParser$stack.elementAt(CUP$VParser$top-1)).left;
		int instructionright = ((java_cup.runtime.Symbol)CUP$VParser$stack.elementAt(CUP$VParser$top-1)).right;
		Instruction instruction = (Instruction)((java_cup.runtime.Symbol) CUP$VParser$stack.elementAt(CUP$VParser$top-1)).value;
		int instructionsListleft = ((java_cup.runtime.Symbol)CUP$VParser$stack.peek()).left;
		int instructionsListright = ((java_cup.runtime.Symbol)CUP$VParser$stack.peek()).right;
		LinkedList<Instruction> instructionsList = (LinkedList<Instruction>)((java_cup.runtime.Symbol) CUP$VParser$stack.peek()).value;
		 instructionsList.addFirst(instruction); RESULT = instructionsList; 
              CUP$VParser$result = parser.getSymbolFactory().newSymbol("java_code_statements",70, ((java_cup.runtime.Symbol)CUP$VParser$stack.elementAt(CUP$VParser$top-1)), ((java_cup.runtime.Symbol)CUP$VParser$stack.peek()), RESULT);
            }
          return CUP$VParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 110: // java_code_statements ::= java_while java_code_statements 
            {
              LinkedList<Instruction> RESULT =null;
		int instructionleft = ((java_cup.runtime.Symbol)CUP$VParser$stack.elementAt(CUP$VParser$top-1)).left;
		int instructionright = ((java_cup.runtime.Symbol)CUP$VParser$stack.elementAt(CUP$VParser$top-1)).right;
		Instruction instruction = (Instruction)((java_cup.runtime.Symbol) CUP$VParser$stack.elementAt(CUP$VParser$top-1)).value;
		int instructionsListleft = ((java_cup.runtime.Symbol)CUP$VParser$stack.peek()).left;
		int instructionsListright = ((java_cup.runtime.Symbol)CUP$VParser$stack.peek()).right;
		LinkedList<Instruction> instructionsList = (LinkedList<Instruction>)((java_cup.runtime.Symbol) CUP$VParser$stack.peek()).value;
		 instructionsList.addFirst(instruction); RESULT = instructionsList; 
              CUP$VParser$result = parser.getSymbolFactory().newSymbol("java_code_statements",70, ((java_cup.runtime.Symbol)CUP$VParser$stack.elementAt(CUP$VParser$top-1)), ((java_cup.runtime.Symbol)CUP$VParser$stack.peek()), RESULT);
            }
          return CUP$VParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 111: // java_code_statements ::= java_do_while java_code_statements 
            {
              LinkedList<Instruction> RESULT =null;
		int instructionleft = ((java_cup.runtime.Symbol)CUP$VParser$stack.elementAt(CUP$VParser$top-1)).left;
		int instructionright = ((java_cup.runtime.Symbol)CUP$VParser$stack.elementAt(CUP$VParser$top-1)).right;
		Instruction instruction = (Instruction)((java_cup.runtime.Symbol) CUP$VParser$stack.elementAt(CUP$VParser$top-1)).value;
		int instructionsListleft = ((java_cup.runtime.Symbol)CUP$VParser$stack.peek()).left;
		int instructionsListright = ((java_cup.runtime.Symbol)CUP$VParser$stack.peek()).right;
		LinkedList<Instruction> instructionsList = (LinkedList<Instruction>)((java_cup.runtime.Symbol) CUP$VParser$stack.peek()).value;
		 instructionsList.addFirst(instruction); RESULT = instructionsList; 
              CUP$VParser$result = parser.getSymbolFactory().newSymbol("java_code_statements",70, ((java_cup.runtime.Symbol)CUP$VParser$stack.elementAt(CUP$VParser$top-1)), ((java_cup.runtime.Symbol)CUP$VParser$stack.peek()), RESULT);
            }
          return CUP$VParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 112: // java_code_statements ::= java_for java_code_statements 
            {
              LinkedList<Instruction> RESULT =null;
		int instructionleft = ((java_cup.runtime.Symbol)CUP$VParser$stack.elementAt(CUP$VParser$top-1)).left;
		int instructionright = ((java_cup.runtime.Symbol)CUP$VParser$stack.elementAt(CUP$VParser$top-1)).right;
		Instruction instruction = (Instruction)((java_cup.runtime.Symbol) CUP$VParser$stack.elementAt(CUP$VParser$top-1)).value;
		int instructionsListleft = ((java_cup.runtime.Symbol)CUP$VParser$stack.peek()).left;
		int instructionsListright = ((java_cup.runtime.Symbol)CUP$VParser$stack.peek()).right;
		LinkedList<Instruction> instructionsList = (LinkedList<Instruction>)((java_cup.runtime.Symbol) CUP$VParser$stack.peek()).value;
		 instructionsList.addFirst(instruction); RESULT = instructionsList; 
              CUP$VParser$result = parser.getSymbolFactory().newSymbol("java_code_statements",70, ((java_cup.runtime.Symbol)CUP$VParser$stack.elementAt(CUP$VParser$top-1)), ((java_cup.runtime.Symbol)CUP$VParser$stack.peek()), RESULT);
            }
          return CUP$VParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 113: // java_code_statements ::= java_if java_code_statements 
            {
              LinkedList<Instruction> RESULT =null;
		int instructionleft = ((java_cup.runtime.Symbol)CUP$VParser$stack.elementAt(CUP$VParser$top-1)).left;
		int instructionright = ((java_cup.runtime.Symbol)CUP$VParser$stack.elementAt(CUP$VParser$top-1)).right;
		Instruction instruction = (Instruction)((java_cup.runtime.Symbol) CUP$VParser$stack.elementAt(CUP$VParser$top-1)).value;
		int instructionsListleft = ((java_cup.runtime.Symbol)CUP$VParser$stack.peek()).left;
		int instructionsListright = ((java_cup.runtime.Symbol)CUP$VParser$stack.peek()).right;
		LinkedList<Instruction> instructionsList = (LinkedList<Instruction>)((java_cup.runtime.Symbol) CUP$VParser$stack.peek()).value;
		 instructionsList.addFirst(instruction); RESULT = instructionsList; 
              CUP$VParser$result = parser.getSymbolFactory().newSymbol("java_code_statements",70, ((java_cup.runtime.Symbol)CUP$VParser$stack.elementAt(CUP$VParser$top-1)), ((java_cup.runtime.Symbol)CUP$VParser$stack.peek()), RESULT);
            }
          return CUP$VParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 114: // java_code_statements ::= java_screen_messages java_code_statements 
            {
              LinkedList<Instruction> RESULT =null;
		int instructionleft = ((java_cup.runtime.Symbol)CUP$VParser$stack.elementAt(CUP$VParser$top-1)).left;
		int instructionright = ((java_cup.runtime.Symbol)CUP$VParser$stack.elementAt(CUP$VParser$top-1)).right;
		Instruction instruction = (Instruction)((java_cup.runtime.Symbol) CUP$VParser$stack.elementAt(CUP$VParser$top-1)).value;
		int instructionsListleft = ((java_cup.runtime.Symbol)CUP$VParser$stack.peek()).left;
		int instructionsListright = ((java_cup.runtime.Symbol)CUP$VParser$stack.peek()).right;
		LinkedList<Instruction> instructionsList = (LinkedList<Instruction>)((java_cup.runtime.Symbol) CUP$VParser$stack.peek()).value;
		 instructionsList.addFirst(instruction); RESULT = instructionsList; 
              CUP$VParser$result = parser.getSymbolFactory().newSymbol("java_code_statements",70, ((java_cup.runtime.Symbol)CUP$VParser$stack.elementAt(CUP$VParser$top-1)), ((java_cup.runtime.Symbol)CUP$VParser$stack.peek()), RESULT);
            }
          return CUP$VParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 115: // java_code_statements ::= java_switch java_code_statements 
            {
              LinkedList<Instruction> RESULT =null;
		int instructionleft = ((java_cup.runtime.Symbol)CUP$VParser$stack.elementAt(CUP$VParser$top-1)).left;
		int instructionright = ((java_cup.runtime.Symbol)CUP$VParser$stack.elementAt(CUP$VParser$top-1)).right;
		Instruction instruction = (Instruction)((java_cup.runtime.Symbol) CUP$VParser$stack.elementAt(CUP$VParser$top-1)).value;
		int instructionsListleft = ((java_cup.runtime.Symbol)CUP$VParser$stack.peek()).left;
		int instructionsListright = ((java_cup.runtime.Symbol)CUP$VParser$stack.peek()).right;
		LinkedList<Instruction> instructionsList = (LinkedList<Instruction>)((java_cup.runtime.Symbol) CUP$VParser$stack.peek()).value;
		 instructionsList.addFirst(instruction); RESULT = instructionsList; 
              CUP$VParser$result = parser.getSymbolFactory().newSymbol("java_code_statements",70, ((java_cup.runtime.Symbol)CUP$VParser$stack.elementAt(CUP$VParser$top-1)), ((java_cup.runtime.Symbol)CUP$VParser$stack.peek()), RESULT);
            }
          return CUP$VParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 116: // java_code_statements ::= java_data_request java_code_statements 
            {
              LinkedList<Instruction> RESULT =null;
		int instructionleft = ((java_cup.runtime.Symbol)CUP$VParser$stack.elementAt(CUP$VParser$top-1)).left;
		int instructionright = ((java_cup.runtime.Symbol)CUP$VParser$stack.elementAt(CUP$VParser$top-1)).right;
		Instruction instruction = (Instruction)((java_cup.runtime.Symbol) CUP$VParser$stack.elementAt(CUP$VParser$top-1)).value;
		int instructionsListleft = ((java_cup.runtime.Symbol)CUP$VParser$stack.peek()).left;
		int instructionsListright = ((java_cup.runtime.Symbol)CUP$VParser$stack.peek()).right;
		LinkedList<Instruction> instructionsList = (LinkedList<Instruction>)((java_cup.runtime.Symbol) CUP$VParser$stack.peek()).value;
		 instructionsList.addFirst(instruction); RESULT = instructionsList; 
              CUP$VParser$result = parser.getSymbolFactory().newSymbol("java_code_statements",70, ((java_cup.runtime.Symbol)CUP$VParser$stack.elementAt(CUP$VParser$top-1)), ((java_cup.runtime.Symbol)CUP$VParser$stack.peek()), RESULT);
            }
          return CUP$VParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 117: // java_code_statements ::= RETURN arithmetic_op SEMICOLON java_code_statements 
            {
              LinkedList<Instruction> RESULT =null;
		int instructionleft = ((java_cup.runtime.Symbol)CUP$VParser$stack.elementAt(CUP$VParser$top-2)).left;
		int instructionright = ((java_cup.runtime.Symbol)CUP$VParser$stack.elementAt(CUP$VParser$top-2)).right;
		Operation instruction = (Operation)((java_cup.runtime.Symbol) CUP$VParser$stack.elementAt(CUP$VParser$top-2)).value;
		int instructionsListleft = ((java_cup.runtime.Symbol)CUP$VParser$stack.peek()).left;
		int instructionsListright = ((java_cup.runtime.Symbol)CUP$VParser$stack.peek()).right;
		LinkedList<Instruction> instructionsList = (LinkedList<Instruction>)((java_cup.runtime.Symbol) CUP$VParser$stack.peek()).value;
		 instructionsList.addFirst(new Return(instruction)); RESULT = instructionsList; 
              CUP$VParser$result = parser.getSymbolFactory().newSymbol("java_code_statements",70, ((java_cup.runtime.Symbol)CUP$VParser$stack.elementAt(CUP$VParser$top-3)), ((java_cup.runtime.Symbol)CUP$VParser$stack.peek()), RESULT);
            }
          return CUP$VParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 118: // java_code_statements ::= 
            {
              LinkedList<Instruction> RESULT =null;
		 RESULT = new LinkedList<Instruction>(); 
              CUP$VParser$result = parser.getSymbolFactory().newSymbol("java_code_statements",70, ((java_cup.runtime.Symbol)CUP$VParser$stack.peek()), RESULT);
            }
          return CUP$VParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 119: // java_method ::= PUBLIC java_method_type ID PARENTHESISO java_params PARENTHESISC CURLYBRACKETO java_code_statements CURLYBRACKETC 
            {
              Instruction RESULT =null;
		int returnTypeleft = ((java_cup.runtime.Symbol)CUP$VParser$stack.elementAt(CUP$VParser$top-7)).left;
		int returnTyperight = ((java_cup.runtime.Symbol)CUP$VParser$stack.elementAt(CUP$VParser$top-7)).right;
		Type returnType = (Type)((java_cup.runtime.Symbol) CUP$VParser$stack.elementAt(CUP$VParser$top-7)).value;
		int nameleft = ((java_cup.runtime.Symbol)CUP$VParser$stack.elementAt(CUP$VParser$top-6)).left;
		int nameright = ((java_cup.runtime.Symbol)CUP$VParser$stack.elementAt(CUP$VParser$top-6)).right;
		String name = (String)((java_cup.runtime.Symbol) CUP$VParser$stack.elementAt(CUP$VParser$top-6)).value;
		int paramsleft = ((java_cup.runtime.Symbol)CUP$VParser$stack.elementAt(CUP$VParser$top-4)).left;
		int paramsright = ((java_cup.runtime.Symbol)CUP$VParser$stack.elementAt(CUP$VParser$top-4)).right;
		LinkedList<Declaration> params = (LinkedList<Declaration>)((java_cup.runtime.Symbol) CUP$VParser$stack.elementAt(CUP$VParser$top-4)).value;
		int instructionsListleft = ((java_cup.runtime.Symbol)CUP$VParser$stack.elementAt(CUP$VParser$top-1)).left;
		int instructionsListright = ((java_cup.runtime.Symbol)CUP$VParser$stack.elementAt(CUP$VParser$top-1)).right;
		LinkedList<Instruction> instructionsList = (LinkedList<Instruction>)((java_cup.runtime.Symbol) CUP$VParser$stack.elementAt(CUP$VParser$top-1)).value;
		 RESULT = new Method(AccessModifier.PUBLIC, returnType, name, params, instructionsList, nameleft, nameright); 
              CUP$VParser$result = parser.getSymbolFactory().newSymbol("java_method",29, ((java_cup.runtime.Symbol)CUP$VParser$stack.elementAt(CUP$VParser$top-8)), ((java_cup.runtime.Symbol)CUP$VParser$stack.peek()), RESULT);
            }
          return CUP$VParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 120: // java_method ::= PUBLIC java_method_type ID PARENTHESISO PARENTHESISC CURLYBRACKETO java_code_statements CURLYBRACKETC 
            {
              Instruction RESULT =null;
		int returnTypeleft = ((java_cup.runtime.Symbol)CUP$VParser$stack.elementAt(CUP$VParser$top-6)).left;
		int returnTyperight = ((java_cup.runtime.Symbol)CUP$VParser$stack.elementAt(CUP$VParser$top-6)).right;
		Type returnType = (Type)((java_cup.runtime.Symbol) CUP$VParser$stack.elementAt(CUP$VParser$top-6)).value;
		int nameleft = ((java_cup.runtime.Symbol)CUP$VParser$stack.elementAt(CUP$VParser$top-5)).left;
		int nameright = ((java_cup.runtime.Symbol)CUP$VParser$stack.elementAt(CUP$VParser$top-5)).right;
		String name = (String)((java_cup.runtime.Symbol) CUP$VParser$stack.elementAt(CUP$VParser$top-5)).value;
		int instructionsListleft = ((java_cup.runtime.Symbol)CUP$VParser$stack.elementAt(CUP$VParser$top-1)).left;
		int instructionsListright = ((java_cup.runtime.Symbol)CUP$VParser$stack.elementAt(CUP$VParser$top-1)).right;
		LinkedList<Instruction> instructionsList = (LinkedList<Instruction>)((java_cup.runtime.Symbol) CUP$VParser$stack.elementAt(CUP$VParser$top-1)).value;
		 RESULT = new Method(AccessModifier.PUBLIC, returnType, name, instructionsList, nameleft, nameright); 
              CUP$VParser$result = parser.getSymbolFactory().newSymbol("java_method",29, ((java_cup.runtime.Symbol)CUP$VParser$stack.elementAt(CUP$VParser$top-7)), ((java_cup.runtime.Symbol)CUP$VParser$stack.peek()), RESULT);
            }
          return CUP$VParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 121: // java_params ::= java_data_type ID COMMA java_params 
            {
              LinkedList<Declaration> RESULT =null;
		int dataTypeleft = ((java_cup.runtime.Symbol)CUP$VParser$stack.elementAt(CUP$VParser$top-3)).left;
		int dataTyperight = ((java_cup.runtime.Symbol)CUP$VParser$stack.elementAt(CUP$VParser$top-3)).right;
		Type dataType = (Type)((java_cup.runtime.Symbol) CUP$VParser$stack.elementAt(CUP$VParser$top-3)).value;
		int paramNameleft = ((java_cup.runtime.Symbol)CUP$VParser$stack.elementAt(CUP$VParser$top-2)).left;
		int paramNameright = ((java_cup.runtime.Symbol)CUP$VParser$stack.elementAt(CUP$VParser$top-2)).right;
		String paramName = (String)((java_cup.runtime.Symbol) CUP$VParser$stack.elementAt(CUP$VParser$top-2)).value;
		int paramsListleft = ((java_cup.runtime.Symbol)CUP$VParser$stack.peek()).left;
		int paramsListright = ((java_cup.runtime.Symbol)CUP$VParser$stack.peek()).right;
		LinkedList<Declaration> paramsList = (LinkedList<Declaration>)((java_cup.runtime.Symbol) CUP$VParser$stack.peek()).value;
		 paramsList.addFirst(new Declaration(paramName, dataType, Role.PARAM, paramNameleft, paramNameright)); RESULT = paramsList; 
              CUP$VParser$result = parser.getSymbolFactory().newSymbol("java_params",72, ((java_cup.runtime.Symbol)CUP$VParser$stack.elementAt(CUP$VParser$top-3)), ((java_cup.runtime.Symbol)CUP$VParser$stack.peek()), RESULT);
            }
          return CUP$VParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 122: // java_params ::= java_data_type ID 
            {
              LinkedList<Declaration> RESULT =null;
		int dataTypeleft = ((java_cup.runtime.Symbol)CUP$VParser$stack.elementAt(CUP$VParser$top-1)).left;
		int dataTyperight = ((java_cup.runtime.Symbol)CUP$VParser$stack.elementAt(CUP$VParser$top-1)).right;
		Type dataType = (Type)((java_cup.runtime.Symbol) CUP$VParser$stack.elementAt(CUP$VParser$top-1)).value;
		int paramNameleft = ((java_cup.runtime.Symbol)CUP$VParser$stack.peek()).left;
		int paramNameright = ((java_cup.runtime.Symbol)CUP$VParser$stack.peek()).right;
		String paramName = (String)((java_cup.runtime.Symbol) CUP$VParser$stack.peek()).value;
		 RESULT = new LinkedList<Declaration>(); RESULT.add(new Declaration(paramName, dataType, Role.PARAM, paramNameleft, paramNameright)); 
              CUP$VParser$result = parser.getSymbolFactory().newSymbol("java_params",72, ((java_cup.runtime.Symbol)CUP$VParser$stack.elementAt(CUP$VParser$top-1)), ((java_cup.runtime.Symbol)CUP$VParser$stack.peek()), RESULT);
            }
          return CUP$VParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 123: // java_method_type ::= INTEGER 
            {
              Type RESULT =null;
		 RESULT = Type.INT; 
              CUP$VParser$result = parser.getSymbolFactory().newSymbol("java_method_type",8, ((java_cup.runtime.Symbol)CUP$VParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$VParser$stack.peek()), RESULT);
            }
          return CUP$VParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 124: // java_method_type ::= FLOAT 
            {
              Type RESULT =null;
		 RESULT = Type.FLOAT; 
              CUP$VParser$result = parser.getSymbolFactory().newSymbol("java_method_type",8, ((java_cup.runtime.Symbol)CUP$VParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$VParser$stack.peek()), RESULT);
            }
          return CUP$VParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 125: // java_method_type ::= CHAR 
            {
              Type RESULT =null;
		 RESULT = Type.CHAR; 
              CUP$VParser$result = parser.getSymbolFactory().newSymbol("java_method_type",8, ((java_cup.runtime.Symbol)CUP$VParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$VParser$stack.peek()), RESULT);
            }
          return CUP$VParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 126: // java_method_type ::= VOID 
            {
              Type RESULT =null;
		 RESULT = Type.VOID; 
              CUP$VParser$result = parser.getSymbolFactory().newSymbol("java_method_type",8, ((java_cup.runtime.Symbol)CUP$VParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$VParser$stack.peek()), RESULT);
            }
          return CUP$VParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 127: // java_declaration ::= java_data_type ID COMMA java_var_list SEMICOLON 
            {
              LinkedList<Instruction> RESULT =null;
		int dataTypeleft = ((java_cup.runtime.Symbol)CUP$VParser$stack.elementAt(CUP$VParser$top-4)).left;
		int dataTyperight = ((java_cup.runtime.Symbol)CUP$VParser$stack.elementAt(CUP$VParser$top-4)).right;
		Type dataType = (Type)((java_cup.runtime.Symbol) CUP$VParser$stack.elementAt(CUP$VParser$top-4)).value;
		int varNameleft = ((java_cup.runtime.Symbol)CUP$VParser$stack.elementAt(CUP$VParser$top-3)).left;
		int varNameright = ((java_cup.runtime.Symbol)CUP$VParser$stack.elementAt(CUP$VParser$top-3)).right;
		String varName = (String)((java_cup.runtime.Symbol) CUP$VParser$stack.elementAt(CUP$VParser$top-3)).value;
		int varListleft = ((java_cup.runtime.Symbol)CUP$VParser$stack.elementAt(CUP$VParser$top-1)).left;
		int varListright = ((java_cup.runtime.Symbol)CUP$VParser$stack.elementAt(CUP$VParser$top-1)).right;
		LinkedList<Id> varList = (LinkedList<Id>)((java_cup.runtime.Symbol) CUP$VParser$stack.elementAt(CUP$VParser$top-1)).value;
		 varList.addFirst(new Id(varName, varNameleft, varNameright)); RESULT = getDeclarations(varList, dataType); 
              CUP$VParser$result = parser.getSymbolFactory().newSymbol("java_declaration",68, ((java_cup.runtime.Symbol)CUP$VParser$stack.elementAt(CUP$VParser$top-4)), ((java_cup.runtime.Symbol)CUP$VParser$stack.peek()), RESULT);
            }
          return CUP$VParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 128: // java_declaration ::= java_data_type ID SEMICOLON 
            {
              LinkedList<Instruction> RESULT =null;
		int dataTypeleft = ((java_cup.runtime.Symbol)CUP$VParser$stack.elementAt(CUP$VParser$top-2)).left;
		int dataTyperight = ((java_cup.runtime.Symbol)CUP$VParser$stack.elementAt(CUP$VParser$top-2)).right;
		Type dataType = (Type)((java_cup.runtime.Symbol) CUP$VParser$stack.elementAt(CUP$VParser$top-2)).value;
		int varNameleft = ((java_cup.runtime.Symbol)CUP$VParser$stack.elementAt(CUP$VParser$top-1)).left;
		int varNameright = ((java_cup.runtime.Symbol)CUP$VParser$stack.elementAt(CUP$VParser$top-1)).right;
		String varName = (String)((java_cup.runtime.Symbol) CUP$VParser$stack.elementAt(CUP$VParser$top-1)).value;
		 RESULT = new LinkedList<Instruction>(); RESULT.add(new Declaration(varName, dataType, Role.VAR, varNameleft, varNameright)); 
              CUP$VParser$result = parser.getSymbolFactory().newSymbol("java_declaration",68, ((java_cup.runtime.Symbol)CUP$VParser$stack.elementAt(CUP$VParser$top-2)), ((java_cup.runtime.Symbol)CUP$VParser$stack.peek()), RESULT);
            }
          return CUP$VParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 129: // java_var_list ::= ID COMMA java_var_list 
            {
              LinkedList<Id> RESULT =null;
		int varNameleft = ((java_cup.runtime.Symbol)CUP$VParser$stack.elementAt(CUP$VParser$top-2)).left;
		int varNameright = ((java_cup.runtime.Symbol)CUP$VParser$stack.elementAt(CUP$VParser$top-2)).right;
		String varName = (String)((java_cup.runtime.Symbol) CUP$VParser$stack.elementAt(CUP$VParser$top-2)).value;
		int varListleft = ((java_cup.runtime.Symbol)CUP$VParser$stack.peek()).left;
		int varListright = ((java_cup.runtime.Symbol)CUP$VParser$stack.peek()).right;
		LinkedList<Id> varList = (LinkedList<Id>)((java_cup.runtime.Symbol) CUP$VParser$stack.peek()).value;
		 varList.addFirst(new Id(varName, varNameleft, varNameright)); RESULT = varList; 
              CUP$VParser$result = parser.getSymbolFactory().newSymbol("java_var_list",75, ((java_cup.runtime.Symbol)CUP$VParser$stack.elementAt(CUP$VParser$top-2)), ((java_cup.runtime.Symbol)CUP$VParser$stack.peek()), RESULT);
            }
          return CUP$VParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 130: // java_var_list ::= ID 
            {
              LinkedList<Id> RESULT =null;
		int varNameleft = ((java_cup.runtime.Symbol)CUP$VParser$stack.peek()).left;
		int varNameright = ((java_cup.runtime.Symbol)CUP$VParser$stack.peek()).right;
		String varName = (String)((java_cup.runtime.Symbol) CUP$VParser$stack.peek()).value;
		 RESULT = new LinkedList<Id>(); RESULT.add(new Id(varName, varNameleft, varNameright)); 
              CUP$VParser$result = parser.getSymbolFactory().newSymbol("java_var_list",75, ((java_cup.runtime.Symbol)CUP$VParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$VParser$stack.peek()), RESULT);
            }
          return CUP$VParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 131: // java_assignment ::= ID EQUALS arithmetic_op SEMICOLON 
            {
              Instruction RESULT =null;
		int varNameleft = ((java_cup.runtime.Symbol)CUP$VParser$stack.elementAt(CUP$VParser$top-3)).left;
		int varNameright = ((java_cup.runtime.Symbol)CUP$VParser$stack.elementAt(CUP$VParser$top-3)).right;
		String varName = (String)((java_cup.runtime.Symbol) CUP$VParser$stack.elementAt(CUP$VParser$top-3)).value;
		int valueleft = ((java_cup.runtime.Symbol)CUP$VParser$stack.elementAt(CUP$VParser$top-1)).left;
		int valueright = ((java_cup.runtime.Symbol)CUP$VParser$stack.elementAt(CUP$VParser$top-1)).right;
		Operation value = (Operation)((java_cup.runtime.Symbol) CUP$VParser$stack.elementAt(CUP$VParser$top-1)).value;
		 RESULT = new Assignment(varName, value, varNameleft, varNameright); 
              CUP$VParser$result = parser.getSymbolFactory().newSymbol("java_assignment",27, ((java_cup.runtime.Symbol)CUP$VParser$stack.elementAt(CUP$VParser$top-3)), ((java_cup.runtime.Symbol)CUP$VParser$stack.peek()), RESULT);
            }
          return CUP$VParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 132: // java_assignment ::= ID EQUALS java_data_request 
            {
              Instruction RESULT =null;
		int varNameleft = ((java_cup.runtime.Symbol)CUP$VParser$stack.elementAt(CUP$VParser$top-2)).left;
		int varNameright = ((java_cup.runtime.Symbol)CUP$VParser$stack.elementAt(CUP$VParser$top-2)).right;
		String varName = (String)((java_cup.runtime.Symbol) CUP$VParser$stack.elementAt(CUP$VParser$top-2)).value;
		int valueleft = ((java_cup.runtime.Symbol)CUP$VParser$stack.peek()).left;
		int valueright = ((java_cup.runtime.Symbol)CUP$VParser$stack.peek()).right;
		Instruction value = (Instruction)((java_cup.runtime.Symbol) CUP$VParser$stack.peek()).value;
		 RESULT = new Assignment(varName, value, varNameleft, varNameright); 
              CUP$VParser$result = parser.getSymbolFactory().newSymbol("java_assignment",27, ((java_cup.runtime.Symbol)CUP$VParser$stack.elementAt(CUP$VParser$top-2)), ((java_cup.runtime.Symbol)CUP$VParser$stack.peek()), RESULT);
            }
          return CUP$VParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 133: // java_declaration_assignment ::= java_data_type ID EQUALS arithmetic_op SEMICOLON 
            {
              LinkedList<Instruction> RESULT =null;
		int dataTypeleft = ((java_cup.runtime.Symbol)CUP$VParser$stack.elementAt(CUP$VParser$top-4)).left;
		int dataTyperight = ((java_cup.runtime.Symbol)CUP$VParser$stack.elementAt(CUP$VParser$top-4)).right;
		Type dataType = (Type)((java_cup.runtime.Symbol) CUP$VParser$stack.elementAt(CUP$VParser$top-4)).value;
		int varNameleft = ((java_cup.runtime.Symbol)CUP$VParser$stack.elementAt(CUP$VParser$top-3)).left;
		int varNameright = ((java_cup.runtime.Symbol)CUP$VParser$stack.elementAt(CUP$VParser$top-3)).right;
		String varName = (String)((java_cup.runtime.Symbol) CUP$VParser$stack.elementAt(CUP$VParser$top-3)).value;
		int valueleft = ((java_cup.runtime.Symbol)CUP$VParser$stack.elementAt(CUP$VParser$top-1)).left;
		int valueright = ((java_cup.runtime.Symbol)CUP$VParser$stack.elementAt(CUP$VParser$top-1)).right;
		Operation value = (Operation)((java_cup.runtime.Symbol) CUP$VParser$stack.elementAt(CUP$VParser$top-1)).value;
		 RESULT = new LinkedList<Instruction>(); RESULT.addFirst(new Declaration(varName, dataType, Role.VAR, varNameleft, varNameright)); RESULT.addLast(new Assignment(varName, value, varNameleft, varNameright)); 
              CUP$VParser$result = parser.getSymbolFactory().newSymbol("java_declaration_assignment",69, ((java_cup.runtime.Symbol)CUP$VParser$stack.elementAt(CUP$VParser$top-4)), ((java_cup.runtime.Symbol)CUP$VParser$stack.peek()), RESULT);
            }
          return CUP$VParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 134: // java_declaration_assignment ::= java_data_type ID EQUALS java_data_request 
            {
              LinkedList<Instruction> RESULT =null;
		int dataTypeleft = ((java_cup.runtime.Symbol)CUP$VParser$stack.elementAt(CUP$VParser$top-3)).left;
		int dataTyperight = ((java_cup.runtime.Symbol)CUP$VParser$stack.elementAt(CUP$VParser$top-3)).right;
		Type dataType = (Type)((java_cup.runtime.Symbol) CUP$VParser$stack.elementAt(CUP$VParser$top-3)).value;
		int varNameleft = ((java_cup.runtime.Symbol)CUP$VParser$stack.elementAt(CUP$VParser$top-2)).left;
		int varNameright = ((java_cup.runtime.Symbol)CUP$VParser$stack.elementAt(CUP$VParser$top-2)).right;
		String varName = (String)((java_cup.runtime.Symbol) CUP$VParser$stack.elementAt(CUP$VParser$top-2)).value;
		int valueleft = ((java_cup.runtime.Symbol)CUP$VParser$stack.peek()).left;
		int valueright = ((java_cup.runtime.Symbol)CUP$VParser$stack.peek()).right;
		Instruction value = (Instruction)((java_cup.runtime.Symbol) CUP$VParser$stack.peek()).value;
		 RESULT = new LinkedList<Instruction>(); RESULT.addFirst(new Declaration(varName, dataType, Role.VAR, varNameleft, varNameright)); RESULT.addLast(new Assignment(varName, value, varNameleft, varNameright)); 
              CUP$VParser$result = parser.getSymbolFactory().newSymbol("java_declaration_assignment",69, ((java_cup.runtime.Symbol)CUP$VParser$stack.elementAt(CUP$VParser$top-3)), ((java_cup.runtime.Symbol)CUP$VParser$stack.peek()), RESULT);
            }
          return CUP$VParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 135: // java_data_type ::= INTEGER 
            {
              Type RESULT =null;
		 RESULT = Type.INT; 
              CUP$VParser$result = parser.getSymbolFactory().newSymbol("java_data_type",7, ((java_cup.runtime.Symbol)CUP$VParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$VParser$stack.peek()), RESULT);
            }
          return CUP$VParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 136: // java_data_type ::= FLOAT 
            {
              Type RESULT =null;
		 RESULT = Type.FLOAT; 
              CUP$VParser$result = parser.getSymbolFactory().newSymbol("java_data_type",7, ((java_cup.runtime.Symbol)CUP$VParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$VParser$stack.peek()), RESULT);
            }
          return CUP$VParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 137: // java_data_type ::= CHAR 
            {
              Type RESULT =null;
		 RESULT = Type.CHAR; 
              CUP$VParser$result = parser.getSymbolFactory().newSymbol("java_data_type",7, ((java_cup.runtime.Symbol)CUP$VParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$VParser$stack.peek()), RESULT);
            }
          return CUP$VParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 138: // java_while ::= WHILE PARENTHESISO logical_op PARENTHESISC CURLYBRACKETO java_code_statements CURLYBRACKETC 
            {
              Instruction RESULT =null;
		int conditionleft = ((java_cup.runtime.Symbol)CUP$VParser$stack.elementAt(CUP$VParser$top-4)).left;
		int conditionright = ((java_cup.runtime.Symbol)CUP$VParser$stack.elementAt(CUP$VParser$top-4)).right;
		Operation condition = (Operation)((java_cup.runtime.Symbol) CUP$VParser$stack.elementAt(CUP$VParser$top-4)).value;
		int instructionsleft = ((java_cup.runtime.Symbol)CUP$VParser$stack.elementAt(CUP$VParser$top-1)).left;
		int instructionsright = ((java_cup.runtime.Symbol)CUP$VParser$stack.elementAt(CUP$VParser$top-1)).right;
		LinkedList<Instruction> instructions = (LinkedList<Instruction>)((java_cup.runtime.Symbol) CUP$VParser$stack.elementAt(CUP$VParser$top-1)).value;
		 RESULT = new While(condition, instructions); 
              CUP$VParser$result = parser.getSymbolFactory().newSymbol("java_while",30, ((java_cup.runtime.Symbol)CUP$VParser$stack.elementAt(CUP$VParser$top-6)), ((java_cup.runtime.Symbol)CUP$VParser$stack.peek()), RESULT);
            }
          return CUP$VParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 139: // java_do_while ::= DO CURLYBRACKETO java_code_statements CURLYBRACKETC WHILE PARENTHESISO logical_op PARENTHESISC SEMICOLON 
            {
              Instruction RESULT =null;
		int instructionsleft = ((java_cup.runtime.Symbol)CUP$VParser$stack.elementAt(CUP$VParser$top-6)).left;
		int instructionsright = ((java_cup.runtime.Symbol)CUP$VParser$stack.elementAt(CUP$VParser$top-6)).right;
		LinkedList<Instruction> instructions = (LinkedList<Instruction>)((java_cup.runtime.Symbol) CUP$VParser$stack.elementAt(CUP$VParser$top-6)).value;
		int conditionleft = ((java_cup.runtime.Symbol)CUP$VParser$stack.elementAt(CUP$VParser$top-2)).left;
		int conditionright = ((java_cup.runtime.Symbol)CUP$VParser$stack.elementAt(CUP$VParser$top-2)).right;
		Operation condition = (Operation)((java_cup.runtime.Symbol) CUP$VParser$stack.elementAt(CUP$VParser$top-2)).value;
		 RESULT = new DoWhile(condition, instructions); 
              CUP$VParser$result = parser.getSymbolFactory().newSymbol("java_do_while",31, ((java_cup.runtime.Symbol)CUP$VParser$stack.elementAt(CUP$VParser$top-8)), ((java_cup.runtime.Symbol)CUP$VParser$stack.peek()), RESULT);
            }
          return CUP$VParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 140: // java_for ::= FOR PARENTHESISO ID EQUALS arithmetic_op SEMICOLON logical_op SEMICOLON ID EQUALS arithmetic_op PARENTHESISC CURLYBRACKETO java_code_statements CURLYBRACKETC 
            {
              Instruction RESULT =null;
		int varNameleft = ((java_cup.runtime.Symbol)CUP$VParser$stack.elementAt(CUP$VParser$top-12)).left;
		int varNameright = ((java_cup.runtime.Symbol)CUP$VParser$stack.elementAt(CUP$VParser$top-12)).right;
		String varName = (String)((java_cup.runtime.Symbol) CUP$VParser$stack.elementAt(CUP$VParser$top-12)).value;
		int value1left = ((java_cup.runtime.Symbol)CUP$VParser$stack.elementAt(CUP$VParser$top-10)).left;
		int value1right = ((java_cup.runtime.Symbol)CUP$VParser$stack.elementAt(CUP$VParser$top-10)).right;
		Operation value1 = (Operation)((java_cup.runtime.Symbol) CUP$VParser$stack.elementAt(CUP$VParser$top-10)).value;
		int conditionleft = ((java_cup.runtime.Symbol)CUP$VParser$stack.elementAt(CUP$VParser$top-8)).left;
		int conditionright = ((java_cup.runtime.Symbol)CUP$VParser$stack.elementAt(CUP$VParser$top-8)).right;
		Operation condition = (Operation)((java_cup.runtime.Symbol) CUP$VParser$stack.elementAt(CUP$VParser$top-8)).value;
		int varName2left = ((java_cup.runtime.Symbol)CUP$VParser$stack.elementAt(CUP$VParser$top-6)).left;
		int varName2right = ((java_cup.runtime.Symbol)CUP$VParser$stack.elementAt(CUP$VParser$top-6)).right;
		String varName2 = (String)((java_cup.runtime.Symbol) CUP$VParser$stack.elementAt(CUP$VParser$top-6)).value;
		int value2left = ((java_cup.runtime.Symbol)CUP$VParser$stack.elementAt(CUP$VParser$top-4)).left;
		int value2right = ((java_cup.runtime.Symbol)CUP$VParser$stack.elementAt(CUP$VParser$top-4)).right;
		Operation value2 = (Operation)((java_cup.runtime.Symbol) CUP$VParser$stack.elementAt(CUP$VParser$top-4)).value;
		int instructionsleft = ((java_cup.runtime.Symbol)CUP$VParser$stack.elementAt(CUP$VParser$top-1)).left;
		int instructionsright = ((java_cup.runtime.Symbol)CUP$VParser$stack.elementAt(CUP$VParser$top-1)).right;
		LinkedList<Instruction> instructions = (LinkedList<Instruction>)((java_cup.runtime.Symbol) CUP$VParser$stack.elementAt(CUP$VParser$top-1)).value;
		 RESULT = new For(new Assignment(varName, value1, varNameleft, varNameright), condition, new Assignment(varName2, value2, varName2left, varName2right), instructions); 
              CUP$VParser$result = parser.getSymbolFactory().newSymbol("java_for",32, ((java_cup.runtime.Symbol)CUP$VParser$stack.elementAt(CUP$VParser$top-14)), ((java_cup.runtime.Symbol)CUP$VParser$stack.peek()), RESULT);
            }
          return CUP$VParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 141: // java_for ::= FOR PARENTHESISO java_data_type ID EQUALS arithmetic_op SEMICOLON logical_op SEMICOLON ID EQUALS arithmetic_op PARENTHESISC CURLYBRACKETO java_code_statements CURLYBRACKETC 
            {
              Instruction RESULT =null;
		int typeleft = ((java_cup.runtime.Symbol)CUP$VParser$stack.elementAt(CUP$VParser$top-13)).left;
		int typeright = ((java_cup.runtime.Symbol)CUP$VParser$stack.elementAt(CUP$VParser$top-13)).right;
		Type type = (Type)((java_cup.runtime.Symbol) CUP$VParser$stack.elementAt(CUP$VParser$top-13)).value;
		int varNameleft = ((java_cup.runtime.Symbol)CUP$VParser$stack.elementAt(CUP$VParser$top-12)).left;
		int varNameright = ((java_cup.runtime.Symbol)CUP$VParser$stack.elementAt(CUP$VParser$top-12)).right;
		String varName = (String)((java_cup.runtime.Symbol) CUP$VParser$stack.elementAt(CUP$VParser$top-12)).value;
		int value1left = ((java_cup.runtime.Symbol)CUP$VParser$stack.elementAt(CUP$VParser$top-10)).left;
		int value1right = ((java_cup.runtime.Symbol)CUP$VParser$stack.elementAt(CUP$VParser$top-10)).right;
		Operation value1 = (Operation)((java_cup.runtime.Symbol) CUP$VParser$stack.elementAt(CUP$VParser$top-10)).value;
		int conditionleft = ((java_cup.runtime.Symbol)CUP$VParser$stack.elementAt(CUP$VParser$top-8)).left;
		int conditionright = ((java_cup.runtime.Symbol)CUP$VParser$stack.elementAt(CUP$VParser$top-8)).right;
		Operation condition = (Operation)((java_cup.runtime.Symbol) CUP$VParser$stack.elementAt(CUP$VParser$top-8)).value;
		int varName2left = ((java_cup.runtime.Symbol)CUP$VParser$stack.elementAt(CUP$VParser$top-6)).left;
		int varName2right = ((java_cup.runtime.Symbol)CUP$VParser$stack.elementAt(CUP$VParser$top-6)).right;
		String varName2 = (String)((java_cup.runtime.Symbol) CUP$VParser$stack.elementAt(CUP$VParser$top-6)).value;
		int value2left = ((java_cup.runtime.Symbol)CUP$VParser$stack.elementAt(CUP$VParser$top-4)).left;
		int value2right = ((java_cup.runtime.Symbol)CUP$VParser$stack.elementAt(CUP$VParser$top-4)).right;
		Operation value2 = (Operation)((java_cup.runtime.Symbol) CUP$VParser$stack.elementAt(CUP$VParser$top-4)).value;
		int instructionsleft = ((java_cup.runtime.Symbol)CUP$VParser$stack.elementAt(CUP$VParser$top-1)).left;
		int instructionsright = ((java_cup.runtime.Symbol)CUP$VParser$stack.elementAt(CUP$VParser$top-1)).right;
		LinkedList<Instruction> instructions = (LinkedList<Instruction>)((java_cup.runtime.Symbol) CUP$VParser$stack.elementAt(CUP$VParser$top-1)).value;
		 RESULT = new For(new Declaration(varName, type, Role.VAR, varNameleft, varNameright) ,new Assignment(varName, value1, varNameleft, varNameright), condition, new Assignment(varName2, value2, varName2left, varName2right), instructions); 
              CUP$VParser$result = parser.getSymbolFactory().newSymbol("java_for",32, ((java_cup.runtime.Symbol)CUP$VParser$stack.elementAt(CUP$VParser$top-15)), ((java_cup.runtime.Symbol)CUP$VParser$stack.peek()), RESULT);
            }
          return CUP$VParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 142: // java_if ::= IF PARENTHESISO logical_op PARENTHESISC CURLYBRACKETO java_code_statements CURLYBRACKETC 
            {
              Instruction RESULT =null;
		int conditionleft = ((java_cup.runtime.Symbol)CUP$VParser$stack.elementAt(CUP$VParser$top-4)).left;
		int conditionright = ((java_cup.runtime.Symbol)CUP$VParser$stack.elementAt(CUP$VParser$top-4)).right;
		Operation condition = (Operation)((java_cup.runtime.Symbol) CUP$VParser$stack.elementAt(CUP$VParser$top-4)).value;
		int instructionsleft = ((java_cup.runtime.Symbol)CUP$VParser$stack.elementAt(CUP$VParser$top-1)).left;
		int instructionsright = ((java_cup.runtime.Symbol)CUP$VParser$stack.elementAt(CUP$VParser$top-1)).right;
		LinkedList<Instruction> instructions = (LinkedList<Instruction>)((java_cup.runtime.Symbol) CUP$VParser$stack.elementAt(CUP$VParser$top-1)).value;
		 RESULT = new If(condition, instructions); 
              CUP$VParser$result = parser.getSymbolFactory().newSymbol("java_if",33, ((java_cup.runtime.Symbol)CUP$VParser$stack.elementAt(CUP$VParser$top-6)), ((java_cup.runtime.Symbol)CUP$VParser$stack.peek()), RESULT);
            }
          return CUP$VParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 143: // java_if ::= IF PARENTHESISO logical_op PARENTHESISC CURLYBRACKETO java_code_statements CURLYBRACKETC ELSE CURLYBRACKETO java_code_statements CURLYBRACKETC 
            {
              Instruction RESULT =null;
		int conditionleft = ((java_cup.runtime.Symbol)CUP$VParser$stack.elementAt(CUP$VParser$top-8)).left;
		int conditionright = ((java_cup.runtime.Symbol)CUP$VParser$stack.elementAt(CUP$VParser$top-8)).right;
		Operation condition = (Operation)((java_cup.runtime.Symbol) CUP$VParser$stack.elementAt(CUP$VParser$top-8)).value;
		int instructionsleft = ((java_cup.runtime.Symbol)CUP$VParser$stack.elementAt(CUP$VParser$top-5)).left;
		int instructionsright = ((java_cup.runtime.Symbol)CUP$VParser$stack.elementAt(CUP$VParser$top-5)).right;
		LinkedList<Instruction> instructions = (LinkedList<Instruction>)((java_cup.runtime.Symbol) CUP$VParser$stack.elementAt(CUP$VParser$top-5)).value;
		int elseInstructionsleft = ((java_cup.runtime.Symbol)CUP$VParser$stack.elementAt(CUP$VParser$top-1)).left;
		int elseInstructionsright = ((java_cup.runtime.Symbol)CUP$VParser$stack.elementAt(CUP$VParser$top-1)).right;
		LinkedList<Instruction> elseInstructions = (LinkedList<Instruction>)((java_cup.runtime.Symbol) CUP$VParser$stack.elementAt(CUP$VParser$top-1)).value;
		 RESULT = new If(condition, instructions, elseInstructions); 
              CUP$VParser$result = parser.getSymbolFactory().newSymbol("java_if",33, ((java_cup.runtime.Symbol)CUP$VParser$stack.elementAt(CUP$VParser$top-10)), ((java_cup.runtime.Symbol)CUP$VParser$stack.peek()), RESULT);
            }
          return CUP$VParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 144: // java_switch ::= SWITCH PARENTHESISO ID PARENTHESISC CURLYBRACKETO java_switch_cases CURLYBRACKETC 
            {
              Instruction RESULT =null;
		int varNameleft = ((java_cup.runtime.Symbol)CUP$VParser$stack.elementAt(CUP$VParser$top-4)).left;
		int varNameright = ((java_cup.runtime.Symbol)CUP$VParser$stack.elementAt(CUP$VParser$top-4)).right;
		String varName = (String)((java_cup.runtime.Symbol) CUP$VParser$stack.elementAt(CUP$VParser$top-4)).value;
		int instructionsleft = ((java_cup.runtime.Symbol)CUP$VParser$stack.elementAt(CUP$VParser$top-1)).left;
		int instructionsright = ((java_cup.runtime.Symbol)CUP$VParser$stack.elementAt(CUP$VParser$top-1)).right;
		LinkedList<Case> instructions = (LinkedList<Case>)((java_cup.runtime.Symbol) CUP$VParser$stack.elementAt(CUP$VParser$top-1)).value;
		 RESULT = new Switch(new Operation(varName, OperationType.ID, varNameleft, varNameright), instructions); 
              CUP$VParser$result = parser.getSymbolFactory().newSymbol("java_switch",35, ((java_cup.runtime.Symbol)CUP$VParser$stack.elementAt(CUP$VParser$top-6)), ((java_cup.runtime.Symbol)CUP$VParser$stack.peek()), RESULT);
            }
          return CUP$VParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 145: // java_switch ::= SWITCH PARENTHESISO ID PARENTHESISC CURLYBRACKETO CURLYBRACKETC 
            {
              Instruction RESULT =null;
		int varNameleft = ((java_cup.runtime.Symbol)CUP$VParser$stack.elementAt(CUP$VParser$top-3)).left;
		int varNameright = ((java_cup.runtime.Symbol)CUP$VParser$stack.elementAt(CUP$VParser$top-3)).right;
		String varName = (String)((java_cup.runtime.Symbol) CUP$VParser$stack.elementAt(CUP$VParser$top-3)).value;
		 RESULT = new Switch(new Operation(varName, OperationType.ID, varNameleft, varNameright), new LinkedList<Case>()); 
              CUP$VParser$result = parser.getSymbolFactory().newSymbol("java_switch",35, ((java_cup.runtime.Symbol)CUP$VParser$stack.elementAt(CUP$VParser$top-5)), ((java_cup.runtime.Symbol)CUP$VParser$stack.peek()), RESULT);
            }
          return CUP$VParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 146: // java_switch_cases ::= CASE java_switch_data COLON java_code_statements BREAK SEMICOLON java_switch_cases 
            {
              LinkedList<Case> RESULT =null;
		int valueleft = ((java_cup.runtime.Symbol)CUP$VParser$stack.elementAt(CUP$VParser$top-5)).left;
		int valueright = ((java_cup.runtime.Symbol)CUP$VParser$stack.elementAt(CUP$VParser$top-5)).right;
		Operation value = (Operation)((java_cup.runtime.Symbol) CUP$VParser$stack.elementAt(CUP$VParser$top-5)).value;
		int instructionsleft = ((java_cup.runtime.Symbol)CUP$VParser$stack.elementAt(CUP$VParser$top-3)).left;
		int instructionsright = ((java_cup.runtime.Symbol)CUP$VParser$stack.elementAt(CUP$VParser$top-3)).right;
		LinkedList<Instruction> instructions = (LinkedList<Instruction>)((java_cup.runtime.Symbol) CUP$VParser$stack.elementAt(CUP$VParser$top-3)).value;
		int instructionsListleft = ((java_cup.runtime.Symbol)CUP$VParser$stack.peek()).left;
		int instructionsListright = ((java_cup.runtime.Symbol)CUP$VParser$stack.peek()).right;
		LinkedList<Case> instructionsList = (LinkedList<Case>)((java_cup.runtime.Symbol) CUP$VParser$stack.peek()).value;
		 instructionsList.addFirst(new Case(value, instructions, valueleft, valueright));  RESULT = instructionsList; 
              CUP$VParser$result = parser.getSymbolFactory().newSymbol("java_switch_cases",78, ((java_cup.runtime.Symbol)CUP$VParser$stack.elementAt(CUP$VParser$top-6)), ((java_cup.runtime.Symbol)CUP$VParser$stack.peek()), RESULT);
            }
          return CUP$VParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 147: // java_switch_cases ::= CASE java_switch_data COLON java_code_statements BREAK SEMICOLON 
            {
              LinkedList<Case> RESULT =null;
		int valueleft = ((java_cup.runtime.Symbol)CUP$VParser$stack.elementAt(CUP$VParser$top-4)).left;
		int valueright = ((java_cup.runtime.Symbol)CUP$VParser$stack.elementAt(CUP$VParser$top-4)).right;
		Operation value = (Operation)((java_cup.runtime.Symbol) CUP$VParser$stack.elementAt(CUP$VParser$top-4)).value;
		int instructionsleft = ((java_cup.runtime.Symbol)CUP$VParser$stack.elementAt(CUP$VParser$top-2)).left;
		int instructionsright = ((java_cup.runtime.Symbol)CUP$VParser$stack.elementAt(CUP$VParser$top-2)).right;
		LinkedList<Instruction> instructions = (LinkedList<Instruction>)((java_cup.runtime.Symbol) CUP$VParser$stack.elementAt(CUP$VParser$top-2)).value;
		 RESULT = new LinkedList<Case>(); RESULT.add(new Case(value, instructions, valueleft, valueright)); 
              CUP$VParser$result = parser.getSymbolFactory().newSymbol("java_switch_cases",78, ((java_cup.runtime.Symbol)CUP$VParser$stack.elementAt(CUP$VParser$top-5)), ((java_cup.runtime.Symbol)CUP$VParser$stack.peek()), RESULT);
            }
          return CUP$VParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 148: // java_switch_cases ::= DEFAULT COLON java_code_statements BREAK SEMICOLON 
            {
              LinkedList<Case> RESULT =null;
		int instructionsleft = ((java_cup.runtime.Symbol)CUP$VParser$stack.elementAt(CUP$VParser$top-2)).left;
		int instructionsright = ((java_cup.runtime.Symbol)CUP$VParser$stack.elementAt(CUP$VParser$top-2)).right;
		LinkedList<Instruction> instructions = (LinkedList<Instruction>)((java_cup.runtime.Symbol) CUP$VParser$stack.elementAt(CUP$VParser$top-2)).value;
		 RESULT = new LinkedList<Case>(); RESULT.add(new Case(instructions)); 
              CUP$VParser$result = parser.getSymbolFactory().newSymbol("java_switch_cases",78, ((java_cup.runtime.Symbol)CUP$VParser$stack.elementAt(CUP$VParser$top-4)), ((java_cup.runtime.Symbol)CUP$VParser$stack.peek()), RESULT);
            }
          return CUP$VParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 149: // java_switch_data ::= INTEGERNUM 
            {
              Operation RESULT =null;
		int valueleft = ((java_cup.runtime.Symbol)CUP$VParser$stack.peek()).left;
		int valueright = ((java_cup.runtime.Symbol)CUP$VParser$stack.peek()).right;
		Integer value = (Integer)((java_cup.runtime.Symbol) CUP$VParser$stack.peek()).value;
		 RESULT = new Operation(value); 
              CUP$VParser$result = parser.getSymbolFactory().newSymbol("java_switch_data",52, ((java_cup.runtime.Symbol)CUP$VParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$VParser$stack.peek()), RESULT);
            }
          return CUP$VParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 150: // java_switch_data ::= DOUBLENUM 
            {
              Operation RESULT =null;
		int valueleft = ((java_cup.runtime.Symbol)CUP$VParser$stack.peek()).left;
		int valueright = ((java_cup.runtime.Symbol)CUP$VParser$stack.peek()).right;
		Double value = (Double)((java_cup.runtime.Symbol) CUP$VParser$stack.peek()).value;
		 RESULT = new Operation(value); 
              CUP$VParser$result = parser.getSymbolFactory().newSymbol("java_switch_data",52, ((java_cup.runtime.Symbol)CUP$VParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$VParser$stack.peek()), RESULT);
            }
          return CUP$VParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 151: // java_switch_data ::= CHARACTER 
            {
              Operation RESULT =null;
		int valueleft = ((java_cup.runtime.Symbol)CUP$VParser$stack.peek()).left;
		int valueright = ((java_cup.runtime.Symbol)CUP$VParser$stack.peek()).right;
		char value = (char)((java_cup.runtime.Symbol) CUP$VParser$stack.peek()).value;
		 RESULT = new Operation(value); 
              CUP$VParser$result = parser.getSymbolFactory().newSymbol("java_switch_data",52, ((java_cup.runtime.Symbol)CUP$VParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$VParser$stack.peek()), RESULT);
            }
          return CUP$VParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 152: // java_screen_messages ::= SYSTEM FULLSTOP OUT FULLSTOP PRINTLN PARENTHESISO java_message PARENTHESISC SEMICOLON 
            {
              Instruction RESULT =null;
		int messageleft = ((java_cup.runtime.Symbol)CUP$VParser$stack.elementAt(CUP$VParser$top-2)).left;
		int messageright = ((java_cup.runtime.Symbol)CUP$VParser$stack.elementAt(CUP$VParser$top-2)).right;
		Operation message = (Operation)((java_cup.runtime.Symbol) CUP$VParser$stack.elementAt(CUP$VParser$top-2)).value;
		 RESULT = new Print(message, PrintType.PRINTLN); 
              CUP$VParser$result = parser.getSymbolFactory().newSymbol("java_screen_messages",34, ((java_cup.runtime.Symbol)CUP$VParser$stack.elementAt(CUP$VParser$top-8)), ((java_cup.runtime.Symbol)CUP$VParser$stack.peek()), RESULT);
            }
          return CUP$VParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 153: // java_screen_messages ::= SYSTEM FULLSTOP OUT FULLSTOP PRINT PARENTHESISO java_message PARENTHESISC SEMICOLON 
            {
              Instruction RESULT =null;
		int messageleft = ((java_cup.runtime.Symbol)CUP$VParser$stack.elementAt(CUP$VParser$top-2)).left;
		int messageright = ((java_cup.runtime.Symbol)CUP$VParser$stack.elementAt(CUP$VParser$top-2)).right;
		Operation message = (Operation)((java_cup.runtime.Symbol) CUP$VParser$stack.elementAt(CUP$VParser$top-2)).value;
		 RESULT = new Print(message, PrintType.PRINT); 
              CUP$VParser$result = parser.getSymbolFactory().newSymbol("java_screen_messages",34, ((java_cup.runtime.Symbol)CUP$VParser$stack.elementAt(CUP$VParser$top-8)), ((java_cup.runtime.Symbol)CUP$VParser$stack.peek()), RESULT);
            }
          return CUP$VParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 154: // java_message ::= java_message PLUS java_message_data1 
            {
              Operation RESULT =null;
		int value1left = ((java_cup.runtime.Symbol)CUP$VParser$stack.elementAt(CUP$VParser$top-2)).left;
		int value1right = ((java_cup.runtime.Symbol)CUP$VParser$stack.elementAt(CUP$VParser$top-2)).right;
		Operation value1 = (Operation)((java_cup.runtime.Symbol) CUP$VParser$stack.elementAt(CUP$VParser$top-2)).value;
		int value2left = ((java_cup.runtime.Symbol)CUP$VParser$stack.peek()).left;
		int value2right = ((java_cup.runtime.Symbol)CUP$VParser$stack.peek()).right;
		Operation value2 = (Operation)((java_cup.runtime.Symbol) CUP$VParser$stack.peek()).value;
		  if(value1.getOperationType() == OperationType.LITERAL || value2.getOperationType() == OperationType.LITERAL || value1.getOperationType() == OperationType.CONCAT || value2.getOperationType() == OperationType.CONCAT){
                            RESULT = new Operation(value1, value2, OperationType.CONCAT); 
                        } else RESULT = new Operation(value1, value2, OperationType.SUM);     
                    
              CUP$VParser$result = parser.getSymbolFactory().newSymbol("java_message",49, ((java_cup.runtime.Symbol)CUP$VParser$stack.elementAt(CUP$VParser$top-2)), ((java_cup.runtime.Symbol)CUP$VParser$stack.peek()), RESULT);
            }
          return CUP$VParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 155: // java_message ::= java_message_data1 
            {
              Operation RESULT =null;
		int valueleft = ((java_cup.runtime.Symbol)CUP$VParser$stack.peek()).left;
		int valueright = ((java_cup.runtime.Symbol)CUP$VParser$stack.peek()).right;
		Operation value = (Operation)((java_cup.runtime.Symbol) CUP$VParser$stack.peek()).value;
		 RESULT = value; 
              CUP$VParser$result = parser.getSymbolFactory().newSymbol("java_message",49, ((java_cup.runtime.Symbol)CUP$VParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$VParser$stack.peek()), RESULT);
            }
          return CUP$VParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 156: // java_message_data1 ::= java_message_data1 MULTIPLICATION java_message_data2 
            {
              Operation RESULT =null;
		int value1left = ((java_cup.runtime.Symbol)CUP$VParser$stack.elementAt(CUP$VParser$top-2)).left;
		int value1right = ((java_cup.runtime.Symbol)CUP$VParser$stack.elementAt(CUP$VParser$top-2)).right;
		Operation value1 = (Operation)((java_cup.runtime.Symbol) CUP$VParser$stack.elementAt(CUP$VParser$top-2)).value;
		int value2left = ((java_cup.runtime.Symbol)CUP$VParser$stack.peek()).left;
		int value2right = ((java_cup.runtime.Symbol)CUP$VParser$stack.peek()).right;
		Operation value2 = (Operation)((java_cup.runtime.Symbol) CUP$VParser$stack.peek()).value;
		  if(value1.getOperationType() == OperationType.LITERAL) vCompilerFrame.printMessage("Fila: " +value1left+ " Columna: " +value1right+ " Error Sintactico No se puede aplicar un operador [*] sobre un Literal."); 
                            if(value2.getOperationType() == OperationType.LITERAL) vCompilerFrame.printMessage("Fila: " +value2left+ " Columna: " +value2right+ " Error Sintactico No se puede aplicar un operador [*] sobre un Literal."); 
                            RESULT = new Operation(value1, value2, OperationType.MULTIPLICATION);
                        
              CUP$VParser$result = parser.getSymbolFactory().newSymbol("java_message_data1",51, ((java_cup.runtime.Symbol)CUP$VParser$stack.elementAt(CUP$VParser$top-2)), ((java_cup.runtime.Symbol)CUP$VParser$stack.peek()), RESULT);
            }
          return CUP$VParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 157: // java_message_data1 ::= java_message_data1 DIVISION java_message_data2 
            {
              Operation RESULT =null;
		int value1left = ((java_cup.runtime.Symbol)CUP$VParser$stack.elementAt(CUP$VParser$top-2)).left;
		int value1right = ((java_cup.runtime.Symbol)CUP$VParser$stack.elementAt(CUP$VParser$top-2)).right;
		Operation value1 = (Operation)((java_cup.runtime.Symbol) CUP$VParser$stack.elementAt(CUP$VParser$top-2)).value;
		int value2left = ((java_cup.runtime.Symbol)CUP$VParser$stack.peek()).left;
		int value2right = ((java_cup.runtime.Symbol)CUP$VParser$stack.peek()).right;
		Operation value2 = (Operation)((java_cup.runtime.Symbol) CUP$VParser$stack.peek()).value;
		  if(value1.getOperationType() == OperationType.LITERAL) vCompilerFrame.printMessage("Fila: " +value1left+ " Columna: " +value1right+ " Error Sintactico No se puede aplicar un operador [/] sobre un Literal."); 
                            if(value2.getOperationType() == OperationType.LITERAL) vCompilerFrame.printMessage("Fila: " +value2left+ " Columna: " +value2right+ " Error Sintactico No se puede aplicar un operador [/] sobre un Literal."); 
                            RESULT = new Operation(value1, value2, OperationType.DIVISION);
                        
              CUP$VParser$result = parser.getSymbolFactory().newSymbol("java_message_data1",51, ((java_cup.runtime.Symbol)CUP$VParser$stack.elementAt(CUP$VParser$top-2)), ((java_cup.runtime.Symbol)CUP$VParser$stack.peek()), RESULT);
            }
          return CUP$VParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 158: // java_message_data1 ::= java_message_data1 MOD java_message_data2 
            {
              Operation RESULT =null;
		int value1left = ((java_cup.runtime.Symbol)CUP$VParser$stack.elementAt(CUP$VParser$top-2)).left;
		int value1right = ((java_cup.runtime.Symbol)CUP$VParser$stack.elementAt(CUP$VParser$top-2)).right;
		Operation value1 = (Operation)((java_cup.runtime.Symbol) CUP$VParser$stack.elementAt(CUP$VParser$top-2)).value;
		int value2left = ((java_cup.runtime.Symbol)CUP$VParser$stack.peek()).left;
		int value2right = ((java_cup.runtime.Symbol)CUP$VParser$stack.peek()).right;
		Operation value2 = (Operation)((java_cup.runtime.Symbol) CUP$VParser$stack.peek()).value;
		  if(value1.getOperationType() == OperationType.LITERAL) vCompilerFrame.printMessage("Fila: " +value1left+ " Columna: " +value1right+ " Error Sintactico No se puede aplicar un operador [%] sobre un Literal."); 
                            if(value2.getOperationType() == OperationType.LITERAL) vCompilerFrame.printMessage("Fila: " +value2left+ " Columna: " +value2right+ " Error Sintactico No se puede aplicar un operador [%] sobre un Literal."); 
                            RESULT = new Operation(value1, value2, OperationType.MOD); 
                        
              CUP$VParser$result = parser.getSymbolFactory().newSymbol("java_message_data1",51, ((java_cup.runtime.Symbol)CUP$VParser$stack.elementAt(CUP$VParser$top-2)), ((java_cup.runtime.Symbol)CUP$VParser$stack.peek()), RESULT);
            }
          return CUP$VParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 159: // java_message_data1 ::= java_message_data1 MINUS java_message_data2 
            {
              Operation RESULT =null;
		int value1left = ((java_cup.runtime.Symbol)CUP$VParser$stack.elementAt(CUP$VParser$top-2)).left;
		int value1right = ((java_cup.runtime.Symbol)CUP$VParser$stack.elementAt(CUP$VParser$top-2)).right;
		Operation value1 = (Operation)((java_cup.runtime.Symbol) CUP$VParser$stack.elementAt(CUP$VParser$top-2)).value;
		int value2left = ((java_cup.runtime.Symbol)CUP$VParser$stack.peek()).left;
		int value2right = ((java_cup.runtime.Symbol)CUP$VParser$stack.peek()).right;
		Operation value2 = (Operation)((java_cup.runtime.Symbol) CUP$VParser$stack.peek()).value;
		  if(value1.getOperationType() == OperationType.LITERAL) vCompilerFrame.printMessage("Fila: " +value1left+ " Columna: " +value1right+ " Error Sintactico No se puede aplicar un operador [-] sobre un Literal."); 
                            if(value2.getOperationType() == OperationType.LITERAL) vCompilerFrame.printMessage("Fila: " +value2left+ " Columna: " +value2right+ " Error Sintactico No se puede aplicar un operador [-] sobre un Literal."); 
                            RESULT = new Operation(value1, value2, OperationType.SUBTRACTION);
                        
              CUP$VParser$result = parser.getSymbolFactory().newSymbol("java_message_data1",51, ((java_cup.runtime.Symbol)CUP$VParser$stack.elementAt(CUP$VParser$top-2)), ((java_cup.runtime.Symbol)CUP$VParser$stack.peek()), RESULT);
            }
          return CUP$VParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 160: // java_message_data1 ::= java_message_data2 
            {
              Operation RESULT =null;
		int valueleft = ((java_cup.runtime.Symbol)CUP$VParser$stack.peek()).left;
		int valueright = ((java_cup.runtime.Symbol)CUP$VParser$stack.peek()).right;
		Operation value = (Operation)((java_cup.runtime.Symbol) CUP$VParser$stack.peek()).value;
		 RESULT = value; 
              CUP$VParser$result = parser.getSymbolFactory().newSymbol("java_message_data1",51, ((java_cup.runtime.Symbol)CUP$VParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$VParser$stack.peek()), RESULT);
            }
          return CUP$VParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 161: // java_message_data2 ::= PLUS java_message_data2 
            {
              Operation RESULT =null;
		int valueleft = ((java_cup.runtime.Symbol)CUP$VParser$stack.peek()).left;
		int valueright = ((java_cup.runtime.Symbol)CUP$VParser$stack.peek()).right;
		Operation value = (Operation)((java_cup.runtime.Symbol) CUP$VParser$stack.peek()).value;
		  if(value.getOperationType() == OperationType.LITERAL) vCompilerFrame.printMessage("Fila: " +valueleft+ " Columna: " +valueright+ " Error Sintactico No se puede aplicar un operador unario sobre un Literal.");
                            RESULT = new Operation(value, OperationType.PLUS);  
                        
              CUP$VParser$result = parser.getSymbolFactory().newSymbol("java_message_data2",50, ((java_cup.runtime.Symbol)CUP$VParser$stack.elementAt(CUP$VParser$top-1)), ((java_cup.runtime.Symbol)CUP$VParser$stack.peek()), RESULT);
            }
          return CUP$VParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 162: // java_message_data2 ::= MINUS java_message_data2 
            {
              Operation RESULT =null;
		int valueleft = ((java_cup.runtime.Symbol)CUP$VParser$stack.peek()).left;
		int valueright = ((java_cup.runtime.Symbol)CUP$VParser$stack.peek()).right;
		Operation value = (Operation)((java_cup.runtime.Symbol) CUP$VParser$stack.peek()).value;
		 if(value.getOperationType() == OperationType.LITERAL) vCompilerFrame.printMessage("Fila: " +valueleft+ " Columna: " +valueright+ " Error Sintactico No se puede aplicar un operador unario sobre un Literal.");
                            RESULT = new Operation(value, OperationType.MINUS);     
                        
              CUP$VParser$result = parser.getSymbolFactory().newSymbol("java_message_data2",50, ((java_cup.runtime.Symbol)CUP$VParser$stack.elementAt(CUP$VParser$top-1)), ((java_cup.runtime.Symbol)CUP$VParser$stack.peek()), RESULT);
            }
          return CUP$VParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 163: // java_message_data2 ::= PARENTHESISO java_message PARENTHESISC 
            {
              Operation RESULT =null;
		int valueleft = ((java_cup.runtime.Symbol)CUP$VParser$stack.elementAt(CUP$VParser$top-1)).left;
		int valueright = ((java_cup.runtime.Symbol)CUP$VParser$stack.elementAt(CUP$VParser$top-1)).right;
		Operation value = (Operation)((java_cup.runtime.Symbol) CUP$VParser$stack.elementAt(CUP$VParser$top-1)).value;
		 RESULT = value; 
              CUP$VParser$result = parser.getSymbolFactory().newSymbol("java_message_data2",50, ((java_cup.runtime.Symbol)CUP$VParser$stack.elementAt(CUP$VParser$top-2)), ((java_cup.runtime.Symbol)CUP$VParser$stack.peek()), RESULT);
            }
          return CUP$VParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 164: // java_message_data2 ::= INTEGERNUM 
            {
              Operation RESULT =null;
		int valueleft = ((java_cup.runtime.Symbol)CUP$VParser$stack.peek()).left;
		int valueright = ((java_cup.runtime.Symbol)CUP$VParser$stack.peek()).right;
		Integer value = (Integer)((java_cup.runtime.Symbol) CUP$VParser$stack.peek()).value;
		 RESULT = new Operation(value); 
              CUP$VParser$result = parser.getSymbolFactory().newSymbol("java_message_data2",50, ((java_cup.runtime.Symbol)CUP$VParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$VParser$stack.peek()), RESULT);
            }
          return CUP$VParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 165: // java_message_data2 ::= DOUBLENUM 
            {
              Operation RESULT =null;
		int valueleft = ((java_cup.runtime.Symbol)CUP$VParser$stack.peek()).left;
		int valueright = ((java_cup.runtime.Symbol)CUP$VParser$stack.peek()).right;
		Double value = (Double)((java_cup.runtime.Symbol) CUP$VParser$stack.peek()).value;
		 RESULT = new Operation(value); 
              CUP$VParser$result = parser.getSymbolFactory().newSymbol("java_message_data2",50, ((java_cup.runtime.Symbol)CUP$VParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$VParser$stack.peek()), RESULT);
            }
          return CUP$VParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 166: // java_message_data2 ::= ID 
            {
              Operation RESULT =null;
		int varNameleft = ((java_cup.runtime.Symbol)CUP$VParser$stack.peek()).left;
		int varNameright = ((java_cup.runtime.Symbol)CUP$VParser$stack.peek()).right;
		String varName = (String)((java_cup.runtime.Symbol) CUP$VParser$stack.peek()).value;
		 RESULT = new Operation(varName, OperationType.ID, varNameleft, varNameright); 
              CUP$VParser$result = parser.getSymbolFactory().newSymbol("java_message_data2",50, ((java_cup.runtime.Symbol)CUP$VParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$VParser$stack.peek()), RESULT);
            }
          return CUP$VParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 167: // java_message_data2 ::= CHARACTER 
            {
              Operation RESULT =null;
		int valueleft = ((java_cup.runtime.Symbol)CUP$VParser$stack.peek()).left;
		int valueright = ((java_cup.runtime.Symbol)CUP$VParser$stack.peek()).right;
		char value = (char)((java_cup.runtime.Symbol) CUP$VParser$stack.peek()).value;
		 RESULT = new Operation(value); 
              CUP$VParser$result = parser.getSymbolFactory().newSymbol("java_message_data2",50, ((java_cup.runtime.Symbol)CUP$VParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$VParser$stack.peek()), RESULT);
            }
          return CUP$VParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 168: // java_message_data2 ::= LITERAL 
            {
              Operation RESULT =null;
		int valueleft = ((java_cup.runtime.Symbol)CUP$VParser$stack.peek()).left;
		int valueright = ((java_cup.runtime.Symbol)CUP$VParser$stack.peek()).right;
		String value = (String)((java_cup.runtime.Symbol) CUP$VParser$stack.peek()).value;
		 RESULT = new Operation(value, OperationType.LITERAL, valueleft, valueright); 
              CUP$VParser$result = parser.getSymbolFactory().newSymbol("java_message_data2",50, ((java_cup.runtime.Symbol)CUP$VParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$VParser$stack.peek()), RESULT);
            }
          return CUP$VParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 169: // java_data_request ::= INTINPUT PARENTHESISO LITERAL PARENTHESISC SEMICOLON 
            {
              Instruction RESULT =null;
		int valueleft = ((java_cup.runtime.Symbol)CUP$VParser$stack.elementAt(CUP$VParser$top-2)).left;
		int valueright = ((java_cup.runtime.Symbol)CUP$VParser$stack.elementAt(CUP$VParser$top-2)).right;
		String value = (String)((java_cup.runtime.Symbol) CUP$VParser$stack.elementAt(CUP$VParser$top-2)).value;
		 RESULT = new Input(Type.INT, new Print(new Operation(value, OperationType.LITERAL, valueleft, valueright), PrintType.PRINT)); 
              CUP$VParser$result = parser.getSymbolFactory().newSymbol("java_data_request",28, ((java_cup.runtime.Symbol)CUP$VParser$stack.elementAt(CUP$VParser$top-4)), ((java_cup.runtime.Symbol)CUP$VParser$stack.peek()), RESULT);
            }
          return CUP$VParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 170: // java_data_request ::= FLOATINPUT PARENTHESISO LITERAL PARENTHESISC SEMICOLON 
            {
              Instruction RESULT =null;
		int valueleft = ((java_cup.runtime.Symbol)CUP$VParser$stack.elementAt(CUP$VParser$top-2)).left;
		int valueright = ((java_cup.runtime.Symbol)CUP$VParser$stack.elementAt(CUP$VParser$top-2)).right;
		String value = (String)((java_cup.runtime.Symbol) CUP$VParser$stack.elementAt(CUP$VParser$top-2)).value;
		 RESULT = new Input(Type.FLOAT, new Print(new Operation(value, OperationType.LITERAL, valueleft, valueright), PrintType.PRINT)); 
              CUP$VParser$result = parser.getSymbolFactory().newSymbol("java_data_request",28, ((java_cup.runtime.Symbol)CUP$VParser$stack.elementAt(CUP$VParser$top-4)), ((java_cup.runtime.Symbol)CUP$VParser$stack.peek()), RESULT);
            }
          return CUP$VParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 171: // java_data_request ::= CHARINPUT PARENTHESISO LITERAL PARENTHESISC SEMICOLON 
            {
              Instruction RESULT =null;
		int valueleft = ((java_cup.runtime.Symbol)CUP$VParser$stack.elementAt(CUP$VParser$top-2)).left;
		int valueright = ((java_cup.runtime.Symbol)CUP$VParser$stack.elementAt(CUP$VParser$top-2)).right;
		String value = (String)((java_cup.runtime.Symbol) CUP$VParser$stack.elementAt(CUP$VParser$top-2)).value;
		 RESULT = new Input(Type.CHAR, new Print(new Operation(value, OperationType.LITERAL, valueleft, valueright), PrintType.PRINT)); 
              CUP$VParser$result = parser.getSymbolFactory().newSymbol("java_data_request",28, ((java_cup.runtime.Symbol)CUP$VParser$stack.elementAt(CUP$VParser$top-4)), ((java_cup.runtime.Symbol)CUP$VParser$stack.peek()), RESULT);
            }
          return CUP$VParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 172: // java_data_request ::= INTINPUT SEMICOLON 
            {
              Instruction RESULT =null;
		 RESULT = new Input(Type.INT); 
              CUP$VParser$result = parser.getSymbolFactory().newSymbol("java_data_request",28, ((java_cup.runtime.Symbol)CUP$VParser$stack.elementAt(CUP$VParser$top-1)), ((java_cup.runtime.Symbol)CUP$VParser$stack.peek()), RESULT);
            }
          return CUP$VParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 173: // java_data_request ::= FLOATINPUT SEMICOLON 
            {
              Instruction RESULT =null;
		 RESULT = new Input(Type.FLOAT); 
              CUP$VParser$result = parser.getSymbolFactory().newSymbol("java_data_request",28, ((java_cup.runtime.Symbol)CUP$VParser$stack.elementAt(CUP$VParser$top-1)), ((java_cup.runtime.Symbol)CUP$VParser$stack.peek()), RESULT);
            }
          return CUP$VParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 174: // java_data_request ::= CHARINPUT SEMICOLON 
            {
              Instruction RESULT =null;
		 RESULT = new Input(Type.CHAR); 
              CUP$VParser$result = parser.getSymbolFactory().newSymbol("java_data_request",28, ((java_cup.runtime.Symbol)CUP$VParser$stack.elementAt(CUP$VParser$top-1)), ((java_cup.runtime.Symbol)CUP$VParser$stack.peek()), RESULT);
            }
          return CUP$VParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 175: // c_code ::= c_code_imports c_global_statements c_main 
            {
              LinkedList<Instruction> RESULT =null;
		int importsleft = ((java_cup.runtime.Symbol)CUP$VParser$stack.elementAt(CUP$VParser$top-2)).left;
		int importsright = ((java_cup.runtime.Symbol)CUP$VParser$stack.elementAt(CUP$VParser$top-2)).right;
		LinkedList<Instruction> imports = (LinkedList<Instruction>)((java_cup.runtime.Symbol) CUP$VParser$stack.elementAt(CUP$VParser$top-2)).value;
		int globalStatementsleft = ((java_cup.runtime.Symbol)CUP$VParser$stack.elementAt(CUP$VParser$top-1)).left;
		int globalStatementsright = ((java_cup.runtime.Symbol)CUP$VParser$stack.elementAt(CUP$VParser$top-1)).right;
		LinkedList<Instruction> globalStatements = (LinkedList<Instruction>)((java_cup.runtime.Symbol) CUP$VParser$stack.elementAt(CUP$VParser$top-1)).value;
		int instructionsleft = ((java_cup.runtime.Symbol)CUP$VParser$stack.peek()).left;
		int instructionsright = ((java_cup.runtime.Symbol)CUP$VParser$stack.peek()).right;
		LinkedList<Instruction> instructions = (LinkedList<Instruction>)((java_cup.runtime.Symbol) CUP$VParser$stack.peek()).value;
		 instructions.addAll(0, globalStatements); instructions.addAll(0, imports); RESULT = instructions; 
              CUP$VParser$result = parser.getSymbolFactory().newSymbol("c_code",64, ((java_cup.runtime.Symbol)CUP$VParser$stack.elementAt(CUP$VParser$top-2)), ((java_cup.runtime.Symbol)CUP$VParser$stack.peek()), RESULT);
            }
          return CUP$VParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 176: // c_code_imports ::= INCLUDE VB_INCLUDE c_code_imports 
            {
              LinkedList<Instruction> RESULT =null;
		int includeleft = ((java_cup.runtime.Symbol)CUP$VParser$stack.elementAt(CUP$VParser$top-1)).left;
		int includeright = ((java_cup.runtime.Symbol)CUP$VParser$stack.elementAt(CUP$VParser$top-1)).right;
		Object include = (Object)((java_cup.runtime.Symbol) CUP$VParser$stack.elementAt(CUP$VParser$top-1)).value;
		int instructionsListleft = ((java_cup.runtime.Symbol)CUP$VParser$stack.peek()).left;
		int instructionsListright = ((java_cup.runtime.Symbol)CUP$VParser$stack.peek()).right;
		LinkedList<Instruction> instructionsList = (LinkedList<Instruction>)((java_cup.runtime.Symbol) CUP$VParser$stack.peek()).value;
		 instructionsList.addFirst(new Import(ImportType.VISUAL_BASIC, includeleft, includeright)); RESULT = instructionsList; 
              CUP$VParser$result = parser.getSymbolFactory().newSymbol("c_code_imports",65, ((java_cup.runtime.Symbol)CUP$VParser$stack.elementAt(CUP$VParser$top-2)), ((java_cup.runtime.Symbol)CUP$VParser$stack.peek()), RESULT);
            }
          return CUP$VParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 177: // c_code_imports ::= INCLUDE PY_INCLUDE c_code_imports 
            {
              LinkedList<Instruction> RESULT =null;
		int includeleft = ((java_cup.runtime.Symbol)CUP$VParser$stack.elementAt(CUP$VParser$top-1)).left;
		int includeright = ((java_cup.runtime.Symbol)CUP$VParser$stack.elementAt(CUP$VParser$top-1)).right;
		Object include = (Object)((java_cup.runtime.Symbol) CUP$VParser$stack.elementAt(CUP$VParser$top-1)).value;
		int instructionsListleft = ((java_cup.runtime.Symbol)CUP$VParser$stack.peek()).left;
		int instructionsListright = ((java_cup.runtime.Symbol)CUP$VParser$stack.peek()).right;
		LinkedList<Instruction> instructionsList = (LinkedList<Instruction>)((java_cup.runtime.Symbol) CUP$VParser$stack.peek()).value;
		 instructionsList.addFirst(new Import(ImportType.PHYTON, includeleft, includeright)); RESULT = instructionsList; 
              CUP$VParser$result = parser.getSymbolFactory().newSymbol("c_code_imports",65, ((java_cup.runtime.Symbol)CUP$VParser$stack.elementAt(CUP$VParser$top-2)), ((java_cup.runtime.Symbol)CUP$VParser$stack.peek()), RESULT);
            }
          return CUP$VParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 178: // c_code_imports ::= INCLUDE J_INCLUDE c_code_imports 
            {
              LinkedList<Instruction> RESULT =null;
		int idleft = ((java_cup.runtime.Symbol)CUP$VParser$stack.elementAt(CUP$VParser$top-1)).left;
		int idright = ((java_cup.runtime.Symbol)CUP$VParser$stack.elementAt(CUP$VParser$top-1)).right;
		String id = (String)((java_cup.runtime.Symbol) CUP$VParser$stack.elementAt(CUP$VParser$top-1)).value;
		int instructionsListleft = ((java_cup.runtime.Symbol)CUP$VParser$stack.peek()).left;
		int instructionsListright = ((java_cup.runtime.Symbol)CUP$VParser$stack.peek()).right;
		LinkedList<Instruction> instructionsList = (LinkedList<Instruction>)((java_cup.runtime.Symbol) CUP$VParser$stack.peek()).value;
		 instructionsList.addFirst(new Import(ImportType.JAVA_CLASS, id.replaceAll("\"", "").replaceAll("JAVA.", ""), idleft, idright)); RESULT = instructionsList; 
              CUP$VParser$result = parser.getSymbolFactory().newSymbol("c_code_imports",65, ((java_cup.runtime.Symbol)CUP$VParser$stack.elementAt(CUP$VParser$top-2)), ((java_cup.runtime.Symbol)CUP$VParser$stack.peek()), RESULT);
            }
          return CUP$VParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 179: // c_code_imports ::= INCLUDE J_INCLUDE_ALL c_code_imports 
            {
              LinkedList<Instruction> RESULT =null;
		int includeleft = ((java_cup.runtime.Symbol)CUP$VParser$stack.elementAt(CUP$VParser$top-1)).left;
		int includeright = ((java_cup.runtime.Symbol)CUP$VParser$stack.elementAt(CUP$VParser$top-1)).right;
		Object include = (Object)((java_cup.runtime.Symbol) CUP$VParser$stack.elementAt(CUP$VParser$top-1)).value;
		int instructionsListleft = ((java_cup.runtime.Symbol)CUP$VParser$stack.peek()).left;
		int instructionsListright = ((java_cup.runtime.Symbol)CUP$VParser$stack.peek()).right;
		LinkedList<Instruction> instructionsList = (LinkedList<Instruction>)((java_cup.runtime.Symbol) CUP$VParser$stack.peek()).value;
		 instructionsList.addFirst(new Import(ImportType.JAVA_ALL, includeleft, includeright)); RESULT = instructionsList; 
              CUP$VParser$result = parser.getSymbolFactory().newSymbol("c_code_imports",65, ((java_cup.runtime.Symbol)CUP$VParser$stack.elementAt(CUP$VParser$top-2)), ((java_cup.runtime.Symbol)CUP$VParser$stack.peek()), RESULT);
            }
          return CUP$VParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 180: // c_code_imports ::= INCLUDE LESSTHAN ID FULLSTOP ID GREATERTHAN c_code_imports 
            {
              LinkedList<Instruction> RESULT =null;
		int id1left = ((java_cup.runtime.Symbol)CUP$VParser$stack.elementAt(CUP$VParser$top-4)).left;
		int id1right = ((java_cup.runtime.Symbol)CUP$VParser$stack.elementAt(CUP$VParser$top-4)).right;
		String id1 = (String)((java_cup.runtime.Symbol) CUP$VParser$stack.elementAt(CUP$VParser$top-4)).value;
		int id2left = ((java_cup.runtime.Symbol)CUP$VParser$stack.elementAt(CUP$VParser$top-2)).left;
		int id2right = ((java_cup.runtime.Symbol)CUP$VParser$stack.elementAt(CUP$VParser$top-2)).right;
		String id2 = (String)((java_cup.runtime.Symbol) CUP$VParser$stack.elementAt(CUP$VParser$top-2)).value;
		int instructionsListleft = ((java_cup.runtime.Symbol)CUP$VParser$stack.peek()).left;
		int instructionsListright = ((java_cup.runtime.Symbol)CUP$VParser$stack.peek()).right;
		LinkedList<Instruction> instructionsList = (LinkedList<Instruction>)((java_cup.runtime.Symbol) CUP$VParser$stack.peek()).value;
		 instructionsList.addFirst(new Import(ImportType.C_LIBRARY, id1+"."+id2, id1left, id1right)); RESULT = instructionsList; 
              CUP$VParser$result = parser.getSymbolFactory().newSymbol("c_code_imports",65, ((java_cup.runtime.Symbol)CUP$VParser$stack.elementAt(CUP$VParser$top-6)), ((java_cup.runtime.Symbol)CUP$VParser$stack.peek()), RESULT);
            }
          return CUP$VParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 181: // c_code_imports ::= INCLUDE LITERAL c_code_imports 
            {
              LinkedList<Instruction> RESULT =null;
		int idleft = ((java_cup.runtime.Symbol)CUP$VParser$stack.elementAt(CUP$VParser$top-1)).left;
		int idright = ((java_cup.runtime.Symbol)CUP$VParser$stack.elementAt(CUP$VParser$top-1)).right;
		String id = (String)((java_cup.runtime.Symbol) CUP$VParser$stack.elementAt(CUP$VParser$top-1)).value;
		int instructionsListleft = ((java_cup.runtime.Symbol)CUP$VParser$stack.peek()).left;
		int instructionsListright = ((java_cup.runtime.Symbol)CUP$VParser$stack.peek()).right;
		LinkedList<Instruction> instructionsList = (LinkedList<Instruction>)((java_cup.runtime.Symbol) CUP$VParser$stack.peek()).value;
		 instructionsList.addFirst(new Import(ImportType.C_FILE, id.replaceAll("\"", ""), idleft, idright)); RESULT = instructionsList; 
              CUP$VParser$result = parser.getSymbolFactory().newSymbol("c_code_imports",65, ((java_cup.runtime.Symbol)CUP$VParser$stack.elementAt(CUP$VParser$top-2)), ((java_cup.runtime.Symbol)CUP$VParser$stack.peek()), RESULT);
            }
          return CUP$VParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 182: // c_code_imports ::= 
            {
              LinkedList<Instruction> RESULT =null;
		 RESULT = new LinkedList<Instruction>(); 
              CUP$VParser$result = parser.getSymbolFactory().newSymbol("c_code_imports",65, ((java_cup.runtime.Symbol)CUP$VParser$stack.peek()), RESULT);
            }
          return CUP$VParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 183: // c_global_statements ::= CONST c_data_type ID EQUALS arithmetic_op SEMICOLON c_global_statements 
            {
              LinkedList<Instruction> RESULT =null;
		int dataTypeleft = ((java_cup.runtime.Symbol)CUP$VParser$stack.elementAt(CUP$VParser$top-5)).left;
		int dataTyperight = ((java_cup.runtime.Symbol)CUP$VParser$stack.elementAt(CUP$VParser$top-5)).right;
		Type dataType = (Type)((java_cup.runtime.Symbol) CUP$VParser$stack.elementAt(CUP$VParser$top-5)).value;
		int varNameleft = ((java_cup.runtime.Symbol)CUP$VParser$stack.elementAt(CUP$VParser$top-4)).left;
		int varNameright = ((java_cup.runtime.Symbol)CUP$VParser$stack.elementAt(CUP$VParser$top-4)).right;
		String varName = (String)((java_cup.runtime.Symbol) CUP$VParser$stack.elementAt(CUP$VParser$top-4)).value;
		int valueleft = ((java_cup.runtime.Symbol)CUP$VParser$stack.elementAt(CUP$VParser$top-2)).left;
		int valueright = ((java_cup.runtime.Symbol)CUP$VParser$stack.elementAt(CUP$VParser$top-2)).right;
		Operation value = (Operation)((java_cup.runtime.Symbol) CUP$VParser$stack.elementAt(CUP$VParser$top-2)).value;
		int instructionsListleft = ((java_cup.runtime.Symbol)CUP$VParser$stack.peek()).left;
		int instructionsListright = ((java_cup.runtime.Symbol)CUP$VParser$stack.peek()).right;
		LinkedList<Instruction> instructionsList = (LinkedList<Instruction>)((java_cup.runtime.Symbol) CUP$VParser$stack.peek()).value;
		 instructionsList.addFirst(new Assignment(varName, value, varNameleft, varNameright)); instructionsList.addFirst(new Declaration(varName, dataType, Role.CONSTANT, varNameleft, varNameright)); RESULT = instructionsList; 
              CUP$VParser$result = parser.getSymbolFactory().newSymbol("c_global_statements",59, ((java_cup.runtime.Symbol)CUP$VParser$stack.elementAt(CUP$VParser$top-6)), ((java_cup.runtime.Symbol)CUP$VParser$stack.peek()), RESULT);
            }
          return CUP$VParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 184: // c_global_statements ::= c_declaration c_global_statements 
            {
              LinkedList<Instruction> RESULT =null;
		int instructionsleft = ((java_cup.runtime.Symbol)CUP$VParser$stack.elementAt(CUP$VParser$top-1)).left;
		int instructionsright = ((java_cup.runtime.Symbol)CUP$VParser$stack.elementAt(CUP$VParser$top-1)).right;
		LinkedList<Instruction> instructions = (LinkedList<Instruction>)((java_cup.runtime.Symbol) CUP$VParser$stack.elementAt(CUP$VParser$top-1)).value;
		int instructionsListleft = ((java_cup.runtime.Symbol)CUP$VParser$stack.peek()).left;
		int instructionsListright = ((java_cup.runtime.Symbol)CUP$VParser$stack.peek()).right;
		LinkedList<Instruction> instructionsList = (LinkedList<Instruction>)((java_cup.runtime.Symbol) CUP$VParser$stack.peek()).value;
		 instructionsList.addAll(0, instructions); RESULT = instructionsList; 
              CUP$VParser$result = parser.getSymbolFactory().newSymbol("c_global_statements",59, ((java_cup.runtime.Symbol)CUP$VParser$stack.elementAt(CUP$VParser$top-1)), ((java_cup.runtime.Symbol)CUP$VParser$stack.peek()), RESULT);
            }
          return CUP$VParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 185: // c_global_statements ::= c_declaration_assignment c_global_statements 
            {
              LinkedList<Instruction> RESULT =null;
		int instructionsleft = ((java_cup.runtime.Symbol)CUP$VParser$stack.elementAt(CUP$VParser$top-1)).left;
		int instructionsright = ((java_cup.runtime.Symbol)CUP$VParser$stack.elementAt(CUP$VParser$top-1)).right;
		LinkedList<Instruction> instructions = (LinkedList<Instruction>)((java_cup.runtime.Symbol) CUP$VParser$stack.elementAt(CUP$VParser$top-1)).value;
		int instructionsListleft = ((java_cup.runtime.Symbol)CUP$VParser$stack.peek()).left;
		int instructionsListright = ((java_cup.runtime.Symbol)CUP$VParser$stack.peek()).right;
		LinkedList<Instruction> instructionsList = (LinkedList<Instruction>)((java_cup.runtime.Symbol) CUP$VParser$stack.peek()).value;
		 instructionsList.addAll(0, instructions); RESULT = instructionsList; 
              CUP$VParser$result = parser.getSymbolFactory().newSymbol("c_global_statements",59, ((java_cup.runtime.Symbol)CUP$VParser$stack.elementAt(CUP$VParser$top-1)), ((java_cup.runtime.Symbol)CUP$VParser$stack.peek()), RESULT);
            }
          return CUP$VParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 186: // c_global_statements ::= c_assignment c_global_statements 
            {
              LinkedList<Instruction> RESULT =null;
		int instructionleft = ((java_cup.runtime.Symbol)CUP$VParser$stack.elementAt(CUP$VParser$top-1)).left;
		int instructionright = ((java_cup.runtime.Symbol)CUP$VParser$stack.elementAt(CUP$VParser$top-1)).right;
		Instruction instruction = (Instruction)((java_cup.runtime.Symbol) CUP$VParser$stack.elementAt(CUP$VParser$top-1)).value;
		int instructionsListleft = ((java_cup.runtime.Symbol)CUP$VParser$stack.peek()).left;
		int instructionsListright = ((java_cup.runtime.Symbol)CUP$VParser$stack.peek()).right;
		LinkedList<Instruction> instructionsList = (LinkedList<Instruction>)((java_cup.runtime.Symbol) CUP$VParser$stack.peek()).value;
		 instructionsList.addFirst(instruction); RESULT = instructionsList; 
              CUP$VParser$result = parser.getSymbolFactory().newSymbol("c_global_statements",59, ((java_cup.runtime.Symbol)CUP$VParser$stack.elementAt(CUP$VParser$top-1)), ((java_cup.runtime.Symbol)CUP$VParser$stack.peek()), RESULT);
            }
          return CUP$VParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 187: // c_global_statements ::= 
            {
              LinkedList<Instruction> RESULT =null;
		 RESULT = new LinkedList<Instruction>(); 
              CUP$VParser$result = parser.getSymbolFactory().newSymbol("c_global_statements",59, ((java_cup.runtime.Symbol)CUP$VParser$stack.peek()), RESULT);
            }
          return CUP$VParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 188: // c_main ::= VOID MAIN PARENTHESISO PARENTHESISC CURLYBRACKETO c_code_statements CURLYBRACKETC 
            {
              LinkedList<Instruction> RESULT =null;
		int mainleft = ((java_cup.runtime.Symbol)CUP$VParser$stack.elementAt(CUP$VParser$top-5)).left;
		int mainright = ((java_cup.runtime.Symbol)CUP$VParser$stack.elementAt(CUP$VParser$top-5)).right;
		Object main = (Object)((java_cup.runtime.Symbol) CUP$VParser$stack.elementAt(CUP$VParser$top-5)).value;
		int instructionsleft = ((java_cup.runtime.Symbol)CUP$VParser$stack.elementAt(CUP$VParser$top-1)).left;
		int instructionsright = ((java_cup.runtime.Symbol)CUP$VParser$stack.elementAt(CUP$VParser$top-1)).right;
		LinkedList<Instruction> instructions = (LinkedList<Instruction>)((java_cup.runtime.Symbol) CUP$VParser$stack.elementAt(CUP$VParser$top-1)).value;
		 RESULT = new LinkedList<Instruction>(); RESULT.add(new Method(AccessModifier.DEFAULT, Type.VOID, "main", instructions, mainleft, mainright)); 
              CUP$VParser$result = parser.getSymbolFactory().newSymbol("c_main",63, ((java_cup.runtime.Symbol)CUP$VParser$stack.elementAt(CUP$VParser$top-6)), ((java_cup.runtime.Symbol)CUP$VParser$stack.peek()), RESULT);
            }
          return CUP$VParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 189: // c_code_statements ::= c_declaration c_code_statements 
            {
              LinkedList<Instruction> RESULT =null;
		int instructionsleft = ((java_cup.runtime.Symbol)CUP$VParser$stack.elementAt(CUP$VParser$top-1)).left;
		int instructionsright = ((java_cup.runtime.Symbol)CUP$VParser$stack.elementAt(CUP$VParser$top-1)).right;
		LinkedList<Instruction> instructions = (LinkedList<Instruction>)((java_cup.runtime.Symbol) CUP$VParser$stack.elementAt(CUP$VParser$top-1)).value;
		int instructionsListleft = ((java_cup.runtime.Symbol)CUP$VParser$stack.peek()).left;
		int instructionsListright = ((java_cup.runtime.Symbol)CUP$VParser$stack.peek()).right;
		LinkedList<Instruction> instructionsList = (LinkedList<Instruction>)((java_cup.runtime.Symbol) CUP$VParser$stack.peek()).value;
		 instructionsList.addAll(0, instructions); RESULT = instructionsList; 
              CUP$VParser$result = parser.getSymbolFactory().newSymbol("c_code_statements",60, ((java_cup.runtime.Symbol)CUP$VParser$stack.elementAt(CUP$VParser$top-1)), ((java_cup.runtime.Symbol)CUP$VParser$stack.peek()), RESULT);
            }
          return CUP$VParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 190: // c_code_statements ::= c_declaration_assignment c_code_statements 
            {
              LinkedList<Instruction> RESULT =null;
		int instructionsleft = ((java_cup.runtime.Symbol)CUP$VParser$stack.elementAt(CUP$VParser$top-1)).left;
		int instructionsright = ((java_cup.runtime.Symbol)CUP$VParser$stack.elementAt(CUP$VParser$top-1)).right;
		LinkedList<Instruction> instructions = (LinkedList<Instruction>)((java_cup.runtime.Symbol) CUP$VParser$stack.elementAt(CUP$VParser$top-1)).value;
		int instructionsListleft = ((java_cup.runtime.Symbol)CUP$VParser$stack.peek()).left;
		int instructionsListright = ((java_cup.runtime.Symbol)CUP$VParser$stack.peek()).right;
		LinkedList<Instruction> instructionsList = (LinkedList<Instruction>)((java_cup.runtime.Symbol) CUP$VParser$stack.peek()).value;
		 instructionsList.addAll(0, instructions); RESULT = instructionsList; 
              CUP$VParser$result = parser.getSymbolFactory().newSymbol("c_code_statements",60, ((java_cup.runtime.Symbol)CUP$VParser$stack.elementAt(CUP$VParser$top-1)), ((java_cup.runtime.Symbol)CUP$VParser$stack.peek()), RESULT);
            }
          return CUP$VParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 191: // c_code_statements ::= c_assignment c_code_statements 
            {
              LinkedList<Instruction> RESULT =null;
		int instructionleft = ((java_cup.runtime.Symbol)CUP$VParser$stack.elementAt(CUP$VParser$top-1)).left;
		int instructionright = ((java_cup.runtime.Symbol)CUP$VParser$stack.elementAt(CUP$VParser$top-1)).right;
		Instruction instruction = (Instruction)((java_cup.runtime.Symbol) CUP$VParser$stack.elementAt(CUP$VParser$top-1)).value;
		int instructionsListleft = ((java_cup.runtime.Symbol)CUP$VParser$stack.peek()).left;
		int instructionsListright = ((java_cup.runtime.Symbol)CUP$VParser$stack.peek()).right;
		LinkedList<Instruction> instructionsList = (LinkedList<Instruction>)((java_cup.runtime.Symbol) CUP$VParser$stack.peek()).value;
		 instructionsList.addFirst(instruction); RESULT = instructionsList; 
              CUP$VParser$result = parser.getSymbolFactory().newSymbol("c_code_statements",60, ((java_cup.runtime.Symbol)CUP$VParser$stack.elementAt(CUP$VParser$top-1)), ((java_cup.runtime.Symbol)CUP$VParser$stack.peek()), RESULT);
            }
          return CUP$VParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 192: // c_code_statements ::= c_while c_code_statements 
            {
              LinkedList<Instruction> RESULT =null;
		int instructionleft = ((java_cup.runtime.Symbol)CUP$VParser$stack.elementAt(CUP$VParser$top-1)).left;
		int instructionright = ((java_cup.runtime.Symbol)CUP$VParser$stack.elementAt(CUP$VParser$top-1)).right;
		Instruction instruction = (Instruction)((java_cup.runtime.Symbol) CUP$VParser$stack.elementAt(CUP$VParser$top-1)).value;
		int instructionsListleft = ((java_cup.runtime.Symbol)CUP$VParser$stack.peek()).left;
		int instructionsListright = ((java_cup.runtime.Symbol)CUP$VParser$stack.peek()).right;
		LinkedList<Instruction> instructionsList = (LinkedList<Instruction>)((java_cup.runtime.Symbol) CUP$VParser$stack.peek()).value;
		 instructionsList.addFirst(instruction); RESULT = instructionsList; 
              CUP$VParser$result = parser.getSymbolFactory().newSymbol("c_code_statements",60, ((java_cup.runtime.Symbol)CUP$VParser$stack.elementAt(CUP$VParser$top-1)), ((java_cup.runtime.Symbol)CUP$VParser$stack.peek()), RESULT);
            }
          return CUP$VParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 193: // c_code_statements ::= c_do_while c_code_statements 
            {
              LinkedList<Instruction> RESULT =null;
		int instructionleft = ((java_cup.runtime.Symbol)CUP$VParser$stack.elementAt(CUP$VParser$top-1)).left;
		int instructionright = ((java_cup.runtime.Symbol)CUP$VParser$stack.elementAt(CUP$VParser$top-1)).right;
		Instruction instruction = (Instruction)((java_cup.runtime.Symbol) CUP$VParser$stack.elementAt(CUP$VParser$top-1)).value;
		int instructionsListleft = ((java_cup.runtime.Symbol)CUP$VParser$stack.peek()).left;
		int instructionsListright = ((java_cup.runtime.Symbol)CUP$VParser$stack.peek()).right;
		LinkedList<Instruction> instructionsList = (LinkedList<Instruction>)((java_cup.runtime.Symbol) CUP$VParser$stack.peek()).value;
		 instructionsList.addFirst(instruction); RESULT = instructionsList; 
              CUP$VParser$result = parser.getSymbolFactory().newSymbol("c_code_statements",60, ((java_cup.runtime.Symbol)CUP$VParser$stack.elementAt(CUP$VParser$top-1)), ((java_cup.runtime.Symbol)CUP$VParser$stack.peek()), RESULT);
            }
          return CUP$VParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 194: // c_code_statements ::= c_for c_code_statements 
            {
              LinkedList<Instruction> RESULT =null;
		int instructionleft = ((java_cup.runtime.Symbol)CUP$VParser$stack.elementAt(CUP$VParser$top-1)).left;
		int instructionright = ((java_cup.runtime.Symbol)CUP$VParser$stack.elementAt(CUP$VParser$top-1)).right;
		Instruction instruction = (Instruction)((java_cup.runtime.Symbol) CUP$VParser$stack.elementAt(CUP$VParser$top-1)).value;
		int instructionsListleft = ((java_cup.runtime.Symbol)CUP$VParser$stack.peek()).left;
		int instructionsListright = ((java_cup.runtime.Symbol)CUP$VParser$stack.peek()).right;
		LinkedList<Instruction> instructionsList = (LinkedList<Instruction>)((java_cup.runtime.Symbol) CUP$VParser$stack.peek()).value;
		 instructionsList.addFirst(instruction); RESULT = instructionsList; 
              CUP$VParser$result = parser.getSymbolFactory().newSymbol("c_code_statements",60, ((java_cup.runtime.Symbol)CUP$VParser$stack.elementAt(CUP$VParser$top-1)), ((java_cup.runtime.Symbol)CUP$VParser$stack.peek()), RESULT);
            }
          return CUP$VParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 195: // c_code_statements ::= c_if c_code_statements 
            {
              LinkedList<Instruction> RESULT =null;
		int instructionleft = ((java_cup.runtime.Symbol)CUP$VParser$stack.elementAt(CUP$VParser$top-1)).left;
		int instructionright = ((java_cup.runtime.Symbol)CUP$VParser$stack.elementAt(CUP$VParser$top-1)).right;
		Instruction instruction = (Instruction)((java_cup.runtime.Symbol) CUP$VParser$stack.elementAt(CUP$VParser$top-1)).value;
		int instructionsListleft = ((java_cup.runtime.Symbol)CUP$VParser$stack.peek()).left;
		int instructionsListright = ((java_cup.runtime.Symbol)CUP$VParser$stack.peek()).right;
		LinkedList<Instruction> instructionsList = (LinkedList<Instruction>)((java_cup.runtime.Symbol) CUP$VParser$stack.peek()).value;
		 instructionsList.addFirst(instruction); RESULT = instructionsList; 
              CUP$VParser$result = parser.getSymbolFactory().newSymbol("c_code_statements",60, ((java_cup.runtime.Symbol)CUP$VParser$stack.elementAt(CUP$VParser$top-1)), ((java_cup.runtime.Symbol)CUP$VParser$stack.peek()), RESULT);
            }
          return CUP$VParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 196: // c_code_statements ::= c_screen_messages c_code_statements 
            {
              LinkedList<Instruction> RESULT =null;
		int instructionleft = ((java_cup.runtime.Symbol)CUP$VParser$stack.elementAt(CUP$VParser$top-1)).left;
		int instructionright = ((java_cup.runtime.Symbol)CUP$VParser$stack.elementAt(CUP$VParser$top-1)).right;
		Instruction instruction = (Instruction)((java_cup.runtime.Symbol) CUP$VParser$stack.elementAt(CUP$VParser$top-1)).value;
		int instructionsListleft = ((java_cup.runtime.Symbol)CUP$VParser$stack.peek()).left;
		int instructionsListright = ((java_cup.runtime.Symbol)CUP$VParser$stack.peek()).right;
		LinkedList<Instruction> instructionsList = (LinkedList<Instruction>)((java_cup.runtime.Symbol) CUP$VParser$stack.peek()).value;
		 instructionsList.addFirst(instruction); RESULT = instructionsList; 
              CUP$VParser$result = parser.getSymbolFactory().newSymbol("c_code_statements",60, ((java_cup.runtime.Symbol)CUP$VParser$stack.elementAt(CUP$VParser$top-1)), ((java_cup.runtime.Symbol)CUP$VParser$stack.peek()), RESULT);
            }
          return CUP$VParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 197: // c_code_statements ::= c_switch c_code_statements 
            {
              LinkedList<Instruction> RESULT =null;
		int instructionleft = ((java_cup.runtime.Symbol)CUP$VParser$stack.elementAt(CUP$VParser$top-1)).left;
		int instructionright = ((java_cup.runtime.Symbol)CUP$VParser$stack.elementAt(CUP$VParser$top-1)).right;
		Instruction instruction = (Instruction)((java_cup.runtime.Symbol) CUP$VParser$stack.elementAt(CUP$VParser$top-1)).value;
		int instructionsListleft = ((java_cup.runtime.Symbol)CUP$VParser$stack.peek()).left;
		int instructionsListright = ((java_cup.runtime.Symbol)CUP$VParser$stack.peek()).right;
		LinkedList<Instruction> instructionsList = (LinkedList<Instruction>)((java_cup.runtime.Symbol) CUP$VParser$stack.peek()).value;
		 instructionsList.addFirst(instruction); RESULT = instructionsList; 
              CUP$VParser$result = parser.getSymbolFactory().newSymbol("c_code_statements",60, ((java_cup.runtime.Symbol)CUP$VParser$stack.elementAt(CUP$VParser$top-1)), ((java_cup.runtime.Symbol)CUP$VParser$stack.peek()), RESULT);
            }
          return CUP$VParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 198: // c_code_statements ::= c_scanf 
            {
              LinkedList<Instruction> RESULT =null;

              CUP$VParser$result = parser.getSymbolFactory().newSymbol("c_code_statements",60, ((java_cup.runtime.Symbol)CUP$VParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$VParser$stack.peek()), RESULT);
            }
          return CUP$VParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 199: // c_code_statements ::= c_clrscr 
            {
              LinkedList<Instruction> RESULT =null;

              CUP$VParser$result = parser.getSymbolFactory().newSymbol("c_code_statements",60, ((java_cup.runtime.Symbol)CUP$VParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$VParser$stack.peek()), RESULT);
            }
          return CUP$VParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 200: // c_code_statements ::= c_getch 
            {
              LinkedList<Instruction> RESULT =null;

              CUP$VParser$result = parser.getSymbolFactory().newSymbol("c_code_statements",60, ((java_cup.runtime.Symbol)CUP$VParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$VParser$stack.peek()), RESULT);
            }
          return CUP$VParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 201: // c_code_statements ::= 
            {
              LinkedList<Instruction> RESULT =null;
		 RESULT = new LinkedList<Instruction>(); 
              CUP$VParser$result = parser.getSymbolFactory().newSymbol("c_code_statements",60, ((java_cup.runtime.Symbol)CUP$VParser$stack.peek()), RESULT);
            }
          return CUP$VParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 202: // c_declaration ::= c_data_type ID COMMA c_var_list SEMICOLON 
            {
              LinkedList<Instruction> RESULT =null;
		int dataTypeleft = ((java_cup.runtime.Symbol)CUP$VParser$stack.elementAt(CUP$VParser$top-4)).left;
		int dataTyperight = ((java_cup.runtime.Symbol)CUP$VParser$stack.elementAt(CUP$VParser$top-4)).right;
		Type dataType = (Type)((java_cup.runtime.Symbol) CUP$VParser$stack.elementAt(CUP$VParser$top-4)).value;
		int varNameleft = ((java_cup.runtime.Symbol)CUP$VParser$stack.elementAt(CUP$VParser$top-3)).left;
		int varNameright = ((java_cup.runtime.Symbol)CUP$VParser$stack.elementAt(CUP$VParser$top-3)).right;
		String varName = (String)((java_cup.runtime.Symbol) CUP$VParser$stack.elementAt(CUP$VParser$top-3)).value;
		int varListleft = ((java_cup.runtime.Symbol)CUP$VParser$stack.elementAt(CUP$VParser$top-1)).left;
		int varListright = ((java_cup.runtime.Symbol)CUP$VParser$stack.elementAt(CUP$VParser$top-1)).right;
		LinkedList<Id> varList = (LinkedList<Id>)((java_cup.runtime.Symbol) CUP$VParser$stack.elementAt(CUP$VParser$top-1)).value;
		 varList.addFirst(new Id(varName, varNameleft, varNameright)); RESULT = getDeclarations(varList, dataType); 
              CUP$VParser$result = parser.getSymbolFactory().newSymbol("c_declaration",61, ((java_cup.runtime.Symbol)CUP$VParser$stack.elementAt(CUP$VParser$top-4)), ((java_cup.runtime.Symbol)CUP$VParser$stack.peek()), RESULT);
            }
          return CUP$VParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 203: // c_declaration ::= c_data_type ID SEMICOLON 
            {
              LinkedList<Instruction> RESULT =null;
		int dataTypeleft = ((java_cup.runtime.Symbol)CUP$VParser$stack.elementAt(CUP$VParser$top-2)).left;
		int dataTyperight = ((java_cup.runtime.Symbol)CUP$VParser$stack.elementAt(CUP$VParser$top-2)).right;
		Type dataType = (Type)((java_cup.runtime.Symbol) CUP$VParser$stack.elementAt(CUP$VParser$top-2)).value;
		int varNameleft = ((java_cup.runtime.Symbol)CUP$VParser$stack.elementAt(CUP$VParser$top-1)).left;
		int varNameright = ((java_cup.runtime.Symbol)CUP$VParser$stack.elementAt(CUP$VParser$top-1)).right;
		String varName = (String)((java_cup.runtime.Symbol) CUP$VParser$stack.elementAt(CUP$VParser$top-1)).value;
		 RESULT = new LinkedList<Instruction>(); RESULT.add(new Declaration(varName, dataType, Role.VAR, varNameleft, varNameright)); 
              CUP$VParser$result = parser.getSymbolFactory().newSymbol("c_declaration",61, ((java_cup.runtime.Symbol)CUP$VParser$stack.elementAt(CUP$VParser$top-2)), ((java_cup.runtime.Symbol)CUP$VParser$stack.peek()), RESULT);
            }
          return CUP$VParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 204: // c_var_list ::= ID COMMA c_var_list 
            {
              LinkedList<Id> RESULT =null;
		int varNameleft = ((java_cup.runtime.Symbol)CUP$VParser$stack.elementAt(CUP$VParser$top-2)).left;
		int varNameright = ((java_cup.runtime.Symbol)CUP$VParser$stack.elementAt(CUP$VParser$top-2)).right;
		String varName = (String)((java_cup.runtime.Symbol) CUP$VParser$stack.elementAt(CUP$VParser$top-2)).value;
		int varListleft = ((java_cup.runtime.Symbol)CUP$VParser$stack.peek()).left;
		int varListright = ((java_cup.runtime.Symbol)CUP$VParser$stack.peek()).right;
		LinkedList<Id> varList = (LinkedList<Id>)((java_cup.runtime.Symbol) CUP$VParser$stack.peek()).value;
		 varList.addFirst(new Id(varName, varNameleft, varNameright)); RESULT = varList; 
              CUP$VParser$result = parser.getSymbolFactory().newSymbol("c_var_list",74, ((java_cup.runtime.Symbol)CUP$VParser$stack.elementAt(CUP$VParser$top-2)), ((java_cup.runtime.Symbol)CUP$VParser$stack.peek()), RESULT);
            }
          return CUP$VParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 205: // c_var_list ::= ID 
            {
              LinkedList<Id> RESULT =null;
		int varNameleft = ((java_cup.runtime.Symbol)CUP$VParser$stack.peek()).left;
		int varNameright = ((java_cup.runtime.Symbol)CUP$VParser$stack.peek()).right;
		String varName = (String)((java_cup.runtime.Symbol) CUP$VParser$stack.peek()).value;
		 RESULT = new LinkedList<Id>(); RESULT.add(new Id(varName, varNameleft, varNameright)); 
              CUP$VParser$result = parser.getSymbolFactory().newSymbol("c_var_list",74, ((java_cup.runtime.Symbol)CUP$VParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$VParser$stack.peek()), RESULT);
            }
          return CUP$VParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 206: // c_assignment ::= ID EQUALS arithmetic_op SEMICOLON 
            {
              Instruction RESULT =null;
		int varNameleft = ((java_cup.runtime.Symbol)CUP$VParser$stack.elementAt(CUP$VParser$top-3)).left;
		int varNameright = ((java_cup.runtime.Symbol)CUP$VParser$stack.elementAt(CUP$VParser$top-3)).right;
		String varName = (String)((java_cup.runtime.Symbol) CUP$VParser$stack.elementAt(CUP$VParser$top-3)).value;
		int valueleft = ((java_cup.runtime.Symbol)CUP$VParser$stack.elementAt(CUP$VParser$top-1)).left;
		int valueright = ((java_cup.runtime.Symbol)CUP$VParser$stack.elementAt(CUP$VParser$top-1)).right;
		Operation value = (Operation)((java_cup.runtime.Symbol) CUP$VParser$stack.elementAt(CUP$VParser$top-1)).value;
		 RESULT = new Assignment(varName, value, varNameleft, varNameright); 
              CUP$VParser$result = parser.getSymbolFactory().newSymbol("c_assignment",19, ((java_cup.runtime.Symbol)CUP$VParser$stack.elementAt(CUP$VParser$top-3)), ((java_cup.runtime.Symbol)CUP$VParser$stack.peek()), RESULT);
            }
          return CUP$VParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 207: // c_assignment ::= ID EQUALS vb_data_request SEMICOLON 
            {
              Instruction RESULT =null;
		int varNameleft = ((java_cup.runtime.Symbol)CUP$VParser$stack.elementAt(CUP$VParser$top-3)).left;
		int varNameright = ((java_cup.runtime.Symbol)CUP$VParser$stack.elementAt(CUP$VParser$top-3)).right;
		String varName = (String)((java_cup.runtime.Symbol) CUP$VParser$stack.elementAt(CUP$VParser$top-3)).value;
		int valueleft = ((java_cup.runtime.Symbol)CUP$VParser$stack.elementAt(CUP$VParser$top-1)).left;
		int valueright = ((java_cup.runtime.Symbol)CUP$VParser$stack.elementAt(CUP$VParser$top-1)).right;
		Instruction value = (Instruction)((java_cup.runtime.Symbol) CUP$VParser$stack.elementAt(CUP$VParser$top-1)).value;

              CUP$VParser$result = parser.getSymbolFactory().newSymbol("c_assignment",19, ((java_cup.runtime.Symbol)CUP$VParser$stack.elementAt(CUP$VParser$top-3)), ((java_cup.runtime.Symbol)CUP$VParser$stack.peek()), RESULT);
            }
          return CUP$VParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 208: // c_assignment ::= ID EQUALS c_getch SEMICOLON 
            {
              Instruction RESULT =null;

              CUP$VParser$result = parser.getSymbolFactory().newSymbol("c_assignment",19, ((java_cup.runtime.Symbol)CUP$VParser$stack.elementAt(CUP$VParser$top-3)), ((java_cup.runtime.Symbol)CUP$VParser$stack.peek()), RESULT);
            }
          return CUP$VParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 209: // c_declaration_assignment ::= c_data_type ID EQUALS arithmetic_op SEMICOLON 
            {
              LinkedList<Instruction> RESULT =null;
		int dataTypeleft = ((java_cup.runtime.Symbol)CUP$VParser$stack.elementAt(CUP$VParser$top-4)).left;
		int dataTyperight = ((java_cup.runtime.Symbol)CUP$VParser$stack.elementAt(CUP$VParser$top-4)).right;
		Type dataType = (Type)((java_cup.runtime.Symbol) CUP$VParser$stack.elementAt(CUP$VParser$top-4)).value;
		int varNameleft = ((java_cup.runtime.Symbol)CUP$VParser$stack.elementAt(CUP$VParser$top-3)).left;
		int varNameright = ((java_cup.runtime.Symbol)CUP$VParser$stack.elementAt(CUP$VParser$top-3)).right;
		String varName = (String)((java_cup.runtime.Symbol) CUP$VParser$stack.elementAt(CUP$VParser$top-3)).value;
		int valueleft = ((java_cup.runtime.Symbol)CUP$VParser$stack.elementAt(CUP$VParser$top-1)).left;
		int valueright = ((java_cup.runtime.Symbol)CUP$VParser$stack.elementAt(CUP$VParser$top-1)).right;
		Operation value = (Operation)((java_cup.runtime.Symbol) CUP$VParser$stack.elementAt(CUP$VParser$top-1)).value;
		 RESULT = new LinkedList<Instruction>(); RESULT.addFirst(new Declaration(varName, dataType, Role.VAR, varNameleft, varNameright)); RESULT.addLast(new Assignment(varName, value, varNameleft, varNameright)); 
              CUP$VParser$result = parser.getSymbolFactory().newSymbol("c_declaration_assignment",62, ((java_cup.runtime.Symbol)CUP$VParser$stack.elementAt(CUP$VParser$top-4)), ((java_cup.runtime.Symbol)CUP$VParser$stack.peek()), RESULT);
            }
          return CUP$VParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 210: // c_declaration_assignment ::= c_data_type ID EQUALS vb_data_request SEMICOLON 
            {
              LinkedList<Instruction> RESULT =null;
		int dataTypeleft = ((java_cup.runtime.Symbol)CUP$VParser$stack.elementAt(CUP$VParser$top-4)).left;
		int dataTyperight = ((java_cup.runtime.Symbol)CUP$VParser$stack.elementAt(CUP$VParser$top-4)).right;
		Type dataType = (Type)((java_cup.runtime.Symbol) CUP$VParser$stack.elementAt(CUP$VParser$top-4)).value;
		int varNameleft = ((java_cup.runtime.Symbol)CUP$VParser$stack.elementAt(CUP$VParser$top-3)).left;
		int varNameright = ((java_cup.runtime.Symbol)CUP$VParser$stack.elementAt(CUP$VParser$top-3)).right;
		String varName = (String)((java_cup.runtime.Symbol) CUP$VParser$stack.elementAt(CUP$VParser$top-3)).value;
		int valueleft = ((java_cup.runtime.Symbol)CUP$VParser$stack.elementAt(CUP$VParser$top-1)).left;
		int valueright = ((java_cup.runtime.Symbol)CUP$VParser$stack.elementAt(CUP$VParser$top-1)).right;
		Instruction value = (Instruction)((java_cup.runtime.Symbol) CUP$VParser$stack.elementAt(CUP$VParser$top-1)).value;

              CUP$VParser$result = parser.getSymbolFactory().newSymbol("c_declaration_assignment",62, ((java_cup.runtime.Symbol)CUP$VParser$stack.elementAt(CUP$VParser$top-4)), ((java_cup.runtime.Symbol)CUP$VParser$stack.peek()), RESULT);
            }
          return CUP$VParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 211: // c_declaration_assignment ::= c_data_type ID EQUALS c_getch SEMICOLON 
            {
              LinkedList<Instruction> RESULT =null;
		int dataTypeleft = ((java_cup.runtime.Symbol)CUP$VParser$stack.elementAt(CUP$VParser$top-4)).left;
		int dataTyperight = ((java_cup.runtime.Symbol)CUP$VParser$stack.elementAt(CUP$VParser$top-4)).right;
		Type dataType = (Type)((java_cup.runtime.Symbol) CUP$VParser$stack.elementAt(CUP$VParser$top-4)).value;
		int varNameleft = ((java_cup.runtime.Symbol)CUP$VParser$stack.elementAt(CUP$VParser$top-3)).left;
		int varNameright = ((java_cup.runtime.Symbol)CUP$VParser$stack.elementAt(CUP$VParser$top-3)).right;
		String varName = (String)((java_cup.runtime.Symbol) CUP$VParser$stack.elementAt(CUP$VParser$top-3)).value;
		int valueleft = ((java_cup.runtime.Symbol)CUP$VParser$stack.elementAt(CUP$VParser$top-1)).left;
		int valueright = ((java_cup.runtime.Symbol)CUP$VParser$stack.elementAt(CUP$VParser$top-1)).right;
		Object value = (Object)((java_cup.runtime.Symbol) CUP$VParser$stack.elementAt(CUP$VParser$top-1)).value;

              CUP$VParser$result = parser.getSymbolFactory().newSymbol("c_declaration_assignment",62, ((java_cup.runtime.Symbol)CUP$VParser$stack.elementAt(CUP$VParser$top-4)), ((java_cup.runtime.Symbol)CUP$VParser$stack.peek()), RESULT);
            }
          return CUP$VParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 212: // c_data_type ::= INTEGER 
            {
              Type RESULT =null;
		 RESULT = Type.INT; 
              CUP$VParser$result = parser.getSymbolFactory().newSymbol("c_data_type",6, ((java_cup.runtime.Symbol)CUP$VParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$VParser$stack.peek()), RESULT);
            }
          return CUP$VParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 213: // c_data_type ::= FLOAT 
            {
              Type RESULT =null;
		 RESULT = Type.FLOAT; 
              CUP$VParser$result = parser.getSymbolFactory().newSymbol("c_data_type",6, ((java_cup.runtime.Symbol)CUP$VParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$VParser$stack.peek()), RESULT);
            }
          return CUP$VParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 214: // c_data_type ::= CHAR 
            {
              Type RESULT =null;
		 RESULT = Type.CHAR; 
              CUP$VParser$result = parser.getSymbolFactory().newSymbol("c_data_type",6, ((java_cup.runtime.Symbol)CUP$VParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$VParser$stack.peek()), RESULT);
            }
          return CUP$VParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 215: // c_while ::= WHILE PARENTHESISO logical_op PARENTHESISC CURLYBRACKETO c_code_statements CURLYBRACKETC 
            {
              Instruction RESULT =null;
		int conditionleft = ((java_cup.runtime.Symbol)CUP$VParser$stack.elementAt(CUP$VParser$top-4)).left;
		int conditionright = ((java_cup.runtime.Symbol)CUP$VParser$stack.elementAt(CUP$VParser$top-4)).right;
		Operation condition = (Operation)((java_cup.runtime.Symbol) CUP$VParser$stack.elementAt(CUP$VParser$top-4)).value;
		int instructionsleft = ((java_cup.runtime.Symbol)CUP$VParser$stack.elementAt(CUP$VParser$top-1)).left;
		int instructionsright = ((java_cup.runtime.Symbol)CUP$VParser$stack.elementAt(CUP$VParser$top-1)).right;
		LinkedList<Instruction> instructions = (LinkedList<Instruction>)((java_cup.runtime.Symbol) CUP$VParser$stack.elementAt(CUP$VParser$top-1)).value;
		 RESULT = new While(condition, instructions); 
              CUP$VParser$result = parser.getSymbolFactory().newSymbol("c_while",20, ((java_cup.runtime.Symbol)CUP$VParser$stack.elementAt(CUP$VParser$top-6)), ((java_cup.runtime.Symbol)CUP$VParser$stack.peek()), RESULT);
            }
          return CUP$VParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 216: // c_do_while ::= DO CURLYBRACKETO c_code_statements CURLYBRACKETC WHILE PARENTHESISO logical_op PARENTHESISC SEMICOLON 
            {
              Instruction RESULT =null;
		int instructionsleft = ((java_cup.runtime.Symbol)CUP$VParser$stack.elementAt(CUP$VParser$top-6)).left;
		int instructionsright = ((java_cup.runtime.Symbol)CUP$VParser$stack.elementAt(CUP$VParser$top-6)).right;
		LinkedList<Instruction> instructions = (LinkedList<Instruction>)((java_cup.runtime.Symbol) CUP$VParser$stack.elementAt(CUP$VParser$top-6)).value;
		int conditionleft = ((java_cup.runtime.Symbol)CUP$VParser$stack.elementAt(CUP$VParser$top-2)).left;
		int conditionright = ((java_cup.runtime.Symbol)CUP$VParser$stack.elementAt(CUP$VParser$top-2)).right;
		Operation condition = (Operation)((java_cup.runtime.Symbol) CUP$VParser$stack.elementAt(CUP$VParser$top-2)).value;
		 RESULT = new DoWhile(condition, instructions); 
              CUP$VParser$result = parser.getSymbolFactory().newSymbol("c_do_while",21, ((java_cup.runtime.Symbol)CUP$VParser$stack.elementAt(CUP$VParser$top-8)), ((java_cup.runtime.Symbol)CUP$VParser$stack.peek()), RESULT);
            }
          return CUP$VParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 217: // c_for ::= FOR PARENTHESISO ID EQUALS arithmetic_op SEMICOLON logical_op SEMICOLON ID EQUALS arithmetic_op PARENTHESISC CURLYBRACKETO c_code_statements CURLYBRACKETC 
            {
              Instruction RESULT =null;
		int varNameleft = ((java_cup.runtime.Symbol)CUP$VParser$stack.elementAt(CUP$VParser$top-12)).left;
		int varNameright = ((java_cup.runtime.Symbol)CUP$VParser$stack.elementAt(CUP$VParser$top-12)).right;
		String varName = (String)((java_cup.runtime.Symbol) CUP$VParser$stack.elementAt(CUP$VParser$top-12)).value;
		int value1left = ((java_cup.runtime.Symbol)CUP$VParser$stack.elementAt(CUP$VParser$top-10)).left;
		int value1right = ((java_cup.runtime.Symbol)CUP$VParser$stack.elementAt(CUP$VParser$top-10)).right;
		Operation value1 = (Operation)((java_cup.runtime.Symbol) CUP$VParser$stack.elementAt(CUP$VParser$top-10)).value;
		int conditionleft = ((java_cup.runtime.Symbol)CUP$VParser$stack.elementAt(CUP$VParser$top-8)).left;
		int conditionright = ((java_cup.runtime.Symbol)CUP$VParser$stack.elementAt(CUP$VParser$top-8)).right;
		Operation condition = (Operation)((java_cup.runtime.Symbol) CUP$VParser$stack.elementAt(CUP$VParser$top-8)).value;
		int varName2left = ((java_cup.runtime.Symbol)CUP$VParser$stack.elementAt(CUP$VParser$top-6)).left;
		int varName2right = ((java_cup.runtime.Symbol)CUP$VParser$stack.elementAt(CUP$VParser$top-6)).right;
		String varName2 = (String)((java_cup.runtime.Symbol) CUP$VParser$stack.elementAt(CUP$VParser$top-6)).value;
		int value2left = ((java_cup.runtime.Symbol)CUP$VParser$stack.elementAt(CUP$VParser$top-4)).left;
		int value2right = ((java_cup.runtime.Symbol)CUP$VParser$stack.elementAt(CUP$VParser$top-4)).right;
		Operation value2 = (Operation)((java_cup.runtime.Symbol) CUP$VParser$stack.elementAt(CUP$VParser$top-4)).value;
		int instructionsleft = ((java_cup.runtime.Symbol)CUP$VParser$stack.elementAt(CUP$VParser$top-1)).left;
		int instructionsright = ((java_cup.runtime.Symbol)CUP$VParser$stack.elementAt(CUP$VParser$top-1)).right;
		LinkedList<Instruction> instructions = (LinkedList<Instruction>)((java_cup.runtime.Symbol) CUP$VParser$stack.elementAt(CUP$VParser$top-1)).value;
		 RESULT = new For(new Assignment(varName, value1, varNameleft, varNameright), condition, new Assignment(varName2, value2, varName2left, varName2right), instructions); 
              CUP$VParser$result = parser.getSymbolFactory().newSymbol("c_for",22, ((java_cup.runtime.Symbol)CUP$VParser$stack.elementAt(CUP$VParser$top-14)), ((java_cup.runtime.Symbol)CUP$VParser$stack.peek()), RESULT);
            }
          return CUP$VParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 218: // c_if ::= IF PARENTHESISO logical_op PARENTHESISC CURLYBRACKETO c_code_statements CURLYBRACKETC 
            {
              Instruction RESULT =null;
		int conditionleft = ((java_cup.runtime.Symbol)CUP$VParser$stack.elementAt(CUP$VParser$top-4)).left;
		int conditionright = ((java_cup.runtime.Symbol)CUP$VParser$stack.elementAt(CUP$VParser$top-4)).right;
		Operation condition = (Operation)((java_cup.runtime.Symbol) CUP$VParser$stack.elementAt(CUP$VParser$top-4)).value;
		int instructionsleft = ((java_cup.runtime.Symbol)CUP$VParser$stack.elementAt(CUP$VParser$top-1)).left;
		int instructionsright = ((java_cup.runtime.Symbol)CUP$VParser$stack.elementAt(CUP$VParser$top-1)).right;
		LinkedList<Instruction> instructions = (LinkedList<Instruction>)((java_cup.runtime.Symbol) CUP$VParser$stack.elementAt(CUP$VParser$top-1)).value;
		 RESULT = new If(condition, instructions); 
              CUP$VParser$result = parser.getSymbolFactory().newSymbol("c_if",23, ((java_cup.runtime.Symbol)CUP$VParser$stack.elementAt(CUP$VParser$top-6)), ((java_cup.runtime.Symbol)CUP$VParser$stack.peek()), RESULT);
            }
          return CUP$VParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 219: // c_if ::= IF PARENTHESISO logical_op PARENTHESISC CURLYBRACKETO c_code_statements CURLYBRACKETC ELSE CURLYBRACKETO c_code_statements CURLYBRACKETC 
            {
              Instruction RESULT =null;
		int conditionleft = ((java_cup.runtime.Symbol)CUP$VParser$stack.elementAt(CUP$VParser$top-8)).left;
		int conditionright = ((java_cup.runtime.Symbol)CUP$VParser$stack.elementAt(CUP$VParser$top-8)).right;
		Operation condition = (Operation)((java_cup.runtime.Symbol) CUP$VParser$stack.elementAt(CUP$VParser$top-8)).value;
		int instructionsleft = ((java_cup.runtime.Symbol)CUP$VParser$stack.elementAt(CUP$VParser$top-5)).left;
		int instructionsright = ((java_cup.runtime.Symbol)CUP$VParser$stack.elementAt(CUP$VParser$top-5)).right;
		LinkedList<Instruction> instructions = (LinkedList<Instruction>)((java_cup.runtime.Symbol) CUP$VParser$stack.elementAt(CUP$VParser$top-5)).value;
		int elseInstructionsleft = ((java_cup.runtime.Symbol)CUP$VParser$stack.elementAt(CUP$VParser$top-1)).left;
		int elseInstructionsright = ((java_cup.runtime.Symbol)CUP$VParser$stack.elementAt(CUP$VParser$top-1)).right;
		LinkedList<Instruction> elseInstructions = (LinkedList<Instruction>)((java_cup.runtime.Symbol) CUP$VParser$stack.elementAt(CUP$VParser$top-1)).value;
		 RESULT = new If(condition, instructions, elseInstructions); 
              CUP$VParser$result = parser.getSymbolFactory().newSymbol("c_if",23, ((java_cup.runtime.Symbol)CUP$VParser$stack.elementAt(CUP$VParser$top-10)), ((java_cup.runtime.Symbol)CUP$VParser$stack.peek()), RESULT);
            }
          return CUP$VParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 220: // c_switch ::= SWITCH PARENTHESISO ID PARENTHESISC CURLYBRACKETO c_switch_cases CURLYBRACKETC 
            {
              Instruction RESULT =null;
		int varNameleft = ((java_cup.runtime.Symbol)CUP$VParser$stack.elementAt(CUP$VParser$top-4)).left;
		int varNameright = ((java_cup.runtime.Symbol)CUP$VParser$stack.elementAt(CUP$VParser$top-4)).right;
		String varName = (String)((java_cup.runtime.Symbol) CUP$VParser$stack.elementAt(CUP$VParser$top-4)).value;
		int instructionsleft = ((java_cup.runtime.Symbol)CUP$VParser$stack.elementAt(CUP$VParser$top-1)).left;
		int instructionsright = ((java_cup.runtime.Symbol)CUP$VParser$stack.elementAt(CUP$VParser$top-1)).right;
		LinkedList<Case> instructions = (LinkedList<Case>)((java_cup.runtime.Symbol) CUP$VParser$stack.elementAt(CUP$VParser$top-1)).value;
		 RESULT = new Switch(new Operation(varName, OperationType.ID, varNameleft, varNameright), instructions); 
              CUP$VParser$result = parser.getSymbolFactory().newSymbol("c_switch",25, ((java_cup.runtime.Symbol)CUP$VParser$stack.elementAt(CUP$VParser$top-6)), ((java_cup.runtime.Symbol)CUP$VParser$stack.peek()), RESULT);
            }
          return CUP$VParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 221: // c_switch ::= SWITCH PARENTHESISO ID PARENTHESISC CURLYBRACKETO CURLYBRACKETC 
            {
              Instruction RESULT =null;
		int varNameleft = ((java_cup.runtime.Symbol)CUP$VParser$stack.elementAt(CUP$VParser$top-3)).left;
		int varNameright = ((java_cup.runtime.Symbol)CUP$VParser$stack.elementAt(CUP$VParser$top-3)).right;
		String varName = (String)((java_cup.runtime.Symbol) CUP$VParser$stack.elementAt(CUP$VParser$top-3)).value;
		 RESULT = new Switch(new Operation(varName, OperationType.ID, varNameleft, varNameright), new LinkedList<Case>()); 
              CUP$VParser$result = parser.getSymbolFactory().newSymbol("c_switch",25, ((java_cup.runtime.Symbol)CUP$VParser$stack.elementAt(CUP$VParser$top-5)), ((java_cup.runtime.Symbol)CUP$VParser$stack.peek()), RESULT);
            }
          return CUP$VParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 222: // c_switch_cases ::= CASE c_switch_data COLON c_code_statements BREAK SEMICOLON c_switch_cases 
            {
              LinkedList<Case> RESULT =null;
		int valueleft = ((java_cup.runtime.Symbol)CUP$VParser$stack.elementAt(CUP$VParser$top-5)).left;
		int valueright = ((java_cup.runtime.Symbol)CUP$VParser$stack.elementAt(CUP$VParser$top-5)).right;
		Operation value = (Operation)((java_cup.runtime.Symbol) CUP$VParser$stack.elementAt(CUP$VParser$top-5)).value;
		int instructionsleft = ((java_cup.runtime.Symbol)CUP$VParser$stack.elementAt(CUP$VParser$top-3)).left;
		int instructionsright = ((java_cup.runtime.Symbol)CUP$VParser$stack.elementAt(CUP$VParser$top-3)).right;
		LinkedList<Instruction> instructions = (LinkedList<Instruction>)((java_cup.runtime.Symbol) CUP$VParser$stack.elementAt(CUP$VParser$top-3)).value;
		int instructionsListleft = ((java_cup.runtime.Symbol)CUP$VParser$stack.peek()).left;
		int instructionsListright = ((java_cup.runtime.Symbol)CUP$VParser$stack.peek()).right;
		LinkedList<Case> instructionsList = (LinkedList<Case>)((java_cup.runtime.Symbol) CUP$VParser$stack.peek()).value;
		 instructionsList.addFirst(new Case(value, instructions, valueleft, valueright));  RESULT = instructionsList; 
              CUP$VParser$result = parser.getSymbolFactory().newSymbol("c_switch_cases",77, ((java_cup.runtime.Symbol)CUP$VParser$stack.elementAt(CUP$VParser$top-6)), ((java_cup.runtime.Symbol)CUP$VParser$stack.peek()), RESULT);
            }
          return CUP$VParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 223: // c_switch_cases ::= CASE c_switch_data COLON c_code_statements BREAK SEMICOLON 
            {
              LinkedList<Case> RESULT =null;
		int valueleft = ((java_cup.runtime.Symbol)CUP$VParser$stack.elementAt(CUP$VParser$top-4)).left;
		int valueright = ((java_cup.runtime.Symbol)CUP$VParser$stack.elementAt(CUP$VParser$top-4)).right;
		Operation value = (Operation)((java_cup.runtime.Symbol) CUP$VParser$stack.elementAt(CUP$VParser$top-4)).value;
		int instructionsleft = ((java_cup.runtime.Symbol)CUP$VParser$stack.elementAt(CUP$VParser$top-2)).left;
		int instructionsright = ((java_cup.runtime.Symbol)CUP$VParser$stack.elementAt(CUP$VParser$top-2)).right;
		LinkedList<Instruction> instructions = (LinkedList<Instruction>)((java_cup.runtime.Symbol) CUP$VParser$stack.elementAt(CUP$VParser$top-2)).value;
		 RESULT = new LinkedList<Case>(); RESULT.add(new Case(value, instructions, valueleft, valueright)); 
              CUP$VParser$result = parser.getSymbolFactory().newSymbol("c_switch_cases",77, ((java_cup.runtime.Symbol)CUP$VParser$stack.elementAt(CUP$VParser$top-5)), ((java_cup.runtime.Symbol)CUP$VParser$stack.peek()), RESULT);
            }
          return CUP$VParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 224: // c_switch_cases ::= DEFAULT COLON c_code_statements BREAK SEMICOLON 
            {
              LinkedList<Case> RESULT =null;
		int instructionsleft = ((java_cup.runtime.Symbol)CUP$VParser$stack.elementAt(CUP$VParser$top-2)).left;
		int instructionsright = ((java_cup.runtime.Symbol)CUP$VParser$stack.elementAt(CUP$VParser$top-2)).right;
		LinkedList<Instruction> instructions = (LinkedList<Instruction>)((java_cup.runtime.Symbol) CUP$VParser$stack.elementAt(CUP$VParser$top-2)).value;
		 RESULT = new LinkedList<Case>(); RESULT.add(new Case(instructions)); 
              CUP$VParser$result = parser.getSymbolFactory().newSymbol("c_switch_cases",77, ((java_cup.runtime.Symbol)CUP$VParser$stack.elementAt(CUP$VParser$top-4)), ((java_cup.runtime.Symbol)CUP$VParser$stack.peek()), RESULT);
            }
          return CUP$VParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 225: // c_switch_data ::= INTEGERNUM 
            {
              Operation RESULT =null;
		int valueleft = ((java_cup.runtime.Symbol)CUP$VParser$stack.peek()).left;
		int valueright = ((java_cup.runtime.Symbol)CUP$VParser$stack.peek()).right;
		Integer value = (Integer)((java_cup.runtime.Symbol) CUP$VParser$stack.peek()).value;
		 RESULT = new Operation(value); 
              CUP$VParser$result = parser.getSymbolFactory().newSymbol("c_switch_data",48, ((java_cup.runtime.Symbol)CUP$VParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$VParser$stack.peek()), RESULT);
            }
          return CUP$VParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 226: // c_switch_data ::= DOUBLENUM 
            {
              Operation RESULT =null;
		int valueleft = ((java_cup.runtime.Symbol)CUP$VParser$stack.peek()).left;
		int valueright = ((java_cup.runtime.Symbol)CUP$VParser$stack.peek()).right;
		Double value = (Double)((java_cup.runtime.Symbol) CUP$VParser$stack.peek()).value;
		 RESULT = new Operation(value); 
              CUP$VParser$result = parser.getSymbolFactory().newSymbol("c_switch_data",48, ((java_cup.runtime.Symbol)CUP$VParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$VParser$stack.peek()), RESULT);
            }
          return CUP$VParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 227: // c_switch_data ::= CHARACTER 
            {
              Operation RESULT =null;
		int valueleft = ((java_cup.runtime.Symbol)CUP$VParser$stack.peek()).left;
		int valueright = ((java_cup.runtime.Symbol)CUP$VParser$stack.peek()).right;
		char value = (char)((java_cup.runtime.Symbol) CUP$VParser$stack.peek()).value;
		 RESULT = new Operation(value); 
              CUP$VParser$result = parser.getSymbolFactory().newSymbol("c_switch_data",48, ((java_cup.runtime.Symbol)CUP$VParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$VParser$stack.peek()), RESULT);
            }
          return CUP$VParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 228: // c_scanf ::= SCANF PARENTHESISO c_scanf_type COMMA AMPERSAND ID PARENTHESISC SEMICOLON 
            {
              Object RESULT =null;

              CUP$VParser$result = parser.getSymbolFactory().newSymbol("c_scanf",1, ((java_cup.runtime.Symbol)CUP$VParser$stack.elementAt(CUP$VParser$top-7)), ((java_cup.runtime.Symbol)CUP$VParser$stack.peek()), RESULT);
            }
          return CUP$VParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 229: // c_scanf_type ::= INTTYPE 
            {
              Object RESULT =null;

              CUP$VParser$result = parser.getSymbolFactory().newSymbol("c_scanf_type",2, ((java_cup.runtime.Symbol)CUP$VParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$VParser$stack.peek()), RESULT);
            }
          return CUP$VParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 230: // c_scanf_type ::= CHARTYPE 
            {
              Object RESULT =null;

              CUP$VParser$result = parser.getSymbolFactory().newSymbol("c_scanf_type",2, ((java_cup.runtime.Symbol)CUP$VParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$VParser$stack.peek()), RESULT);
            }
          return CUP$VParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 231: // c_scanf_type ::= FLOATTYPE 
            {
              Object RESULT =null;

              CUP$VParser$result = parser.getSymbolFactory().newSymbol("c_scanf_type",2, ((java_cup.runtime.Symbol)CUP$VParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$VParser$stack.peek()), RESULT);
            }
          return CUP$VParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 232: // c_clrscr ::= CLRSCR PARENTHESISO PARENTHESISC SEMICOLON 
            {
              Object RESULT =null;

              CUP$VParser$result = parser.getSymbolFactory().newSymbol("c_clrscr",3, ((java_cup.runtime.Symbol)CUP$VParser$stack.elementAt(CUP$VParser$top-3)), ((java_cup.runtime.Symbol)CUP$VParser$stack.peek()), RESULT);
            }
          return CUP$VParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 233: // c_getch ::= GETCH PARENTHESISO PARENTHESISC SEMICOLON 
            {
              Object RESULT =null;

              CUP$VParser$result = parser.getSymbolFactory().newSymbol("c_getch",4, ((java_cup.runtime.Symbol)CUP$VParser$stack.elementAt(CUP$VParser$top-3)), ((java_cup.runtime.Symbol)CUP$VParser$stack.peek()), RESULT);
            }
          return CUP$VParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 234: // c_screen_messages ::= PRINTF PARENTHESISO c_message PARENTHESISC SEMICOLON 
            {
              Instruction RESULT =null;
		int messageleft = ((java_cup.runtime.Symbol)CUP$VParser$stack.elementAt(CUP$VParser$top-2)).left;
		int messageright = ((java_cup.runtime.Symbol)CUP$VParser$stack.elementAt(CUP$VParser$top-2)).right;
		Operation message = (Operation)((java_cup.runtime.Symbol) CUP$VParser$stack.elementAt(CUP$VParser$top-2)).value;
		 RESULT = new Print(message, PrintType.PRINTLN); 
              CUP$VParser$result = parser.getSymbolFactory().newSymbol("c_screen_messages",24, ((java_cup.runtime.Symbol)CUP$VParser$stack.elementAt(CUP$VParser$top-4)), ((java_cup.runtime.Symbol)CUP$VParser$stack.peek()), RESULT);
            }
          return CUP$VParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 235: // c_message ::= LITERAL COMMA c_message 
            {
              Operation RESULT =null;
		int value1left = ((java_cup.runtime.Symbol)CUP$VParser$stack.elementAt(CUP$VParser$top-2)).left;
		int value1right = ((java_cup.runtime.Symbol)CUP$VParser$stack.elementAt(CUP$VParser$top-2)).right;
		String value1 = (String)((java_cup.runtime.Symbol) CUP$VParser$stack.elementAt(CUP$VParser$top-2)).value;
		int value2left = ((java_cup.runtime.Symbol)CUP$VParser$stack.peek()).left;
		int value2right = ((java_cup.runtime.Symbol)CUP$VParser$stack.peek()).right;
		Operation value2 = (Operation)((java_cup.runtime.Symbol) CUP$VParser$stack.peek()).value;
		 RESULT = new Operation(new Operation(value1, OperationType.LITERAL, value1left, value1right), value2, OperationType.CONCAT); 
              CUP$VParser$result = parser.getSymbolFactory().newSymbol("c_message",47, ((java_cup.runtime.Symbol)CUP$VParser$stack.elementAt(CUP$VParser$top-2)), ((java_cup.runtime.Symbol)CUP$VParser$stack.peek()), RESULT);
            }
          return CUP$VParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 236: // c_message ::= arithmetic_op COMMA c_message 
            {
              Operation RESULT =null;
		int value1left = ((java_cup.runtime.Symbol)CUP$VParser$stack.elementAt(CUP$VParser$top-2)).left;
		int value1right = ((java_cup.runtime.Symbol)CUP$VParser$stack.elementAt(CUP$VParser$top-2)).right;
		Operation value1 = (Operation)((java_cup.runtime.Symbol) CUP$VParser$stack.elementAt(CUP$VParser$top-2)).value;
		int value2left = ((java_cup.runtime.Symbol)CUP$VParser$stack.peek()).left;
		int value2right = ((java_cup.runtime.Symbol)CUP$VParser$stack.peek()).right;
		Operation value2 = (Operation)((java_cup.runtime.Symbol) CUP$VParser$stack.peek()).value;
		 RESULT = new Operation(value1, value2, OperationType.CONCAT); 
              CUP$VParser$result = parser.getSymbolFactory().newSymbol("c_message",47, ((java_cup.runtime.Symbol)CUP$VParser$stack.elementAt(CUP$VParser$top-2)), ((java_cup.runtime.Symbol)CUP$VParser$stack.peek()), RESULT);
            }
          return CUP$VParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 237: // c_message ::= LITERAL 
            {
              Operation RESULT =null;
		int valueleft = ((java_cup.runtime.Symbol)CUP$VParser$stack.peek()).left;
		int valueright = ((java_cup.runtime.Symbol)CUP$VParser$stack.peek()).right;
		String value = (String)((java_cup.runtime.Symbol) CUP$VParser$stack.peek()).value;
		 RESULT = new Operation(value, OperationType.LITERAL, valueleft, valueright); 
              CUP$VParser$result = parser.getSymbolFactory().newSymbol("c_message",47, ((java_cup.runtime.Symbol)CUP$VParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$VParser$stack.peek()), RESULT);
            }
          return CUP$VParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 238: // c_message ::= arithmetic_op 
            {
              Operation RESULT =null;
		int valueleft = ((java_cup.runtime.Symbol)CUP$VParser$stack.peek()).left;
		int valueright = ((java_cup.runtime.Symbol)CUP$VParser$stack.peek()).right;
		Operation value = (Operation)((java_cup.runtime.Symbol) CUP$VParser$stack.peek()).value;
		 RESULT = value; 
              CUP$VParser$result = parser.getSymbolFactory().newSymbol("c_message",47, ((java_cup.runtime.Symbol)CUP$VParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$VParser$stack.peek()), RESULT);
            }
          return CUP$VParser$result;

          /* . . . . . .*/
          default:
            throw new Exception(
               "Invalid action number "+CUP$VParser$act_num+"found in internal parse table");

        }
    } /* end of method */

  /** Method splitting the generated action code into several parts. */
  public final java_cup.runtime.Symbol CUP$VParser$do_action(
    int                        CUP$VParser$act_num,
    java_cup.runtime.lr_parser CUP$VParser$parser,
    java.util.Stack            CUP$VParser$stack,
    int                        CUP$VParser$top)
    throws java.lang.Exception
    {
              return CUP$VParser$do_action_part00000000(
                               CUP$VParser$act_num,
                               CUP$VParser$parser,
                               CUP$VParser$stack,
                               CUP$VParser$top);
    }
}

}
