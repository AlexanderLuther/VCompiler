
//----------------------------------------------------
// The following code was generated by CUP v0.11b 20160615 (GIT 4ac7450)
//----------------------------------------------------

package com.hluther.compiler.parser;

import java_cup.runtime.*;
import com.hluther.gui.VCompilerFrame;
import com.hluther.compiler.lexer.VLexer;
import java.util.stream.Collectors;
import java.util.stream.Stream;
import java.util.LinkedList;
import com.hluther.compiler.AST.AccessModifier;
import com.hluther.compiler.AST.Assignment;
import com.hluther.compiler.AST.DoWhile;
import com.hluther.compiler.AST.For;
import com.hluther.compiler.AST.Function;
import com.hluther.compiler.AST.If;
import com.hluther.compiler.AST.Instruction;
import com.hluther.compiler.AST.Operation;
import com.hluther.compiler.AST.Operation.OperationType;
import com.hluther.compiler.AST.Print;
import com.hluther.compiler.AST.Print.PrintType;
import com.hluther.compiler.AST.Procedure;
import com.hluther.compiler.AST.Statement;
import com.hluther.compiler.AST.StatementAssignment;
import com.hluther.compiler.AST.SymbolTable;
import com.hluther.compiler.AST.Type;
import com.hluther.compiler.AST.While;
import java_cup.runtime.XMLElement;

/** CUP v0.11b 20160615 (GIT 4ac7450) generated parser.
  */
@SuppressWarnings({"rawtypes"})
public class VParser extends java_cup.runtime.lr_parser {

 public final Class getSymbolContainer() {
    return VSym.class;
}

  /** Default constructor. */
  @Deprecated
  public VParser() {super();}

  /** Constructor which sets the default scanner. */
  @Deprecated
  public VParser(java_cup.runtime.Scanner s) {super(s);}

  /** Constructor which sets the default scanner. */
  public VParser(java_cup.runtime.Scanner s, java_cup.runtime.SymbolFactory sf) {super(s,sf);}

  /** Production table. */
  protected static final short _production_table[][] = 
    unpackFromStrings(new String[] {
    "\000\153\000\002\002\004\000\002\002\004\000\002\034" +
    "\004\000\002\034\004\000\002\034\002\000\002\035\004" +
    "\000\002\035\004\000\002\035\004\000\002\035\004\000" +
    "\002\035\004\000\002\035\004\000\002\035\004\000\002" +
    "\035\004\000\002\035\004\000\002\035\004\000\002\035" +
    "\005\000\002\035\005\000\002\035\002\000\002\010\016" +
    "\000\002\010\014\000\002\011\014\000\002\011\012\000" +
    "\002\033\003\000\002\033\002\000\002\041\007\000\002" +
    "\041\005\000\002\036\012\000\002\036\010\000\002\036" +
    "\010\000\002\036\006\000\002\042\005\000\002\042\003" +
    "\000\002\037\011\000\002\037\007\000\002\037\007\000" +
    "\002\037\005\000\002\012\005\000\002\012\005\000\002" +
    "\012\005\000\002\013\010\000\002\013\010\000\002\013" +
    "\010\000\002\006\003\000\002\006\003\000\002\006\003" +
    "\000\002\021\005\000\002\021\005\000\002\021\003\000" +
    "\002\022\005\000\002\022\005\000\002\022\005\000\002" +
    "\022\003\000\002\023\004\000\002\023\004\000\002\023" +
    "\003\000\002\024\005\000\002\024\003\000\002\024\003" +
    "\000\002\024\003\000\002\025\005\000\002\025\005\000" +
    "\002\025\005\000\002\025\005\000\002\025\005\000\002" +
    "\025\005\000\002\026\005\000\002\026\005\000\002\026" +
    "\003\000\002\027\004\000\002\027\003\000\002\030\005" +
    "\000\002\030\003\000\002\014\007\000\002\015\007\000" +
    "\002\016\016\000\002\016\014\000\002\016\014\000\002" +
    "\016\012\000\002\007\003\000\002\007\003\000\002\020" +
    "\010\000\002\020\010\000\002\020\007\000\002\020\007" +
    "\000\002\032\005\000\002\032\005\000\002\032\005\000" +
    "\002\032\003\000\002\032\003\000\002\032\003\000\002" +
    "\005\003\000\002\005\003\000\002\005\003\000\002\017" +
    "\010\000\002\017\012\000\002\017\011\000\002\017\013" +
    "\000\002\040\007\000\002\040\006\000\002\003\011\000" +
    "\002\003\007\000\002\004\006\000\002\004\004\000\002" +
    "\004\007\000\002\031\003\000\002\031\003\000\002\031" +
    "\003" });

  /** Access to production table. */
  public short[][] production_table() {return _production_table;}

  /** Parse-action table. */
  protected static final short[][] _action_table = 
    unpackFromStrings(new String[] {
    "\000\u0106\000\004\004\005\001\002\000\004\002\u0108\001" +
    "\002\000\012\002\ufffd\044\012\045\uffea\050\uffea\001\002" +
    "\000\004\002\000\001\002\000\012\002\ufffd\044\012\045" +
    "\uffea\050\uffea\001\002\000\006\045\015\050\014\001\002" +
    "\000\012\002\ufffd\044\012\045\uffea\050\uffea\001\002\000" +
    "\006\045\uffeb\050\uffeb\001\002\000\004\002\ufffe\001\002" +
    "\000\004\073\373\001\002\000\004\073\016\001\002\000" +
    "\004\023\017\001\002\000\006\024\020\051\021\001\002" +
    "\000\004\011\366\001\002\000\004\073\022\001\002\000" +
    "\004\011\362\001\002\000\004\024\024\001\002\000\004" +
    "\011\025\001\002\000\010\012\026\013\027\014\030\001" +
    "\002\000\054\010\uffd7\015\uffd7\024\uffd7\027\uffd7\040\uffd7" +
    "\042\uffd7\043\uffd7\046\uffd7\047\uffd7\052\uffd7\053\uffd7\054" +
    "\uffd7\055\uffd7\056\uffd7\057\uffd7\060\uffd7\063\uffd7\064\uffd7" +
    "\065\uffd7\067\uffd7\073\uffd7\001\002\000\054\010\uffd6\015" +
    "\uffd6\024\uffd6\027\uffd6\040\uffd6\042\uffd6\043\uffd6\046\uffd6" +
    "\047\uffd6\052\uffd6\053\uffd6\054\uffd6\055\uffd6\056\uffd6\057" +
    "\uffd6\060\uffd6\063\uffd6\064\uffd6\065\uffd6\067\uffd6\073\uffd6" +
    "\001\002\000\054\010\uffd5\015\uffd5\024\uffd5\027\uffd5\040" +
    "\uffd5\042\uffd5\043\uffd5\046\uffd5\047\uffd5\052\uffd5\053\uffd5" +
    "\054\uffd5\055\uffd5\056\uffd5\057\uffd5\060\uffd5\063\uffd5\064" +
    "\uffd5\065\uffd5\067\uffd5\073\uffd5\001\002\000\034\010\052" +
    "\040\040\046\ufff0\047\035\052\032\054\033\055\043\057" +
    "\053\063\047\064\034\065\057\067\037\073\042\001\002" +
    "\000\004\053\335\001\002\000\020\016\073\017\070\023" +
    "\216\036\217\073\077\075\074\077\101\001\002\000\046" +
    "\010\uffa6\040\uffa6\042\uffa6\043\uffa6\046\uffa6\047\uffa6\052" +
    "\uffa6\053\uffa6\054\uffa6\055\uffa6\056\uffa6\057\uffa6\060\uffa6" +
    "\063\uffa6\064\uffa6\065\uffa6\067\uffa6\073\uffa6\001\002\000" +
    "\020\016\073\017\070\023\100\073\077\075\074\076\325" +
    "\077\101\001\002\000\046\010\052\040\040\042\ufff0\043" +
    "\ufff0\046\ufff0\047\035\052\032\053\ufff0\054\033\055\043" +
    "\056\ufff0\057\053\060\ufff0\063\047\064\034\065\057\067" +
    "\037\073\042\001\002\000\004\066\300\001\002\000\020" +
    "\016\073\017\070\023\216\036\217\073\077\075\074\077" +
    "\101\001\002\000\046\010\052\040\040\042\ufff0\043\ufff0" +
    "\046\ufff0\047\035\052\032\053\ufff0\054\033\055\043\056" +
    "\ufff0\057\053\060\ufff0\063\047\064\034\065\057\067\037" +
    "\073\042\001\002\000\004\027\246\001\002\000\034\010" +
    "\052\040\040\047\035\052\032\054\033\055\043\056\ufff0" +
    "\057\053\063\047\064\034\065\057\067\037\073\042\001" +
    "\002\000\046\010\052\040\040\042\ufff0\043\ufff0\046\ufff0" +
    "\047\035\052\032\053\ufff0\054\033\055\043\056\ufff0\057" +
    "\053\060\ufff0\063\047\064\034\065\057\067\037\073\042" +
    "\001\002\000\046\010\052\040\040\042\ufff0\043\ufff0\046" +
    "\ufff0\047\035\052\032\053\ufff0\054\033\055\043\056\ufff0" +
    "\057\053\060\ufff0\063\047\064\034\065\057\067\037\073" +
    "\042\001\002\000\046\010\052\040\040\042\ufff0\043\ufff0" +
    "\046\ufff0\047\035\052\032\053\ufff0\054\033\055\043\056" +
    "\ufff0\057\053\060\ufff0\063\047\064\034\065\057\067\037" +
    "\073\042\001\002\000\046\010\uffa7\040\uffa7\042\uffa7\043" +
    "\uffa7\046\uffa7\047\uffa7\052\uffa7\053\uffa7\054\uffa7\055\uffa7" +
    "\056\uffa7\057\uffa7\060\uffa7\063\uffa7\064\uffa7\065\uffa7\067" +
    "\uffa7\073\uffa7\001\002\000\004\046\203\001\002\000\046" +
    "\010\052\040\040\042\ufff0\043\ufff0\046\ufff0\047\035\052" +
    "\032\053\ufff0\054\033\055\043\056\ufff0\057\053\060\ufff0" +
    "\063\047\064\034\065\057\067\037\073\042\001\002\000" +
    "\004\073\145\001\002\000\004\073\065\001\002\000\046" +
    "\010\052\040\040\042\ufff0\043\ufff0\046\ufff0\047\035\052" +
    "\032\053\ufff0\054\033\055\043\056\ufff0\057\053\060\ufff0" +
    "\063\047\064\034\065\057\067\037\073\042\001\002\000" +
    "\046\010\052\040\040\042\ufff0\043\ufff0\046\ufff0\047\035" +
    "\052\032\053\ufff0\054\033\055\043\056\ufff0\057\053\060" +
    "\ufff0\063\047\064\034\065\057\067\037\073\042\001\002" +
    "\000\046\010\052\040\040\042\ufff0\043\ufff0\046\ufff0\047" +
    "\035\052\032\053\ufff0\054\033\055\043\056\ufff0\057\053" +
    "\060\ufff0\063\047\064\034\065\057\067\037\073\042\001" +
    "\002\000\046\010\uffa5\040\uffa5\042\uffa5\043\uffa5\046\uffa5" +
    "\047\uffa5\052\uffa5\053\uffa5\054\uffa5\055\uffa5\056\uffa5\057" +
    "\uffa5\060\uffa5\063\uffa5\064\uffa5\065\uffa5\067\uffa5\073\uffa5" +
    "\001\002\000\046\010\052\040\040\042\ufff0\043\ufff0\046" +
    "\ufff0\047\035\052\032\053\ufff0\054\033\055\043\056\ufff0" +
    "\057\053\060\ufff0\063\047\064\034\065\057\067\037\073" +
    "\042\001\002\000\016\042\ufff3\043\ufff3\046\ufff3\053\ufff3" +
    "\056\ufff3\060\ufff3\001\002\000\016\042\ufffb\043\ufffb\046" +
    "\ufffb\053\ufffb\056\ufffb\060\ufffb\001\002\000\016\042\ufff7" +
    "\043\ufff7\046\ufff7\053\ufff7\056\ufff7\060\ufff7\001\002\000" +
    "\016\042\ufffa\043\ufffa\046\ufffa\053\ufffa\056\ufffa\060\ufffa" +
    "\001\002\000\006\011\066\027\067\001\002\000\006\012" +
    "\130\013\131\001\002\000\016\016\073\017\070\023\100" +
    "\073\077\075\074\077\101\001\002\000\012\023\100\073" +
    "\077\075\074\077\101\001\002\000\112\010\uffd2\016\uffd2" +
    "\017\uffd2\020\110\021\111\022\107\024\uffd2\027\uffd2\030" +
    "\uffd2\031\uffd2\032\uffd2\033\uffd2\034\uffd2\035\uffd2\037\uffd2" +
    "\040\uffd2\041\uffd2\042\uffd2\043\uffd2\046\uffd2\047\uffd2\052" +
    "\uffd2\053\uffd2\054\uffd2\055\uffd2\056\uffd2\057\uffd2\060\uffd2" +
    "\061\uffd2\062\uffd2\063\uffd2\064\uffd2\065\uffd2\067\uffd2\072" +
    "\uffd2\073\uffd2\001\002\000\112\010\uffcb\016\uffcb\017\uffcb" +
    "\020\uffcb\021\uffcb\022\uffcb\024\uffcb\027\uffcb\030\uffcb\031" +
    "\uffcb\032\uffcb\033\uffcb\034\uffcb\035\uffcb\037\uffcb\040\uffcb" +
    "\041\uffcb\042\uffcb\043\uffcb\046\uffcb\047\uffcb\052\uffcb\053" +
    "\uffcb\054\uffcb\055\uffcb\056\uffcb\057\uffcb\060\uffcb\061\uffcb" +
    "\062\uffcb\063\uffcb\064\uffcb\065\uffcb\067\uffcb\072\uffcb\073" +
    "\uffcb\001\002\000\012\023\100\073\077\075\074\077\101" +
    "\001\002\000\112\010\uffc9\016\uffc9\017\uffc9\020\uffc9\021" +
    "\uffc9\022\uffc9\024\uffc9\027\uffc9\030\uffc9\031\uffc9\032\uffc9" +
    "\033\uffc9\034\uffc9\035\uffc9\037\uffc9\040\uffc9\041\uffc9\042" +
    "\uffc9\043\uffc9\046\uffc9\047\uffc9\052\uffc9\053\uffc9\054\uffc9" +
    "\055\uffc9\056\uffc9\057\uffc9\060\uffc9\061\uffc9\062\uffc9\063" +
    "\uffc9\064\uffc9\065\uffc9\067\uffc9\072\uffc9\073\uffc9\001\002" +
    "\000\010\016\104\017\105\061\116\001\002\000\112\010" +
    "\uffce\016\uffce\017\uffce\020\uffce\021\uffce\022\uffce\024\uffce" +
    "\027\uffce\030\uffce\031\uffce\032\uffce\033\uffce\034\uffce\035" +
    "\uffce\037\uffce\040\uffce\041\uffce\042\uffce\043\uffce\046\uffce" +
    "\047\uffce\052\uffce\053\uffce\054\uffce\055\uffce\056\uffce\057" +
    "\uffce\060\uffce\061\uffce\062\uffce\063\uffce\064\uffce\065\uffce" +
    "\067\uffce\072\uffce\073\uffce\001\002\000\112\010\uffc7\016" +
    "\uffc7\017\uffc7\020\uffc7\021\uffc7\022\uffc7\024\uffc7\027\uffc7" +
    "\030\uffc7\031\uffc7\032\uffc7\033\uffc7\034\uffc7\035\uffc7\037" +
    "\uffc7\040\uffc7\041\uffc7\042\uffc7\043\uffc7\046\uffc7\047\uffc7" +
    "\052\uffc7\053\uffc7\054\uffc7\055\uffc7\056\uffc7\057\uffc7\060" +
    "\uffc7\061\uffc7\062\uffc7\063\uffc7\064\uffc7\065\uffc7\067\uffc7" +
    "\072\uffc7\073\uffc7\001\002\000\016\016\073\017\070\023" +
    "\100\073\077\075\074\077\101\001\002\000\112\010\uffc8" +
    "\016\uffc8\017\uffc8\020\uffc8\021\uffc8\022\uffc8\024\uffc8\027" +
    "\uffc8\030\uffc8\031\uffc8\032\uffc8\033\uffc8\034\uffc8\035\uffc8" +
    "\037\uffc8\040\uffc8\041\uffc8\042\uffc8\043\uffc8\046\uffc8\047" +
    "\uffc8\052\uffc8\053\uffc8\054\uffc8\055\uffc8\056\uffc8\057\uffc8" +
    "\060\uffc8\061\uffc8\062\uffc8\063\uffc8\064\uffc8\065\uffc8\067" +
    "\uffc8\072\uffc8\073\uffc8\001\002\000\010\016\104\017\105" +
    "\024\103\001\002\000\112\010\uffca\016\uffca\017\uffca\020" +
    "\uffca\021\uffca\022\uffca\024\uffca\027\uffca\030\uffca\031\uffca" +
    "\032\uffca\033\uffca\034\uffca\035\uffca\037\uffca\040\uffca\041" +
    "\uffca\042\uffca\043\uffca\046\uffca\047\uffca\052\uffca\053\uffca" +
    "\054\uffca\055\uffca\056\uffca\057\uffca\060\uffca\061\uffca\062" +
    "\uffca\063\uffca\064\uffca\065\uffca\067\uffca\072\uffca\073\uffca" +
    "\001\002\000\016\016\073\017\070\023\100\073\077\075" +
    "\074\077\101\001\002\000\016\016\073\017\070\023\100" +
    "\073\077\075\074\077\101\001\002\000\112\010\uffd3\016" +
    "\uffd3\017\uffd3\020\110\021\111\022\107\024\uffd3\027\uffd3" +
    "\030\uffd3\031\uffd3\032\uffd3\033\uffd3\034\uffd3\035\uffd3\037" +
    "\uffd3\040\uffd3\041\uffd3\042\uffd3\043\uffd3\046\uffd3\047\uffd3" +
    "\052\uffd3\053\uffd3\054\uffd3\055\uffd3\056\uffd3\057\uffd3\060" +
    "\uffd3\061\uffd3\062\uffd3\063\uffd3\064\uffd3\065\uffd3\067\uffd3" +
    "\072\uffd3\073\uffd3\001\002\000\016\016\073\017\070\023" +
    "\100\073\077\075\074\077\101\001\002\000\016\016\073" +
    "\017\070\023\100\073\077\075\074\077\101\001\002\000" +
    "\016\016\073\017\070\023\100\073\077\075\074\077\101" +
    "\001\002\000\112\010\uffd0\016\uffd0\017\uffd0\020\uffd0\021" +
    "\uffd0\022\uffd0\024\uffd0\027\uffd0\030\uffd0\031\uffd0\032\uffd0" +
    "\033\uffd0\034\uffd0\035\uffd0\037\uffd0\040\uffd0\041\uffd0\042" +
    "\uffd0\043\uffd0\046\uffd0\047\uffd0\052\uffd0\053\uffd0\054\uffd0" +
    "\055\uffd0\056\uffd0\057\uffd0\060\uffd0\061\uffd0\062\uffd0\063" +
    "\uffd0\064\uffd0\065\uffd0\067\uffd0\072\uffd0\073\uffd0\001\002" +
    "\000\112\010\uffd1\016\uffd1\017\uffd1\020\uffd1\021\uffd1\022" +
    "\uffd1\024\uffd1\027\uffd1\030\uffd1\031\uffd1\032\uffd1\033\uffd1" +
    "\034\uffd1\035\uffd1\037\uffd1\040\uffd1\041\uffd1\042\uffd1\043" +
    "\uffd1\046\uffd1\047\uffd1\052\uffd1\053\uffd1\054\uffd1\055\uffd1" +
    "\056\uffd1\057\uffd1\060\uffd1\061\uffd1\062\uffd1\063\uffd1\064" +
    "\uffd1\065\uffd1\067\uffd1\072\uffd1\073\uffd1\001\002\000\112" +
    "\010\uffcf\016\uffcf\017\uffcf\020\uffcf\021\uffcf\022\uffcf\024" +
    "\uffcf\027\uffcf\030\uffcf\031\uffcf\032\uffcf\033\uffcf\034\uffcf" +
    "\035\uffcf\037\uffcf\040\uffcf\041\uffcf\042\uffcf\043\uffcf\046" +
    "\uffcf\047\uffcf\052\uffcf\053\uffcf\054\uffcf\055\uffcf\056\uffcf" +
    "\057\uffcf\060\uffcf\061\uffcf\062\uffcf\063\uffcf\064\uffcf\065" +
    "\uffcf\067\uffcf\072\uffcf\073\uffcf\001\002\000\112\010\uffd4" +
    "\016\uffd4\017\uffd4\020\110\021\111\022\107\024\uffd4\027" +
    "\uffd4\030\uffd4\031\uffd4\032\uffd4\033\uffd4\034\uffd4\035\uffd4" +
    "\037\uffd4\040\uffd4\041\uffd4\042\uffd4\043\uffd4\046\uffd4\047" +
    "\uffd4\052\uffd4\053\uffd4\054\uffd4\055\uffd4\056\uffd4\057\uffd4" +
    "\060\uffd4\061\uffd4\062\uffd4\063\uffd4\064\uffd4\065\uffd4\067" +
    "\uffd4\072\uffd4\073\uffd4\001\002\000\016\016\073\017\070" +
    "\023\100\073\077\075\074\077\101\001\002\000\042\010" +
    "\052\016\104\017\105\040\040\047\035\052\032\054\033" +
    "\055\043\057\053\060\ufff0\062\120\063\047\064\034\065" +
    "\057\067\037\073\042\001\002\000\016\016\073\017\070" +
    "\023\100\073\077\075\074\077\101\001\002\000\004\060" +
    "\122\001\002\000\046\010\uffb4\040\uffb4\042\uffb4\043\uffb4" +
    "\046\uffb4\047\uffb4\052\uffb4\053\uffb4\054\uffb4\055\uffb4\056" +
    "\uffb4\057\uffb4\060\uffb4\063\uffb4\064\uffb4\065\uffb4\067\uffb4" +
    "\073\uffb4\001\002\000\040\010\052\016\104\017\105\040" +
    "\040\047\035\052\032\054\033\055\043\057\053\060\ufff0" +
    "\063\047\064\034\065\057\067\037\073\042\001\002\000" +
    "\004\060\125\001\002\000\046\010\uffb6\040\uffb6\042\uffb6" +
    "\043\uffb6\046\uffb6\047\uffb6\052\uffb6\053\uffb6\054\uffb6\055" +
    "\uffb6\056\uffb6\057\uffb6\060\uffb6\063\uffb6\064\uffb6\065\uffb6" +
    "\067\uffb6\073\uffb6\001\002\000\112\010\uffcd\016\uffcd\017" +
    "\uffcd\020\uffcd\021\uffcd\022\uffcd\024\uffcd\027\uffcd\030\uffcd" +
    "\031\uffcd\032\uffcd\033\uffcd\034\uffcd\035\uffcd\037\uffcd\040" +
    "\uffcd\041\uffcd\042\uffcd\043\uffcd\046\uffcd\047\uffcd\052\uffcd" +
    "\053\uffcd\054\uffcd\055\uffcd\056\uffcd\057\uffcd\060\uffcd\061" +
    "\uffcd\062\uffcd\063\uffcd\064\uffcd\065\uffcd\067\uffcd\072\uffcd" +
    "\073\uffcd\001\002\000\112\010\uffcc\016\uffcc\017\uffcc\020" +
    "\uffcc\021\uffcc\022\uffcc\024\uffcc\027\uffcc\030\uffcc\031\uffcc" +
    "\032\uffcc\033\uffcc\034\uffcc\035\uffcc\037\uffcc\040\uffcc\041" +
    "\uffcc\042\uffcc\043\uffcc\046\uffcc\047\uffcc\052\uffcc\053\uffcc" +
    "\054\uffcc\055\uffcc\056\uffcc\057\uffcc\060\uffcc\061\uffcc\062" +
    "\uffcc\063\uffcc\064\uffcc\065\uffcc\067\uffcc\072\uffcc\073\uffcc" +
    "\001\002\000\004\027\uffb3\001\002\000\004\027\uffb2\001" +
    "\002\000\004\027\133\001\002\000\016\016\073\017\070" +
    "\023\100\073\077\075\074\077\101\001\002\000\010\016" +
    "\104\017\105\061\135\001\002\000\016\016\073\017\070" +
    "\023\100\073\077\075\074\077\101\001\002\000\042\010" +
    "\052\016\104\017\105\040\040\047\035\052\032\054\033" +
    "\055\043\057\053\060\ufff0\062\137\063\047\064\034\065" +
    "\057\067\037\073\042\001\002\000\016\016\073\017\070" +
    "\023\100\073\077\075\074\077\101\001\002\000\004\060" +
    "\141\001\002\000\046\010\uffb5\040\uffb5\042\uffb5\043\uffb5" +
    "\046\uffb5\047\uffb5\052\uffb5\053\uffb5\054\uffb5\055\uffb5\056" +
    "\uffb5\057\uffb5\060\uffb5\063\uffb5\064\uffb5\065\uffb5\067\uffb5" +
    "\073\uffb5\001\002\000\040\010\052\016\104\017\105\040" +
    "\040\047\035\052\032\054\033\055\043\057\053\060\ufff0" +
    "\063\047\064\034\065\057\067\037\073\042\001\002\000" +
    "\004\060\144\001\002\000\046\010\uffb7\040\uffb7\042\uffb7" +
    "\043\uffb7\046\uffb7\047\uffb7\052\uffb7\053\uffb7\054\uffb7\055" +
    "\uffb7\056\uffb7\057\uffb7\060\uffb7\063\uffb7\064\uffb7\065\uffb7" +
    "\067\uffb7\073\uffb7\001\002\000\006\011\147\015\146\001" +
    "\002\000\004\073\165\001\002\000\010\012\026\013\027" +
    "\014\030\001\002\000\052\010\uffe4\015\151\027\152\040" +
    "\uffe4\042\uffe4\043\uffe4\046\uffe4\047\uffe4\052\uffe4\053\uffe4" +
    "\054\uffe4\055\uffe4\056\uffe4\057\uffe4\060\uffe4\063\uffe4\064" +
    "\uffe4\065\uffe4\067\uffe4\073\uffe4\001\002\000\004\073\156" +
    "\001\002\000\026\016\073\017\070\023\100\063\047\064" +
    "\034\065\057\073\077\075\074\076\153\077\101\001\002" +
    "\000\046\010\uffda\040\uffda\042\uffda\043\uffda\046\uffda\047" +
    "\uffda\052\uffda\053\uffda\054\uffda\055\uffda\056\uffda\057\uffda" +
    "\060\uffda\063\uffda\064\uffda\065\uffda\067\uffda\073\uffda\001" +
    "\002\000\052\010\uffd9\016\104\017\105\040\uffd9\042\uffd9" +
    "\043\uffd9\046\uffd9\047\uffd9\052\uffd9\053\uffd9\054\uffd9\055" +
    "\uffd9\056\uffd9\057\uffd9\060\uffd9\063\uffd9\064\uffd9\065\uffd9" +
    "\067\uffd9\073\uffd9\001\002\000\046\010\uffd8\040\uffd8\042" +
    "\uffd8\043\uffd8\046\uffd8\047\uffd8\052\uffd8\053\uffd8\054\uffd8" +
    "\055\uffd8\056\uffd8\057\uffd8\060\uffd8\063\uffd8\064\uffd8\065" +
    "\uffd8\067\uffd8\073\uffd8\001\002\000\006\011\161\015\160" +
    "\001\002\000\046\010\uffe6\040\uffe6\042\uffe6\043\uffe6\046" +
    "\uffe6\047\uffe6\052\uffe6\053\uffe6\054\uffe6\055\uffe6\056\uffe6" +
    "\057\uffe6\060\uffe6\063\uffe6\064\uffe6\065\uffe6\067\uffe6\073" +
    "\uffe6\001\002\000\004\073\165\001\002\000\010\012\026" +
    "\013\027\014\030\001\002\000\050\010\uffde\015\163\040" +
    "\uffde\042\uffde\043\uffde\046\uffde\047\uffde\052\uffde\053\uffde" +
    "\054\uffde\055\uffde\056\uffde\057\uffde\060\uffde\063\uffde\064" +
    "\uffde\065\uffde\067\uffde\073\uffde\001\002\000\004\073\156" +
    "\001\002\000\046\010\uffe0\040\uffe0\042\uffe0\043\uffe0\046" +
    "\uffe0\047\uffe0\052\uffe0\053\uffe0\054\uffe0\055\uffe0\056\uffe0" +
    "\057\uffe0\060\uffe0\063\uffe0\064\uffe0\065\uffe0\067\uffe0\073" +
    "\uffe0\001\002\000\006\011\uffe2\015\173\001\002\000\004" +
    "\011\167\001\002\000\010\012\026\013\027\014\030\001" +
    "\002\000\050\010\uffdf\015\171\040\uffdf\042\uffdf\043\uffdf" +
    "\046\uffdf\047\uffdf\052\uffdf\053\uffdf\054\uffdf\055\uffdf\056" +
    "\uffdf\057\uffdf\060\uffdf\063\uffdf\064\uffdf\065\uffdf\067\uffdf" +
    "\073\uffdf\001\002\000\004\073\156\001\002\000\046\010" +
    "\uffe1\040\uffe1\042\uffe1\043\uffe1\046\uffe1\047\uffe1\052\uffe1" +
    "\053\uffe1\054\uffe1\055\uffe1\056\uffe1\057\uffe1\060\uffe1\063" +
    "\uffe1\064\uffe1\065\uffe1\067\uffe1\073\uffe1\001\002\000\004" +
    "\073\165\001\002\000\004\011\uffe3\001\002\000\004\011" +
    "\176\001\002\000\010\012\026\013\027\014\030\001\002" +
    "\000\050\010\uffe5\015\200\040\uffe5\042\uffe5\043\uffe5\046" +
    "\uffe5\047\uffe5\052\uffe5\053\uffe5\054\uffe5\055\uffe5\056\uffe5" +
    "\057\uffe5\060\uffe5\063\uffe5\064\uffe5\065\uffe5\067\uffe5\073" +
    "\uffe5\001\002\000\004\073\156\001\002\000\046\010\uffe7" +
    "\040\uffe7\042\uffe7\043\uffe7\046\uffe7\047\uffe7\052\uffe7\053" +
    "\uffe7\054\uffe7\055\uffe7\056\uffe7\057\uffe7\060\uffe7\063\uffe7" +
    "\064\uffe7\065\uffe7\067\uffe7\073\uffe7\001\002\000\016\042" +
    "\ufff9\043\ufff9\046\ufff9\053\ufff9\056\ufff9\060\ufff9\001\002" +
    "\000\004\045\204\001\002\000\012\002\uffef\044\uffef\045" +
    "\uffef\050\uffef\001\002\000\016\042\ufff4\043\ufff4\046\ufff4" +
    "\053\ufff4\056\ufff4\060\ufff4\001\002\000\016\042\ufffc\043" +
    "\ufffc\046\ufffc\053\ufffc\056\ufffc\060\ufffc\001\002\000\016" +
    "\042\ufff6\043\ufff6\046\ufff6\053\ufff6\056\ufff6\060\ufff6\001" +
    "\002\000\004\056\211\001\002\000\004\054\212\001\002" +
    "\000\020\016\073\017\070\023\216\036\217\073\077\075" +
    "\074\077\101\001\002\000\056\010\uffbc\024\uffbc\035\uffbc" +
    "\037\uffbc\040\uffbc\041\uffbc\042\uffbc\043\uffbc\046\uffbc\047" +
    "\uffbc\052\uffbc\053\uffbc\054\uffbc\055\uffbc\056\uffbc\057\uffbc" +
    "\060\uffbc\063\uffbc\064\uffbc\065\uffbc\067\uffbc\073\uffbc\001" +
    "\002\000\056\010\uffbe\024\uffbe\035\uffbe\037\uffbe\040\uffbe" +
    "\041\uffbe\042\uffbe\043\uffbe\046\uffbe\047\uffbe\052\uffbe\053" +
    "\uffbe\054\uffbe\055\uffbe\056\uffbe\057\uffbe\060\uffbe\063\uffbe" +
    "\064\uffbe\065\uffbe\067\uffbe\073\uffbe\001\002\000\022\016" +
    "\104\017\105\027\237\030\234\031\233\032\236\033\235" +
    "\034\232\001\002\000\020\016\073\017\070\023\216\036" +
    "\217\073\077\075\074\077\101\001\002\000\016\016\073" +
    "\017\070\023\216\073\077\075\074\077\101\001\002\000" +
    "\056\010\uffba\024\uffba\035\uffba\037\uffba\040\uffba\041\uffba" +
    "\042\uffba\043\uffba\046\uffba\047\uffba\052\uffba\053\uffba\054" +
    "\uffba\055\uffba\056\uffba\057\uffba\060\uffba\063\uffba\064\uffba" +
    "\065\uffba\067\uffba\073\uffba\001\002\000\052\010\uffb8\035" +
    "\222\037\223\040\uffb8\042\uffb8\043\uffb8\046\uffb8\047\uffb8" +
    "\052\uffb8\053\uffb8\054\uffb8\055\uffb8\056\uffb8\057\uffb8\060" +
    "\uffb8\063\uffb8\064\uffb8\065\uffb8\067\uffb8\073\uffb8\001\002" +
    "\000\020\016\073\017\070\023\216\036\217\073\077\075" +
    "\074\077\101\001\002\000\020\016\073\017\070\023\216" +
    "\036\217\073\077\075\074\077\101\001\002\000\056\010" +
    "\uffbf\024\uffbf\035\uffbf\037\uffbf\040\uffbf\041\uffbf\042\uffbf" +
    "\043\uffbf\046\uffbf\047\uffbf\052\uffbf\053\uffbf\054\uffbf\055" +
    "\uffbf\056\uffbf\057\uffbf\060\uffbf\063\uffbf\064\uffbf\065\uffbf" +
    "\067\uffbf\073\uffbf\001\002\000\056\010\uffc0\024\uffc0\035" +
    "\uffc0\037\uffc0\040\uffc0\041\uffc0\042\uffc0\043\uffc0\046\uffc0" +
    "\047\uffc0\052\uffc0\053\uffc0\054\uffc0\055\uffc0\056\uffc0\057" +
    "\uffc0\060\uffc0\063\uffc0\064\uffc0\065\uffc0\067\uffc0\073\uffc0" +
    "\001\002\000\056\010\uffbd\024\uffbd\035\uffbd\037\uffbd\040" +
    "\uffbd\041\uffbd\042\uffbd\043\uffbd\046\uffbd\047\uffbd\052\uffbd" +
    "\053\uffbd\054\uffbd\055\uffbd\056\uffbd\057\uffbd\060\uffbd\063" +
    "\uffbd\064\uffbd\065\uffbd\067\uffbd\073\uffbd\001\002\000\024" +
    "\016\104\017\105\024\103\027\237\030\234\031\233\032" +
    "\236\033\235\034\232\001\002\000\010\024\231\035\222" +
    "\037\223\001\002\000\056\010\uffbb\024\uffbb\035\uffbb\037" +
    "\uffbb\040\uffbb\041\uffbb\042\uffbb\043\uffbb\046\uffbb\047\uffbb" +
    "\052\uffbb\053\uffbb\054\uffbb\055\uffbb\056\uffbb\057\uffbb\060" +
    "\uffbb\063\uffbb\064\uffbb\065\uffbb\067\uffbb\073\uffbb\001\002" +
    "\000\016\016\073\017\070\023\100\073\077\075\074\077" +
    "\101\001\002\000\016\016\073\017\070\023\100\073\077" +
    "\075\074\077\101\001\002\000\016\016\073\017\070\023" +
    "\100\073\077\075\074\077\101\001\002\000\016\016\073" +
    "\017\070\023\100\073\077\075\074\077\101\001\002\000" +
    "\016\016\073\017\070\023\100\073\077\075\074\077\101" +
    "\001\002\000\016\016\073\017\070\023\100\073\077\075" +
    "\074\077\101\001\002\000\062\010\uffc6\016\104\017\105" +
    "\024\uffc6\035\uffc6\037\uffc6\040\uffc6\041\uffc6\042\uffc6\043" +
    "\uffc6\046\uffc6\047\uffc6\052\uffc6\053\uffc6\054\uffc6\055\uffc6" +
    "\056\uffc6\057\uffc6\060\uffc6\063\uffc6\064\uffc6\065\uffc6\067" +
    "\uffc6\073\uffc6\001\002\000\062\010\uffc3\016\104\017\105" +
    "\024\uffc3\035\uffc3\037\uffc3\040\uffc3\041\uffc3\042\uffc3\043" +
    "\uffc3\046\uffc3\047\uffc3\052\uffc3\053\uffc3\054\uffc3\055\uffc3" +
    "\056\uffc3\057\uffc3\060\uffc3\063\uffc3\064\uffc3\065\uffc3\067" +
    "\uffc3\073\uffc3\001\002\000\062\010\uffc2\016\104\017\105" +
    "\024\uffc2\035\uffc2\037\uffc2\040\uffc2\041\uffc2\042\uffc2\043" +
    "\uffc2\046\uffc2\047\uffc2\052\uffc2\053\uffc2\054\uffc2\055\uffc2" +
    "\056\uffc2\057\uffc2\060\uffc2\063\uffc2\064\uffc2\065\uffc2\067" +
    "\uffc2\073\uffc2\001\002\000\062\010\uffc5\016\104\017\105" +
    "\024\uffc5\035\uffc5\037\uffc5\040\uffc5\041\uffc5\042\uffc5\043" +
    "\uffc5\046\uffc5\047\uffc5\052\uffc5\053\uffc5\054\uffc5\055\uffc5" +
    "\056\uffc5\057\uffc5\060\uffc5\063\uffc5\064\uffc5\065\uffc5\067" +
    "\uffc5\073\uffc5\001\002\000\062\010\uffc4\016\104\017\105" +
    "\024\uffc4\035\uffc4\037\uffc4\040\uffc4\041\uffc4\042\uffc4\043" +
    "\uffc4\046\uffc4\047\uffc4\052\uffc4\053\uffc4\054\uffc4\055\uffc4" +
    "\056\uffc4\057\uffc4\060\uffc4\063\uffc4\064\uffc4\065\uffc4\067" +
    "\uffc4\073\uffc4\001\002\000\062\010\uffc1\016\104\017\105" +
    "\024\uffc1\035\uffc1\037\uffc1\040\uffc1\041\uffc1\042\uffc1\043" +
    "\uffc1\046\uffc1\047\uffc1\052\uffc1\053\uffc1\054\uffc1\055\uffc1" +
    "\056\uffc1\057\uffc1\060\uffc1\063\uffc1\064\uffc1\065\uffc1\067" +
    "\uffc1\073\uffc1\001\002\000\026\016\073\017\070\023\100" +
    "\063\047\064\034\065\057\073\077\075\074\076\247\077" +
    "\101\001\002\000\046\010\uffdd\040\uffdd\042\uffdd\043\uffdd" +
    "\046\uffdd\047\uffdd\052\uffdd\053\uffdd\054\uffdd\055\uffdd\056" +
    "\uffdd\057\uffdd\060\uffdd\063\uffdd\064\uffdd\065\uffdd\067\uffdd" +
    "\073\uffdd\001\002\000\052\010\uffdc\016\104\017\105\040" +
    "\uffdc\042\uffdc\043\uffdc\046\uffdc\047\uffdc\052\uffdc\053\uffdc" +
    "\054\uffdc\055\uffdc\056\uffdc\057\uffdc\060\uffdc\063\uffdc\064" +
    "\uffdc\065\uffdc\067\uffdc\073\uffdc\001\002\000\046\010\uffdb" +
    "\040\uffdb\042\uffdb\043\uffdb\046\uffdb\047\uffdb\052\uffdb\053" +
    "\uffdb\054\uffdb\055\uffdb\056\uffdb\057\uffdb\060\uffdb\063\uffdb" +
    "\064\uffdb\065\uffdb\067\uffdb\073\uffdb\001\002\000\016\042" +
    "\ufff5\043\ufff5\046\ufff5\053\ufff5\056\ufff5\060\ufff5\001\002" +
    "\000\010\035\222\037\223\041\254\001\002\000\040\010" +
    "\052\040\040\042\ufff0\043\ufff0\046\ufff0\047\035\052\032" +
    "\054\033\055\043\057\053\063\047\064\034\065\057\067" +
    "\037\073\042\001\002\000\010\042\257\043\260\046\261" +
    "\001\002\000\006\042\272\046\273\001\002\000\034\010" +
    "\052\040\040\046\ufff0\047\035\052\032\054\033\055\043" +
    "\057\053\063\047\064\034\065\057\067\037\073\042\001" +
    "\002\000\020\016\073\017\070\023\216\036\217\073\077" +
    "\075\074\077\101\001\002\000\004\040\262\001\002\000" +
    "\046\010\uffa4\040\uffa4\042\uffa4\043\uffa4\046\uffa4\047\uffa4" +
    "\052\uffa4\053\uffa4\054\uffa4\055\uffa4\056\uffa4\057\uffa4\060" +
    "\uffa4\063\uffa4\064\uffa4\065\uffa4\067\uffa4\073\uffa4\001\002" +
    "\000\010\035\222\037\223\041\264\001\002\000\040\010" +
    "\052\040\040\042\ufff0\043\ufff0\046\ufff0\047\035\052\032" +
    "\054\033\055\043\057\053\063\047\064\034\065\057\067" +
    "\037\073\042\001\002\000\010\042\uff9f\043\260\046\uff9f" +
    "\001\002\000\006\042\uffa0\046\uffa0\001\002\000\004\046" +
    "\270\001\002\000\004\040\271\001\002\000\046\010\uffa3" +
    "\040\uffa3\042\uffa3\043\uffa3\046\uffa3\047\uffa3\052\uffa3\053" +
    "\uffa3\054\uffa3\055\uffa3\056\uffa3\057\uffa3\060\uffa3\063\uffa3" +
    "\064\uffa3\065\uffa3\067\uffa3\073\uffa3\001\002\000\034\010" +
    "\052\040\040\046\ufff0\047\035\052\032\054\033\055\043" +
    "\057\053\063\047\064\034\065\057\067\037\073\042\001" +
    "\002\000\004\040\274\001\002\000\046\010\uffa2\040\uffa2" +
    "\042\uffa2\043\uffa2\046\uffa2\047\uffa2\052\uffa2\053\uffa2\054" +
    "\uffa2\055\uffa2\056\uffa2\057\uffa2\060\uffa2\063\uffa2\064\uffa2" +
    "\065\uffa2\067\uffa2\073\uffa2\001\002\000\004\046\276\001" +
    "\002\000\004\040\277\001\002\000\046\010\uffa1\040\uffa1" +
    "\042\uffa1\043\uffa1\046\uffa1\047\uffa1\052\uffa1\053\uffa1\054" +
    "\uffa1\055\uffa1\056\uffa1\057\uffa1\060\uffa1\063\uffa1\064\uffa1" +
    "\065\uffa1\067\uffa1\073\uffa1\001\002\000\006\070\302\071" +
    "\301\001\002\000\004\023\320\001\002\000\004\023\303" +
    "\001\002\000\024\016\073\017\070\023\100\024\306\073" +
    "\077\074\305\075\074\076\304\077\101\001\002\000\006" +
    "\024\uffa9\072\316\001\002\000\006\024\uffaa\072\314\001" +
    "\002\000\046\010\uffaf\040\uffaf\042\uffaf\043\uffaf\046\uffaf" +
    "\047\uffaf\052\uffaf\053\uffaf\054\uffaf\055\uffaf\056\uffaf\057" +
    "\uffaf\060\uffaf\063\uffaf\064\uffaf\065\uffaf\067\uffaf\073\uffaf" +
    "\001\002\000\012\016\104\017\105\024\uffa8\072\312\001" +
    "\002\000\004\024\311\001\002\000\046\010\uffb1\040\uffb1" +
    "\042\uffb1\043\uffb1\046\uffb1\047\uffb1\052\uffb1\053\uffb1\054" +
    "\uffb1\055\uffb1\056\uffb1\057\uffb1\060\uffb1\063\uffb1\064\uffb1" +
    "\065\uffb1\067\uffb1\073\uffb1\001\002\000\022\016\073\017" +
    "\070\023\100\073\077\074\305\075\074\076\304\077\101" +
    "\001\002\000\004\024\uffab\001\002\000\022\016\073\017" +
    "\070\023\100\073\077\074\305\075\074\076\304\077\101" +
    "\001\002\000\004\024\uffad\001\002\000\022\016\073\017" +
    "\070\023\100\073\077\074\305\075\074\076\304\077\101" +
    "\001\002\000\004\024\uffac\001\002\000\024\016\073\017" +
    "\070\023\100\024\321\073\077\074\305\075\074\076\304" +
    "\077\101\001\002\000\046\010\uffae\040\uffae\042\uffae\043" +
    "\uffae\046\uffae\047\uffae\052\uffae\053\uffae\054\uffae\055\uffae" +
    "\056\uffae\057\uffae\060\uffae\063\uffae\064\uffae\065\uffae\067" +
    "\uffae\073\uffae\001\002\000\004\024\323\001\002\000\046" +
    "\010\uffb0\040\uffb0\042\uffb0\043\uffb0\046\uffb0\047\uffb0\052" +
    "\uffb0\053\uffb0\054\uffb0\055\uffb0\056\uffb0\057\uffb0\060\uffb0" +
    "\063\uffb0\064\uffb0\065\uffb0\067\uffb0\073\uffb0\001\002\000" +
    "\016\042\ufff8\043\ufff8\046\ufff8\053\ufff8\056\ufff8\060\ufff8" +
    "\001\002\000\046\010\052\040\040\042\ufff0\043\ufff0\046" +
    "\ufff0\047\035\052\032\053\ufff0\054\033\055\043\056\ufff0" +
    "\057\053\060\ufff0\063\047\064\034\065\057\067\037\073" +
    "\042\001\002\000\052\010\052\016\104\017\105\040\040" +
    "\042\ufff0\043\ufff0\046\ufff0\047\035\052\032\053\ufff0\054" +
    "\033\055\043\056\ufff0\057\053\060\ufff0\063\047\064\034" +
    "\065\057\067\037\073\042\001\002\000\016\042\ufff1\043" +
    "\ufff1\046\ufff1\053\ufff1\056\ufff1\060\ufff1\001\002\000\016" +
    "\042\ufff2\043\ufff2\046\ufff2\053\ufff2\056\ufff2\060\ufff2\001" +
    "\002\000\040\010\052\035\222\037\223\040\040\046\ufff0" +
    "\047\035\052\032\054\033\055\043\057\053\063\047\064" +
    "\034\065\057\067\037\073\042\001\002\000\004\046\333" +
    "\001\002\000\004\054\334\001\002\000\046\010\uffb9\040" +
    "\uffb9\042\uffb9\043\uffb9\046\uffb9\047\uffb9\052\uffb9\053\uffb9" +
    "\054\uffb9\055\uffb9\056\uffb9\057\uffb9\060\uffb9\063\uffb9\064" +
    "\uffb9\065\uffb9\067\uffb9\073\uffb9\001\002\000\004\073\336" +
    "\001\002\000\006\046\340\053\337\001\002\000\010\075" +
    "\343\076\344\077\345\001\002\000\004\052\341\001\002" +
    "\000\046\010\uff9d\040\uff9d\042\uff9d\043\uff9d\046\uff9d\047" +
    "\uff9d\052\uff9d\053\uff9d\054\uff9d\055\uff9d\056\uff9d\057\uff9d" +
    "\060\uff9d\063\uff9d\064\uff9d\065\uff9d\067\uff9d\073\uff9d\001" +
    "\002\000\036\010\052\040\040\046\ufff0\047\035\052\032" +
    "\053\ufff0\054\033\055\043\057\053\063\047\064\034\065" +
    "\057\067\037\073\042\001\002\000\036\010\uff99\040\uff99" +
    "\046\uff99\047\uff99\052\uff99\053\uff99\054\uff99\055\uff99\057" +
    "\uff99\063\uff99\064\uff99\065\uff99\067\uff99\073\uff99\001\002" +
    "\000\036\010\uff97\040\uff97\046\uff97\047\uff97\052\uff97\053" +
    "\uff97\054\uff97\055\uff97\057\uff97\063\uff97\064\uff97\065\uff97" +
    "\067\uff97\073\uff97\001\002\000\036\010\uff98\040\uff98\046" +
    "\uff98\047\uff98\052\uff98\053\uff98\054\uff98\055\uff98\057\uff98" +
    "\063\uff98\064\uff98\065\uff98\067\uff98\073\uff98\001\002\000" +
    "\006\046\350\053\351\001\002\000\046\010\uff9e\040\uff9e" +
    "\042\uff9e\043\uff9e\046\uff9e\047\uff9e\052\uff9e\053\uff9e\054" +
    "\uff9e\055\uff9e\056\uff9e\057\uff9e\060\uff9e\063\uff9e\064\uff9e" +
    "\065\uff9e\067\uff9e\073\uff9e\001\002\000\004\052\361\001" +
    "\002\000\012\042\353\075\343\076\344\077\345\001\002" +
    "\000\036\010\052\040\040\046\ufff0\047\035\052\032\053" +
    "\ufff0\054\033\055\043\057\053\063\047\064\034\065\057" +
    "\067\037\073\042\001\002\000\034\010\052\040\040\046" +
    "\ufff0\047\035\052\032\054\033\055\043\057\053\063\047" +
    "\064\034\065\057\067\037\073\042\001\002\000\004\046" +
    "\355\001\002\000\004\052\356\001\002\000\046\010\uff9a" +
    "\040\uff9a\042\uff9a\043\uff9a\046\uff9a\047\uff9a\052\uff9a\053" +
    "\uff9a\054\uff9a\055\uff9a\056\uff9a\057\uff9a\060\uff9a\063\uff9a" +
    "\064\uff9a\065\uff9a\067\uff9a\073\uff9a\001\002\000\006\046" +
    "\350\053\351\001\002\000\046\010\uff9c\040\uff9c\042\uff9c" +
    "\043\uff9c\046\uff9c\047\uff9c\052\uff9c\053\uff9c\054\uff9c\055" +
    "\uff9c\056\uff9c\057\uff9c\060\uff9c\063\uff9c\064\uff9c\065\uff9c" +
    "\067\uff9c\073\uff9c\001\002\000\046\010\uff9b\040\uff9b\042" +
    "\uff9b\043\uff9b\046\uff9b\047\uff9b\052\uff9b\053\uff9b\054\uff9b" +
    "\055\uff9b\056\uff9b\057\uff9b\060\uff9b\063\uff9b\064\uff9b\065" +
    "\uff9b\067\uff9b\073\uff9b\001\002\000\010\012\026\013\027" +
    "\014\030\001\002\000\006\015\364\024\uffe8\001\002\000" +
    "\004\073\022\001\002\000\004\024\uffe9\001\002\000\010" +
    "\012\026\013\027\014\030\001\002\000\034\010\052\040" +
    "\040\046\ufff0\047\035\052\032\054\033\055\043\057\053" +
    "\063\047\064\034\065\057\067\037\073\042\001\002\000" +
    "\004\046\371\001\002\000\004\045\372\001\002\000\012" +
    "\002\uffee\044\uffee\045\uffee\050\uffee\001\002\000\004\023" +
    "\374\001\002\000\006\024\375\051\376\001\002\000\034" +
    "\010\052\040\040\046\ufff0\047\035\052\032\054\033\055" +
    "\043\057\053\063\047\064\034\065\057\067\037\073\042" +
    "\001\002\000\004\073\022\001\002\000\004\024\u0100\001" +
    "\002\000\034\010\052\040\040\046\ufff0\047\035\052\032" +
    "\054\033\055\043\057\053\063\047\064\034\065\057\067" +
    "\037\073\042\001\002\000\004\046\u0102\001\002\000\004" +
    "\050\u0103\001\002\000\012\002\uffed\044\uffed\045\uffed\050" +
    "\uffed\001\002\000\004\046\u0105\001\002\000\004\050\u0106" +
    "\001\002\000\012\002\uffec\044\uffec\045\uffec\050\uffec\001" +
    "\002\000\004\002\uffff\001\002\000\004\002\001\001\002" +
    "" });

  /** Access to parse-action table. */
  public short[][] action_table() {return _action_table;}

  /** <code>reduce_goto</code> table. */
  protected static final short[][] _reduce_table = 
    unpackFromStrings(new String[] {
    "\000\u0106\000\004\002\003\001\001\000\002\001\001\000" +
    "\012\010\006\011\010\033\007\034\005\001\001\000\002" +
    "\001\001\000\012\010\006\011\010\033\007\034\u0106\001" +
    "\001\000\002\001\001\000\012\010\006\011\010\033\007" +
    "\034\012\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\004\041\022\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\004" +
    "\006\030\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\030\003\040\005\045\012\053\013\055" +
    "\014\050\015\035\016\054\017\043\020\057\035\047\036" +
    "\044\001\001\000\002\001\001\000\022\021\214\022\070" +
    "\023\075\024\071\025\217\026\330\027\213\030\212\001" +
    "\001\000\002\001\001\000\012\021\325\022\070\023\075" +
    "\024\071\001\001\000\030\003\040\005\045\012\053\013" +
    "\055\014\050\015\035\016\054\017\043\020\057\035\323" +
    "\036\044\001\001\000\002\001\001\000\022\021\214\022" +
    "\070\023\075\024\071\025\217\026\252\027\213\030\212" +
    "\001\001\000\030\003\040\005\045\012\053\013\055\014" +
    "\050\015\035\016\054\017\043\020\057\035\251\036\044" +
    "\001\001\000\002\001\001\000\030\003\040\005\045\012" +
    "\053\013\055\014\050\015\035\016\054\017\043\020\057" +
    "\035\207\036\044\001\001\000\030\003\040\005\045\012" +
    "\053\013\055\014\050\015\035\016\054\017\043\020\057" +
    "\035\206\036\044\001\001\000\030\003\040\005\045\012" +
    "\053\013\055\014\050\015\035\016\054\017\043\020\057" +
    "\035\205\036\044\001\001\000\030\003\040\005\045\012" +
    "\053\013\055\014\050\015\035\016\054\017\043\020\057" +
    "\035\204\036\044\001\001\000\002\001\001\000\002\001" +
    "\001\000\030\003\040\005\045\012\053\013\055\014\050" +
    "\015\035\016\054\017\043\020\057\035\201\036\044\001" +
    "\001\000\002\001\001\000\002\001\001\000\030\003\040" +
    "\005\045\012\053\013\055\014\050\015\035\016\054\017" +
    "\043\020\057\035\063\036\044\001\001\000\030\003\040" +
    "\005\045\012\053\013\055\014\050\015\035\016\054\017" +
    "\043\020\057\035\062\036\044\001\001\000\030\003\040" +
    "\005\045\012\053\013\055\014\050\015\035\016\054\017" +
    "\043\020\057\035\061\036\044\001\001\000\002\001\001" +
    "\000\030\003\040\005\045\012\053\013\055\014\050\015" +
    "\035\016\054\017\043\020\057\035\060\036\044\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\004\007\131\001\001" +
    "\000\012\021\074\022\070\023\075\024\071\001\001\000" +
    "\004\024\126\001\001\000\002\001\001\000\002\001\001" +
    "\000\004\024\125\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\012\021\101" +
    "\022\070\023\075\024\071\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\010\022\114\023\075" +
    "\024\071\001\001\000\010\022\105\023\075\024\071\001" +
    "\001\000\002\001\001\000\006\023\113\024\071\001\001" +
    "\000\006\023\112\024\071\001\001\000\006\023\111\024" +
    "\071\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\012\021\116\022\070\023" +
    "\075\024\071\001\001\000\030\003\040\005\045\012\053" +
    "\013\055\014\050\015\035\016\054\017\043\020\057\035" +
    "\120\036\044\001\001\000\012\021\122\022\070\023\075" +
    "\024\071\001\001\000\002\001\001\000\002\001\001\000" +
    "\030\003\040\005\045\012\053\013\055\014\050\015\035" +
    "\016\054\017\043\020\057\035\123\036\044\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\012\021\133\022\070\023\075\024\071\001\001" +
    "\000\002\001\001\000\012\021\135\022\070\023\075\024" +
    "\071\001\001\000\030\003\040\005\045\012\053\013\055" +
    "\014\050\015\035\016\054\017\043\020\057\035\137\036" +
    "\044\001\001\000\012\021\141\022\070\023\075\024\071" +
    "\001\001\000\002\001\001\000\002\001\001\000\030\003" +
    "\040\005\045\012\053\013\055\014\050\015\035\016\054" +
    "\017\043\020\057\035\142\036\044\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\004\042\174" +
    "\001\001\000\004\006\147\001\001\000\002\001\001\000" +
    "\004\037\156\001\001\000\014\005\154\021\153\022\070" +
    "\023\075\024\071\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\004\042\165\001\001\000\004\006\161\001\001\000" +
    "\002\001\001\000\004\037\163\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\004\006\167\001" +
    "\001\000\002\001\001\000\004\037\171\001\001\000\002" +
    "\001\001\000\004\042\173\001\001\000\002\001\001\000" +
    "\002\001\001\000\004\006\176\001\001\000\002\001\001" +
    "\000\004\037\200\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\022\021\214\022\070\023\075\024\071" +
    "\025\217\026\220\027\213\030\212\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\022\021\226" +
    "\022\070\023\075\024\071\025\217\026\227\027\213\030" +
    "\212\001\001\000\016\021\214\022\070\023\075\024\071" +
    "\025\217\030\225\001\001\000\002\001\001\000\002\001" +
    "\001\000\020\021\214\022\070\023\075\024\071\025\217" +
    "\027\224\030\212\001\001\000\020\021\214\022\070\023" +
    "\075\024\071\025\217\027\223\030\212\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\012\021\244" +
    "\022\070\023\075\024\071\001\001\000\012\021\243\022" +
    "\070\023\075\024\071\001\001\000\012\021\242\022\070" +
    "\023\075\024\071\001\001\000\012\021\241\022\070\023" +
    "\075\024\071\001\001\000\012\021\240\022\070\023\075" +
    "\024\071\001\001\000\012\021\237\022\070\023\075\024" +
    "\071\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\014\005\250\021\247\022\070\023\075\024\071" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\030\003\040" +
    "\005\045\012\053\013\055\014\050\015\035\016\054\017" +
    "\043\020\057\035\254\036\044\001\001\000\004\040\255" +
    "\001\001\000\002\001\001\000\030\003\040\005\045\012" +
    "\053\013\055\014\050\015\035\016\054\017\043\020\057" +
    "\035\266\036\044\001\001\000\022\021\214\022\070\023" +
    "\075\024\071\025\217\026\262\027\213\030\212\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\030\003\040\005\045\012\053\013\055\014\050\015\035" +
    "\016\054\017\043\020\057\035\264\036\044\001\001\000" +
    "\004\040\265\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\030\003\040\005" +
    "\045\012\053\013\055\014\050\015\035\016\054\017\043" +
    "\020\057\035\274\036\044\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\014\021\306\022\070\023\075\024\071\032\307" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\014\021\306\022\070\023\075\024\071\032\312\001" +
    "\001\000\002\001\001\000\014\021\306\022\070\023\075" +
    "\024\071\032\314\001\001\000\002\001\001\000\014\021" +
    "\306\022\070\023\075\024\071\032\316\001\001\000\002" +
    "\001\001\000\014\021\306\022\070\023\075\024\071\032" +
    "\321\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\030\003\040\005\045\012" +
    "\053\013\055\014\050\015\035\016\054\017\043\020\057" +
    "\035\327\036\044\001\001\000\030\003\040\005\045\012" +
    "\053\013\055\014\050\015\035\016\054\017\043\020\057" +
    "\035\326\036\044\001\001\000\002\001\001\000\002\001" +
    "\001\000\030\003\040\005\045\012\053\013\055\014\050" +
    "\015\035\016\054\017\043\020\057\035\331\036\044\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\004\031\341\001" +
    "\001\000\002\001\001\000\002\001\001\000\030\003\040" +
    "\005\045\012\053\013\055\014\050\015\035\016\054\017" +
    "\043\020\057\035\345\036\044\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\004\004\346\001" +
    "\001\000\002\001\001\000\002\001\001\000\004\031\351" +
    "\001\001\000\030\003\040\005\045\012\053\013\055\014" +
    "\050\015\035\016\054\017\043\020\057\035\356\036\044" +
    "\001\001\000\030\003\040\005\045\012\053\013\055\014" +
    "\050\015\035\016\054\017\043\020\057\035\353\036\044" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\004\004\357\001\001\000\002\001\001\000\002" +
    "\001\001\000\004\006\362\001\001\000\002\001\001\000" +
    "\004\041\364\001\001\000\002\001\001\000\004\006\366" +
    "\001\001\000\030\003\040\005\045\012\053\013\055\014" +
    "\050\015\035\016\054\017\043\020\057\035\367\036\044" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\030\003\040" +
    "\005\045\012\053\013\055\014\050\015\035\016\054\017" +
    "\043\020\057\035\u0103\036\044\001\001\000\004\041\376" +
    "\001\001\000\002\001\001\000\030\003\040\005\045\012" +
    "\053\013\055\014\050\015\035\016\054\017\043\020\057" +
    "\035\u0100\036\044\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001" });

  /** Access to <code>reduce_goto</code> table. */
  public short[][] reduce_table() {return _reduce_table;}

  /** Instance of action encapsulation class. */
  protected CUP$VParser$actions action_obj;

  /** Action encapsulation object initializer. */
  protected void init_actions()
    {
      action_obj = new CUP$VParser$actions(this);
    }

  /** Invoke a user supplied parse action. */
  public java_cup.runtime.Symbol do_action(
    int                        act_num,
    java_cup.runtime.lr_parser parser,
    java.util.Stack            stack,
    int                        top)
    throws java.lang.Exception
  {
    /* call code in generated class */
    return action_obj.CUP$VParser$do_action(act_num, parser, stack, top);
  }

  /** Indicates start state. */
  public int start_state() {return 0;}
  /** Indicates start production. */
  public int start_production() {return 0;}

  /** <code>EOF</code> Symbol index. */
  public int EOF_sym() {return 0;}

  /** <code>error</code> Symbol index. */
  public int error_sym() {return 1;}




    private VCompilerFrame vCompilerFrame;
    private SymbolTable symbolTable;
    private LinkedList<Instruction> AST;

    public VParser(VLexer vLexer, VCompilerFrame vCompilerFrame) { 
        super(vLexer);
        this.vCompilerFrame = vCompilerFrame;
        this.symbolTable = new SymbolTable();
        this.AST = new LinkedList<>();
    }

    /**
     * Metodo que crea nuevas instancias de la clase Statement y las guarda en una lista enlazada.
     * @param varList Lista de id's para el atributo id de la instancia que se creara.
     * @param dataType Tipo de dato de todas las instancias que se crearan.
     * @return LinkedList con todas las instancias creadas.
     */
    private LinkedList<Instruction> getStatements(LinkedList<String> varList, Type dataType){
        LinkedList<Instruction> declarations = new LinkedList<>();
        for(String varName : varList){
            declarations.add(new Statement(varName, dataType));
        }
        return declarations;
    }


    public void syntax_error(Symbol s){
        vCompilerFrame.printMessage("Error Sintactico: No se esperaba [" +s.value+ "]. Linea " +s.left+ " Columna " +s.right+"\n");
    }

    public void unrecovered_syntax_error(Symbol s){
       
    } 


/** Cup generated class to encapsulate user supplied action code.*/
@SuppressWarnings({"rawtypes", "unchecked", "unused"})
class CUP$VParser$actions {
  private final VParser parser;

  /** Constructor */
  CUP$VParser$actions(VParser parser) {
    this.parser = parser;
  }

  /** Method 0 with the actual generated action code for actions 0 to 300. */
  public final java_cup.runtime.Symbol CUP$VParser$do_action_part00000000(
    int                        CUP$VParser$act_num,
    java_cup.runtime.lr_parser CUP$VParser$parser,
    java.util.Stack            CUP$VParser$stack,
    int                        CUP$VParser$top)
    throws java.lang.Exception
    {
      /* Symbol object for return from actions */
      java_cup.runtime.Symbol CUP$VParser$result;

      /* select the action based on the action number */
      switch (CUP$VParser$act_num)
        {
          /*. . . . . . . . . . . . . . . . . . . .*/
          case 0: // $START ::= s EOF 
            {
              Object RESULT =null;
		int start_valleft = ((java_cup.runtime.Symbol)CUP$VParser$stack.elementAt(CUP$VParser$top-1)).left;
		int start_valright = ((java_cup.runtime.Symbol)CUP$VParser$stack.elementAt(CUP$VParser$top-1)).right;
		Object start_val = (Object)((java_cup.runtime.Symbol) CUP$VParser$stack.elementAt(CUP$VParser$top-1)).value;
		RESULT = start_val;
              CUP$VParser$result = parser.getSymbolFactory().newSymbol("$START",0, ((java_cup.runtime.Symbol)CUP$VParser$stack.elementAt(CUP$VParser$top-1)), ((java_cup.runtime.Symbol)CUP$VParser$stack.peek()), RESULT);
            }
          /* ACCEPT */
          CUP$VParser$parser.done_parsing();
          return CUP$VParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 1: // s ::= VB_SEPARATOR vb_code 
            {
              Object RESULT =null;
		int codeleft = ((java_cup.runtime.Symbol)CUP$VParser$stack.peek()).left;
		int coderight = ((java_cup.runtime.Symbol)CUP$VParser$stack.peek()).right;
		LinkedList<Instruction> code = (LinkedList<Instruction>)((java_cup.runtime.Symbol) CUP$VParser$stack.peek()).value;
		      
            for(var instruction : code){
                instruction.analyze(symbolTable);
            }
        
              CUP$VParser$result = parser.getSymbolFactory().newSymbol("s",0, ((java_cup.runtime.Symbol)CUP$VParser$stack.elementAt(CUP$VParser$top-1)), ((java_cup.runtime.Symbol)CUP$VParser$stack.peek()), RESULT);
            }
          return CUP$VParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 2: // vb_code ::= vb_function vb_code 
            {
              LinkedList<Instruction> RESULT =null;
		int instructionleft = ((java_cup.runtime.Symbol)CUP$VParser$stack.elementAt(CUP$VParser$top-1)).left;
		int instructionright = ((java_cup.runtime.Symbol)CUP$VParser$stack.elementAt(CUP$VParser$top-1)).right;
		Instruction instruction = (Instruction)((java_cup.runtime.Symbol) CUP$VParser$stack.elementAt(CUP$VParser$top-1)).value;
		int instructionsListleft = ((java_cup.runtime.Symbol)CUP$VParser$stack.peek()).left;
		int instructionsListright = ((java_cup.runtime.Symbol)CUP$VParser$stack.peek()).right;
		LinkedList<Instruction> instructionsList = (LinkedList<Instruction>)((java_cup.runtime.Symbol) CUP$VParser$stack.peek()).value;
		 instructionsList.addFirst(instruction); RESULT = instructionsList; 
              CUP$VParser$result = parser.getSymbolFactory().newSymbol("vb_code",26, ((java_cup.runtime.Symbol)CUP$VParser$stack.elementAt(CUP$VParser$top-1)), ((java_cup.runtime.Symbol)CUP$VParser$stack.peek()), RESULT);
            }
          return CUP$VParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 3: // vb_code ::= vb_procedure vb_code 
            {
              LinkedList<Instruction> RESULT =null;
		int instructionleft = ((java_cup.runtime.Symbol)CUP$VParser$stack.elementAt(CUP$VParser$top-1)).left;
		int instructionright = ((java_cup.runtime.Symbol)CUP$VParser$stack.elementAt(CUP$VParser$top-1)).right;
		Instruction instruction = (Instruction)((java_cup.runtime.Symbol) CUP$VParser$stack.elementAt(CUP$VParser$top-1)).value;
		int instructionsListleft = ((java_cup.runtime.Symbol)CUP$VParser$stack.peek()).left;
		int instructionsListright = ((java_cup.runtime.Symbol)CUP$VParser$stack.peek()).right;
		LinkedList<Instruction> instructionsList = (LinkedList<Instruction>)((java_cup.runtime.Symbol) CUP$VParser$stack.peek()).value;
		 instructionsList.addFirst(instruction); RESULT = instructionsList; 
              CUP$VParser$result = parser.getSymbolFactory().newSymbol("vb_code",26, ((java_cup.runtime.Symbol)CUP$VParser$stack.elementAt(CUP$VParser$top-1)), ((java_cup.runtime.Symbol)CUP$VParser$stack.peek()), RESULT);
            }
          return CUP$VParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 4: // vb_code ::= 
            {
              LinkedList<Instruction> RESULT =null;
		 RESULT = new LinkedList<Instruction>(); 
              CUP$VParser$result = parser.getSymbolFactory().newSymbol("vb_code",26, ((java_cup.runtime.Symbol)CUP$VParser$stack.peek()), RESULT);
            }
          return CUP$VParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 5: // vb_code_statements ::= vb_statement vb_code_statements 
            {
              LinkedList<Instruction> RESULT =null;
		int instructionsleft = ((java_cup.runtime.Symbol)CUP$VParser$stack.elementAt(CUP$VParser$top-1)).left;
		int instructionsright = ((java_cup.runtime.Symbol)CUP$VParser$stack.elementAt(CUP$VParser$top-1)).right;
		LinkedList<Instruction> instructions = (LinkedList<Instruction>)((java_cup.runtime.Symbol) CUP$VParser$stack.elementAt(CUP$VParser$top-1)).value;
		int instructionsListleft = ((java_cup.runtime.Symbol)CUP$VParser$stack.peek()).left;
		int instructionsListright = ((java_cup.runtime.Symbol)CUP$VParser$stack.peek()).right;
		LinkedList<Instruction> instructionsList = (LinkedList<Instruction>)((java_cup.runtime.Symbol) CUP$VParser$stack.peek()).value;
		 instructionsList.addAll(0, instructions); RESULT = instructionsList; 
              CUP$VParser$result = parser.getSymbolFactory().newSymbol("vb_code_statements",27, ((java_cup.runtime.Symbol)CUP$VParser$stack.elementAt(CUP$VParser$top-1)), ((java_cup.runtime.Symbol)CUP$VParser$stack.peek()), RESULT);
            }
          return CUP$VParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 6: // vb_code_statements ::= vb_statement_assignment vb_code_statements 
            {
              LinkedList<Instruction> RESULT =null;
		int instructionleft = ((java_cup.runtime.Symbol)CUP$VParser$stack.elementAt(CUP$VParser$top-1)).left;
		int instructionright = ((java_cup.runtime.Symbol)CUP$VParser$stack.elementAt(CUP$VParser$top-1)).right;
		Instruction instruction = (Instruction)((java_cup.runtime.Symbol) CUP$VParser$stack.elementAt(CUP$VParser$top-1)).value;
		int instructionsListleft = ((java_cup.runtime.Symbol)CUP$VParser$stack.peek()).left;
		int instructionsListright = ((java_cup.runtime.Symbol)CUP$VParser$stack.peek()).right;
		LinkedList<Instruction> instructionsList = (LinkedList<Instruction>)((java_cup.runtime.Symbol) CUP$VParser$stack.peek()).value;
		 instructionsList.addFirst(instruction); RESULT = instructionsList; 
              CUP$VParser$result = parser.getSymbolFactory().newSymbol("vb_code_statements",27, ((java_cup.runtime.Symbol)CUP$VParser$stack.elementAt(CUP$VParser$top-1)), ((java_cup.runtime.Symbol)CUP$VParser$stack.peek()), RESULT);
            }
          return CUP$VParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 7: // vb_code_statements ::= vb_assignment vb_code_statements 
            {
              LinkedList<Instruction> RESULT =null;
		int instructionleft = ((java_cup.runtime.Symbol)CUP$VParser$stack.elementAt(CUP$VParser$top-1)).left;
		int instructionright = ((java_cup.runtime.Symbol)CUP$VParser$stack.elementAt(CUP$VParser$top-1)).right;
		Instruction instruction = (Instruction)((java_cup.runtime.Symbol) CUP$VParser$stack.elementAt(CUP$VParser$top-1)).value;
		int instructionsListleft = ((java_cup.runtime.Symbol)CUP$VParser$stack.peek()).left;
		int instructionsListright = ((java_cup.runtime.Symbol)CUP$VParser$stack.peek()).right;
		LinkedList<Instruction> instructionsList = (LinkedList<Instruction>)((java_cup.runtime.Symbol) CUP$VParser$stack.peek()).value;
		 instructionsList.addFirst(instruction); RESULT = instructionsList; 
              CUP$VParser$result = parser.getSymbolFactory().newSymbol("vb_code_statements",27, ((java_cup.runtime.Symbol)CUP$VParser$stack.elementAt(CUP$VParser$top-1)), ((java_cup.runtime.Symbol)CUP$VParser$stack.peek()), RESULT);
            }
          return CUP$VParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 8: // vb_code_statements ::= vb_while vb_code_statements 
            {
              LinkedList<Instruction> RESULT =null;
		int instructionleft = ((java_cup.runtime.Symbol)CUP$VParser$stack.elementAt(CUP$VParser$top-1)).left;
		int instructionright = ((java_cup.runtime.Symbol)CUP$VParser$stack.elementAt(CUP$VParser$top-1)).right;
		Instruction instruction = (Instruction)((java_cup.runtime.Symbol) CUP$VParser$stack.elementAt(CUP$VParser$top-1)).value;
		int instructionsListleft = ((java_cup.runtime.Symbol)CUP$VParser$stack.peek()).left;
		int instructionsListright = ((java_cup.runtime.Symbol)CUP$VParser$stack.peek()).right;
		LinkedList<Instruction> instructionsList = (LinkedList<Instruction>)((java_cup.runtime.Symbol) CUP$VParser$stack.peek()).value;
		 instructionsList.addFirst(instruction); RESULT = instructionsList; 
              CUP$VParser$result = parser.getSymbolFactory().newSymbol("vb_code_statements",27, ((java_cup.runtime.Symbol)CUP$VParser$stack.elementAt(CUP$VParser$top-1)), ((java_cup.runtime.Symbol)CUP$VParser$stack.peek()), RESULT);
            }
          return CUP$VParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 9: // vb_code_statements ::= vb_do_while vb_code_statements 
            {
              LinkedList<Instruction> RESULT =null;
		int instructionleft = ((java_cup.runtime.Symbol)CUP$VParser$stack.elementAt(CUP$VParser$top-1)).left;
		int instructionright = ((java_cup.runtime.Symbol)CUP$VParser$stack.elementAt(CUP$VParser$top-1)).right;
		Instruction instruction = (Instruction)((java_cup.runtime.Symbol) CUP$VParser$stack.elementAt(CUP$VParser$top-1)).value;
		int instructionsListleft = ((java_cup.runtime.Symbol)CUP$VParser$stack.peek()).left;
		int instructionsListright = ((java_cup.runtime.Symbol)CUP$VParser$stack.peek()).right;
		LinkedList<Instruction> instructionsList = (LinkedList<Instruction>)((java_cup.runtime.Symbol) CUP$VParser$stack.peek()).value;
		 instructionsList.addFirst(instruction); RESULT = instructionsList; 
              CUP$VParser$result = parser.getSymbolFactory().newSymbol("vb_code_statements",27, ((java_cup.runtime.Symbol)CUP$VParser$stack.elementAt(CUP$VParser$top-1)), ((java_cup.runtime.Symbol)CUP$VParser$stack.peek()), RESULT);
            }
          return CUP$VParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 10: // vb_code_statements ::= vb_for vb_code_statements 
            {
              LinkedList<Instruction> RESULT =null;
		int instructionleft = ((java_cup.runtime.Symbol)CUP$VParser$stack.elementAt(CUP$VParser$top-1)).left;
		int instructionright = ((java_cup.runtime.Symbol)CUP$VParser$stack.elementAt(CUP$VParser$top-1)).right;
		Instruction instruction = (Instruction)((java_cup.runtime.Symbol) CUP$VParser$stack.elementAt(CUP$VParser$top-1)).value;
		int instructionsListleft = ((java_cup.runtime.Symbol)CUP$VParser$stack.peek()).left;
		int instructionsListright = ((java_cup.runtime.Symbol)CUP$VParser$stack.peek()).right;
		LinkedList<Instruction> instructionsList = (LinkedList<Instruction>)((java_cup.runtime.Symbol) CUP$VParser$stack.peek()).value;
		 instructionsList.addFirst(instruction); RESULT = instructionsList; 
              CUP$VParser$result = parser.getSymbolFactory().newSymbol("vb_code_statements",27, ((java_cup.runtime.Symbol)CUP$VParser$stack.elementAt(CUP$VParser$top-1)), ((java_cup.runtime.Symbol)CUP$VParser$stack.peek()), RESULT);
            }
          return CUP$VParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 11: // vb_code_statements ::= vb_if vb_code_statements 
            {
              LinkedList<Instruction> RESULT =null;
		int instructionleft = ((java_cup.runtime.Symbol)CUP$VParser$stack.elementAt(CUP$VParser$top-1)).left;
		int instructionright = ((java_cup.runtime.Symbol)CUP$VParser$stack.elementAt(CUP$VParser$top-1)).right;
		Instruction instruction = (Instruction)((java_cup.runtime.Symbol) CUP$VParser$stack.elementAt(CUP$VParser$top-1)).value;
		int instructionsListleft = ((java_cup.runtime.Symbol)CUP$VParser$stack.peek()).left;
		int instructionsListright = ((java_cup.runtime.Symbol)CUP$VParser$stack.peek()).right;
		LinkedList<Instruction> instructionsList = (LinkedList<Instruction>)((java_cup.runtime.Symbol) CUP$VParser$stack.peek()).value;
		 instructionsList.addFirst(instruction); RESULT = instructionsList; 
              CUP$VParser$result = parser.getSymbolFactory().newSymbol("vb_code_statements",27, ((java_cup.runtime.Symbol)CUP$VParser$stack.elementAt(CUP$VParser$top-1)), ((java_cup.runtime.Symbol)CUP$VParser$stack.peek()), RESULT);
            }
          return CUP$VParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 12: // vb_code_statements ::= vb_switch vb_code_statements 
            {
              LinkedList<Instruction> RESULT =null;

              CUP$VParser$result = parser.getSymbolFactory().newSymbol("vb_code_statements",27, ((java_cup.runtime.Symbol)CUP$VParser$stack.elementAt(CUP$VParser$top-1)), ((java_cup.runtime.Symbol)CUP$VParser$stack.peek()), RESULT);
            }
          return CUP$VParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 13: // vb_code_statements ::= vb_data_request vb_code_statements 
            {
              LinkedList<Instruction> RESULT =null;

              CUP$VParser$result = parser.getSymbolFactory().newSymbol("vb_code_statements",27, ((java_cup.runtime.Symbol)CUP$VParser$stack.elementAt(CUP$VParser$top-1)), ((java_cup.runtime.Symbol)CUP$VParser$stack.peek()), RESULT);
            }
          return CUP$VParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 14: // vb_code_statements ::= vb_screen_messages vb_code_statements 
            {
              LinkedList<Instruction> RESULT =null;
		int instructionleft = ((java_cup.runtime.Symbol)CUP$VParser$stack.elementAt(CUP$VParser$top-1)).left;
		int instructionright = ((java_cup.runtime.Symbol)CUP$VParser$stack.elementAt(CUP$VParser$top-1)).right;
		Instruction instruction = (Instruction)((java_cup.runtime.Symbol) CUP$VParser$stack.elementAt(CUP$VParser$top-1)).value;
		int instructionsListleft = ((java_cup.runtime.Symbol)CUP$VParser$stack.peek()).left;
		int instructionsListright = ((java_cup.runtime.Symbol)CUP$VParser$stack.peek()).right;
		LinkedList<Instruction> instructionsList = (LinkedList<Instruction>)((java_cup.runtime.Symbol) CUP$VParser$stack.peek()).value;
		 instructionsList.addFirst(instruction); RESULT = instructionsList; 
              CUP$VParser$result = parser.getSymbolFactory().newSymbol("vb_code_statements",27, ((java_cup.runtime.Symbol)CUP$VParser$stack.elementAt(CUP$VParser$top-1)), ((java_cup.runtime.Symbol)CUP$VParser$stack.peek()), RESULT);
            }
          return CUP$VParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 15: // vb_code_statements ::= RETURN CHARACTER vb_code_statements 
            {
              LinkedList<Instruction> RESULT =null;

              CUP$VParser$result = parser.getSymbolFactory().newSymbol("vb_code_statements",27, ((java_cup.runtime.Symbol)CUP$VParser$stack.elementAt(CUP$VParser$top-2)), ((java_cup.runtime.Symbol)CUP$VParser$stack.peek()), RESULT);
            }
          return CUP$VParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 16: // vb_code_statements ::= RETURN vb_arithmetic_op vb_code_statements 
            {
              LinkedList<Instruction> RESULT =null;

              CUP$VParser$result = parser.getSymbolFactory().newSymbol("vb_code_statements",27, ((java_cup.runtime.Symbol)CUP$VParser$stack.elementAt(CUP$VParser$top-2)), ((java_cup.runtime.Symbol)CUP$VParser$stack.peek()), RESULT);
            }
          return CUP$VParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 17: // vb_code_statements ::= 
            {
              LinkedList<Instruction> RESULT =null;
		 RESULT = new LinkedList<Instruction>(); 
              CUP$VParser$result = parser.getSymbolFactory().newSymbol("vb_code_statements",27, ((java_cup.runtime.Symbol)CUP$VParser$stack.peek()), RESULT);
            }
          return CUP$VParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 18: // vb_function ::= vb_access_modifier FUNCTION ID PARENTHESISO BYVAL vb_params PARENTHESISC AS vb_data_type vb_code_statements END FUNCTION 
            {
              Instruction RESULT =null;
		int accessModifierleft = ((java_cup.runtime.Symbol)CUP$VParser$stack.elementAt(CUP$VParser$top-11)).left;
		int accessModifierright = ((java_cup.runtime.Symbol)CUP$VParser$stack.elementAt(CUP$VParser$top-11)).right;
		AccessModifier accessModifier = (AccessModifier)((java_cup.runtime.Symbol) CUP$VParser$stack.elementAt(CUP$VParser$top-11)).value;
		int nameleft = ((java_cup.runtime.Symbol)CUP$VParser$stack.elementAt(CUP$VParser$top-9)).left;
		int nameright = ((java_cup.runtime.Symbol)CUP$VParser$stack.elementAt(CUP$VParser$top-9)).right;
		String name = (String)((java_cup.runtime.Symbol) CUP$VParser$stack.elementAt(CUP$VParser$top-9)).value;
		int paramsleft = ((java_cup.runtime.Symbol)CUP$VParser$stack.elementAt(CUP$VParser$top-6)).left;
		int paramsright = ((java_cup.runtime.Symbol)CUP$VParser$stack.elementAt(CUP$VParser$top-6)).right;
		LinkedList<Type> params = (LinkedList<Type>)((java_cup.runtime.Symbol) CUP$VParser$stack.elementAt(CUP$VParser$top-6)).value;
		int returnTypeleft = ((java_cup.runtime.Symbol)CUP$VParser$stack.elementAt(CUP$VParser$top-3)).left;
		int returnTyperight = ((java_cup.runtime.Symbol)CUP$VParser$stack.elementAt(CUP$VParser$top-3)).right;
		Type returnType = (Type)((java_cup.runtime.Symbol) CUP$VParser$stack.elementAt(CUP$VParser$top-3)).value;
		int instructionsListleft = ((java_cup.runtime.Symbol)CUP$VParser$stack.elementAt(CUP$VParser$top-2)).left;
		int instructionsListright = ((java_cup.runtime.Symbol)CUP$VParser$stack.elementAt(CUP$VParser$top-2)).right;
		LinkedList<Instruction> instructionsList = (LinkedList<Instruction>)((java_cup.runtime.Symbol) CUP$VParser$stack.elementAt(CUP$VParser$top-2)).value;
		 RESULT = new Function(accessModifier, returnType, name, params, instructionsList); 
              CUP$VParser$result = parser.getSymbolFactory().newSymbol("vb_function",6, ((java_cup.runtime.Symbol)CUP$VParser$stack.elementAt(CUP$VParser$top-11)), ((java_cup.runtime.Symbol)CUP$VParser$stack.peek()), RESULT);
            }
          return CUP$VParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 19: // vb_function ::= vb_access_modifier FUNCTION ID PARENTHESISO PARENTHESISC AS vb_data_type vb_code_statements END FUNCTION 
            {
              Instruction RESULT =null;
		int accessModifierleft = ((java_cup.runtime.Symbol)CUP$VParser$stack.elementAt(CUP$VParser$top-9)).left;
		int accessModifierright = ((java_cup.runtime.Symbol)CUP$VParser$stack.elementAt(CUP$VParser$top-9)).right;
		AccessModifier accessModifier = (AccessModifier)((java_cup.runtime.Symbol) CUP$VParser$stack.elementAt(CUP$VParser$top-9)).value;
		int nameleft = ((java_cup.runtime.Symbol)CUP$VParser$stack.elementAt(CUP$VParser$top-7)).left;
		int nameright = ((java_cup.runtime.Symbol)CUP$VParser$stack.elementAt(CUP$VParser$top-7)).right;
		String name = (String)((java_cup.runtime.Symbol) CUP$VParser$stack.elementAt(CUP$VParser$top-7)).value;
		int returnTypeleft = ((java_cup.runtime.Symbol)CUP$VParser$stack.elementAt(CUP$VParser$top-3)).left;
		int returnTyperight = ((java_cup.runtime.Symbol)CUP$VParser$stack.elementAt(CUP$VParser$top-3)).right;
		Type returnType = (Type)((java_cup.runtime.Symbol) CUP$VParser$stack.elementAt(CUP$VParser$top-3)).value;
		int instructionsListleft = ((java_cup.runtime.Symbol)CUP$VParser$stack.elementAt(CUP$VParser$top-2)).left;
		int instructionsListright = ((java_cup.runtime.Symbol)CUP$VParser$stack.elementAt(CUP$VParser$top-2)).right;
		LinkedList<Instruction> instructionsList = (LinkedList<Instruction>)((java_cup.runtime.Symbol) CUP$VParser$stack.elementAt(CUP$VParser$top-2)).value;
		 RESULT = new Function(accessModifier, returnType, name, null, instructionsList); 
              CUP$VParser$result = parser.getSymbolFactory().newSymbol("vb_function",6, ((java_cup.runtime.Symbol)CUP$VParser$stack.elementAt(CUP$VParser$top-9)), ((java_cup.runtime.Symbol)CUP$VParser$stack.peek()), RESULT);
            }
          return CUP$VParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 20: // vb_procedure ::= vb_access_modifier SUB ID PARENTHESISO BYVAL vb_params PARENTHESISC vb_code_statements END SUB 
            {
              Instruction RESULT =null;
		int accessModifierleft = ((java_cup.runtime.Symbol)CUP$VParser$stack.elementAt(CUP$VParser$top-9)).left;
		int accessModifierright = ((java_cup.runtime.Symbol)CUP$VParser$stack.elementAt(CUP$VParser$top-9)).right;
		AccessModifier accessModifier = (AccessModifier)((java_cup.runtime.Symbol) CUP$VParser$stack.elementAt(CUP$VParser$top-9)).value;
		int nameleft = ((java_cup.runtime.Symbol)CUP$VParser$stack.elementAt(CUP$VParser$top-7)).left;
		int nameright = ((java_cup.runtime.Symbol)CUP$VParser$stack.elementAt(CUP$VParser$top-7)).right;
		String name = (String)((java_cup.runtime.Symbol) CUP$VParser$stack.elementAt(CUP$VParser$top-7)).value;
		int paramsleft = ((java_cup.runtime.Symbol)CUP$VParser$stack.elementAt(CUP$VParser$top-4)).left;
		int paramsright = ((java_cup.runtime.Symbol)CUP$VParser$stack.elementAt(CUP$VParser$top-4)).right;
		LinkedList<Type> params = (LinkedList<Type>)((java_cup.runtime.Symbol) CUP$VParser$stack.elementAt(CUP$VParser$top-4)).value;
		int instructionsListleft = ((java_cup.runtime.Symbol)CUP$VParser$stack.elementAt(CUP$VParser$top-2)).left;
		int instructionsListright = ((java_cup.runtime.Symbol)CUP$VParser$stack.elementAt(CUP$VParser$top-2)).right;
		LinkedList<Instruction> instructionsList = (LinkedList<Instruction>)((java_cup.runtime.Symbol) CUP$VParser$stack.elementAt(CUP$VParser$top-2)).value;
		 RESULT = new Procedure(accessModifier, name, params, instructionsList); 
              CUP$VParser$result = parser.getSymbolFactory().newSymbol("vb_procedure",7, ((java_cup.runtime.Symbol)CUP$VParser$stack.elementAt(CUP$VParser$top-9)), ((java_cup.runtime.Symbol)CUP$VParser$stack.peek()), RESULT);
            }
          return CUP$VParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 21: // vb_procedure ::= vb_access_modifier SUB ID PARENTHESISO PARENTHESISC vb_code_statements END SUB 
            {
              Instruction RESULT =null;
		int accessModifierleft = ((java_cup.runtime.Symbol)CUP$VParser$stack.elementAt(CUP$VParser$top-7)).left;
		int accessModifierright = ((java_cup.runtime.Symbol)CUP$VParser$stack.elementAt(CUP$VParser$top-7)).right;
		AccessModifier accessModifier = (AccessModifier)((java_cup.runtime.Symbol) CUP$VParser$stack.elementAt(CUP$VParser$top-7)).value;
		int nameleft = ((java_cup.runtime.Symbol)CUP$VParser$stack.elementAt(CUP$VParser$top-5)).left;
		int nameright = ((java_cup.runtime.Symbol)CUP$VParser$stack.elementAt(CUP$VParser$top-5)).right;
		String name = (String)((java_cup.runtime.Symbol) CUP$VParser$stack.elementAt(CUP$VParser$top-5)).value;
		int instructionsListleft = ((java_cup.runtime.Symbol)CUP$VParser$stack.elementAt(CUP$VParser$top-2)).left;
		int instructionsListright = ((java_cup.runtime.Symbol)CUP$VParser$stack.elementAt(CUP$VParser$top-2)).right;
		LinkedList<Instruction> instructionsList = (LinkedList<Instruction>)((java_cup.runtime.Symbol) CUP$VParser$stack.elementAt(CUP$VParser$top-2)).value;
		 RESULT = new Procedure(accessModifier, name, null, instructionsList); 
              CUP$VParser$result = parser.getSymbolFactory().newSymbol("vb_procedure",7, ((java_cup.runtime.Symbol)CUP$VParser$stack.elementAt(CUP$VParser$top-7)), ((java_cup.runtime.Symbol)CUP$VParser$stack.peek()), RESULT);
            }
          return CUP$VParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 22: // vb_access_modifier ::= PUBLIC 
            {
              AccessModifier RESULT =null;
		 RESULT = AccessModifier.PUBLIC; 
              CUP$VParser$result = parser.getSymbolFactory().newSymbol("vb_access_modifier",25, ((java_cup.runtime.Symbol)CUP$VParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$VParser$stack.peek()), RESULT);
            }
          return CUP$VParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 23: // vb_access_modifier ::= 
            {
              AccessModifier RESULT =null;
		 RESULT = AccessModifier.DEFAULT; 
              CUP$VParser$result = parser.getSymbolFactory().newSymbol("vb_access_modifier",25, ((java_cup.runtime.Symbol)CUP$VParser$stack.peek()), RESULT);
            }
          return CUP$VParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 24: // vb_params ::= ID AS vb_data_type COMMA vb_params 
            {
              LinkedList<Type> RESULT =null;
		int dataTypeleft = ((java_cup.runtime.Symbol)CUP$VParser$stack.elementAt(CUP$VParser$top-2)).left;
		int dataTyperight = ((java_cup.runtime.Symbol)CUP$VParser$stack.elementAt(CUP$VParser$top-2)).right;
		Type dataType = (Type)((java_cup.runtime.Symbol) CUP$VParser$stack.elementAt(CUP$VParser$top-2)).value;
		int paramsListleft = ((java_cup.runtime.Symbol)CUP$VParser$stack.peek()).left;
		int paramsListright = ((java_cup.runtime.Symbol)CUP$VParser$stack.peek()).right;
		LinkedList<Type> paramsList = (LinkedList<Type>)((java_cup.runtime.Symbol) CUP$VParser$stack.peek()).value;
		 paramsList.addFirst(dataType); RESULT = paramsList; 
              CUP$VParser$result = parser.getSymbolFactory().newSymbol("vb_params",31, ((java_cup.runtime.Symbol)CUP$VParser$stack.elementAt(CUP$VParser$top-4)), ((java_cup.runtime.Symbol)CUP$VParser$stack.peek()), RESULT);
            }
          return CUP$VParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 25: // vb_params ::= ID AS vb_data_type 
            {
              LinkedList<Type> RESULT =null;
		int dataTypeleft = ((java_cup.runtime.Symbol)CUP$VParser$stack.peek()).left;
		int dataTyperight = ((java_cup.runtime.Symbol)CUP$VParser$stack.peek()).right;
		Type dataType = (Type)((java_cup.runtime.Symbol) CUP$VParser$stack.peek()).value;
		 RESULT = new LinkedList<Type>(); RESULT.add(dataType); 
              CUP$VParser$result = parser.getSymbolFactory().newSymbol("vb_params",31, ((java_cup.runtime.Symbol)CUP$VParser$stack.elementAt(CUP$VParser$top-2)), ((java_cup.runtime.Symbol)CUP$VParser$stack.peek()), RESULT);
            }
          return CUP$VParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 26: // vb_statement ::= DIM ID COMMA vb_var_list AS vb_data_type COMMA vb_multiple_type_statement 
            {
              LinkedList<Instruction> RESULT =null;
		int varNameleft = ((java_cup.runtime.Symbol)CUP$VParser$stack.elementAt(CUP$VParser$top-6)).left;
		int varNameright = ((java_cup.runtime.Symbol)CUP$VParser$stack.elementAt(CUP$VParser$top-6)).right;
		String varName = (String)((java_cup.runtime.Symbol) CUP$VParser$stack.elementAt(CUP$VParser$top-6)).value;
		int varListleft = ((java_cup.runtime.Symbol)CUP$VParser$stack.elementAt(CUP$VParser$top-4)).left;
		int varListright = ((java_cup.runtime.Symbol)CUP$VParser$stack.elementAt(CUP$VParser$top-4)).right;
		LinkedList<String> varList = (LinkedList<String>)((java_cup.runtime.Symbol) CUP$VParser$stack.elementAt(CUP$VParser$top-4)).value;
		int dataTypeleft = ((java_cup.runtime.Symbol)CUP$VParser$stack.elementAt(CUP$VParser$top-2)).left;
		int dataTyperight = ((java_cup.runtime.Symbol)CUP$VParser$stack.elementAt(CUP$VParser$top-2)).right;
		Type dataType = (Type)((java_cup.runtime.Symbol) CUP$VParser$stack.elementAt(CUP$VParser$top-2)).value;
		int statementsListleft = ((java_cup.runtime.Symbol)CUP$VParser$stack.peek()).left;
		int statementsListright = ((java_cup.runtime.Symbol)CUP$VParser$stack.peek()).right;
		LinkedList<Instruction> statementsList = (LinkedList<Instruction>)((java_cup.runtime.Symbol) CUP$VParser$stack.peek()).value;
		 varList.addFirst(varName); statementsList.addAll(0, getStatements(varList, dataType)); RESULT = statementsList; 
              CUP$VParser$result = parser.getSymbolFactory().newSymbol("vb_statement",28, ((java_cup.runtime.Symbol)CUP$VParser$stack.elementAt(CUP$VParser$top-7)), ((java_cup.runtime.Symbol)CUP$VParser$stack.peek()), RESULT);
            }
          return CUP$VParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 27: // vb_statement ::= DIM ID AS vb_data_type COMMA vb_multiple_type_statement 
            {
              LinkedList<Instruction> RESULT =null;
		int varNameleft = ((java_cup.runtime.Symbol)CUP$VParser$stack.elementAt(CUP$VParser$top-4)).left;
		int varNameright = ((java_cup.runtime.Symbol)CUP$VParser$stack.elementAt(CUP$VParser$top-4)).right;
		String varName = (String)((java_cup.runtime.Symbol) CUP$VParser$stack.elementAt(CUP$VParser$top-4)).value;
		int dataTypeleft = ((java_cup.runtime.Symbol)CUP$VParser$stack.elementAt(CUP$VParser$top-2)).left;
		int dataTyperight = ((java_cup.runtime.Symbol)CUP$VParser$stack.elementAt(CUP$VParser$top-2)).right;
		Type dataType = (Type)((java_cup.runtime.Symbol) CUP$VParser$stack.elementAt(CUP$VParser$top-2)).value;
		int statementsListleft = ((java_cup.runtime.Symbol)CUP$VParser$stack.peek()).left;
		int statementsListright = ((java_cup.runtime.Symbol)CUP$VParser$stack.peek()).right;
		LinkedList<Instruction> statementsList = (LinkedList<Instruction>)((java_cup.runtime.Symbol) CUP$VParser$stack.peek()).value;
		 statementsList.add(new Statement(varName, dataType)); RESULT = statementsList; 
              CUP$VParser$result = parser.getSymbolFactory().newSymbol("vb_statement",28, ((java_cup.runtime.Symbol)CUP$VParser$stack.elementAt(CUP$VParser$top-5)), ((java_cup.runtime.Symbol)CUP$VParser$stack.peek()), RESULT);
            }
          return CUP$VParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 28: // vb_statement ::= DIM ID COMMA vb_var_list AS vb_data_type 
            {
              LinkedList<Instruction> RESULT =null;
		int varNameleft = ((java_cup.runtime.Symbol)CUP$VParser$stack.elementAt(CUP$VParser$top-4)).left;
		int varNameright = ((java_cup.runtime.Symbol)CUP$VParser$stack.elementAt(CUP$VParser$top-4)).right;
		String varName = (String)((java_cup.runtime.Symbol) CUP$VParser$stack.elementAt(CUP$VParser$top-4)).value;
		int varListleft = ((java_cup.runtime.Symbol)CUP$VParser$stack.elementAt(CUP$VParser$top-2)).left;
		int varListright = ((java_cup.runtime.Symbol)CUP$VParser$stack.elementAt(CUP$VParser$top-2)).right;
		LinkedList<String> varList = (LinkedList<String>)((java_cup.runtime.Symbol) CUP$VParser$stack.elementAt(CUP$VParser$top-2)).value;
		int dataTypeleft = ((java_cup.runtime.Symbol)CUP$VParser$stack.peek()).left;
		int dataTyperight = ((java_cup.runtime.Symbol)CUP$VParser$stack.peek()).right;
		Type dataType = (Type)((java_cup.runtime.Symbol) CUP$VParser$stack.peek()).value;
		 varList.addFirst(varName); RESULT = getStatements(varList, dataType); 
              CUP$VParser$result = parser.getSymbolFactory().newSymbol("vb_statement",28, ((java_cup.runtime.Symbol)CUP$VParser$stack.elementAt(CUP$VParser$top-5)), ((java_cup.runtime.Symbol)CUP$VParser$stack.peek()), RESULT);
            }
          return CUP$VParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 29: // vb_statement ::= DIM ID AS vb_data_type 
            {
              LinkedList<Instruction> RESULT =null;
		int varNameleft = ((java_cup.runtime.Symbol)CUP$VParser$stack.elementAt(CUP$VParser$top-2)).left;
		int varNameright = ((java_cup.runtime.Symbol)CUP$VParser$stack.elementAt(CUP$VParser$top-2)).right;
		String varName = (String)((java_cup.runtime.Symbol) CUP$VParser$stack.elementAt(CUP$VParser$top-2)).value;
		int dataTypeleft = ((java_cup.runtime.Symbol)CUP$VParser$stack.peek()).left;
		int dataTyperight = ((java_cup.runtime.Symbol)CUP$VParser$stack.peek()).right;
		Type dataType = (Type)((java_cup.runtime.Symbol) CUP$VParser$stack.peek()).value;
		 RESULT = new LinkedList<Instruction>(); RESULT.add(new Statement(varName, dataType)); 
              CUP$VParser$result = parser.getSymbolFactory().newSymbol("vb_statement",28, ((java_cup.runtime.Symbol)CUP$VParser$stack.elementAt(CUP$VParser$top-3)), ((java_cup.runtime.Symbol)CUP$VParser$stack.peek()), RESULT);
            }
          return CUP$VParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 30: // vb_var_list ::= ID COMMA vb_var_list 
            {
              LinkedList<String> RESULT =null;
		int varNameleft = ((java_cup.runtime.Symbol)CUP$VParser$stack.elementAt(CUP$VParser$top-2)).left;
		int varNameright = ((java_cup.runtime.Symbol)CUP$VParser$stack.elementAt(CUP$VParser$top-2)).right;
		String varName = (String)((java_cup.runtime.Symbol) CUP$VParser$stack.elementAt(CUP$VParser$top-2)).value;
		int varListleft = ((java_cup.runtime.Symbol)CUP$VParser$stack.peek()).left;
		int varListright = ((java_cup.runtime.Symbol)CUP$VParser$stack.peek()).right;
		LinkedList<String> varList = (LinkedList<String>)((java_cup.runtime.Symbol) CUP$VParser$stack.peek()).value;
		 varList.addFirst(varName); RESULT = varList; 
              CUP$VParser$result = parser.getSymbolFactory().newSymbol("vb_var_list",32, ((java_cup.runtime.Symbol)CUP$VParser$stack.elementAt(CUP$VParser$top-2)), ((java_cup.runtime.Symbol)CUP$VParser$stack.peek()), RESULT);
            }
          return CUP$VParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 31: // vb_var_list ::= ID 
            {
              LinkedList<String> RESULT =null;
		int varNameleft = ((java_cup.runtime.Symbol)CUP$VParser$stack.peek()).left;
		int varNameright = ((java_cup.runtime.Symbol)CUP$VParser$stack.peek()).right;
		String varName = (String)((java_cup.runtime.Symbol) CUP$VParser$stack.peek()).value;
		 RESULT = new LinkedList<String>(); RESULT.add(varName); 
              CUP$VParser$result = parser.getSymbolFactory().newSymbol("vb_var_list",32, ((java_cup.runtime.Symbol)CUP$VParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$VParser$stack.peek()), RESULT);
            }
          return CUP$VParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 32: // vb_multiple_type_statement ::= ID COMMA vb_var_list AS vb_data_type COMMA vb_multiple_type_statement 
            {
              LinkedList<Instruction> RESULT =null;
		int varNameleft = ((java_cup.runtime.Symbol)CUP$VParser$stack.elementAt(CUP$VParser$top-6)).left;
		int varNameright = ((java_cup.runtime.Symbol)CUP$VParser$stack.elementAt(CUP$VParser$top-6)).right;
		String varName = (String)((java_cup.runtime.Symbol) CUP$VParser$stack.elementAt(CUP$VParser$top-6)).value;
		int varListleft = ((java_cup.runtime.Symbol)CUP$VParser$stack.elementAt(CUP$VParser$top-4)).left;
		int varListright = ((java_cup.runtime.Symbol)CUP$VParser$stack.elementAt(CUP$VParser$top-4)).right;
		LinkedList<String> varList = (LinkedList<String>)((java_cup.runtime.Symbol) CUP$VParser$stack.elementAt(CUP$VParser$top-4)).value;
		int dataTypeleft = ((java_cup.runtime.Symbol)CUP$VParser$stack.elementAt(CUP$VParser$top-2)).left;
		int dataTyperight = ((java_cup.runtime.Symbol)CUP$VParser$stack.elementAt(CUP$VParser$top-2)).right;
		Type dataType = (Type)((java_cup.runtime.Symbol) CUP$VParser$stack.elementAt(CUP$VParser$top-2)).value;
		int statementsListleft = ((java_cup.runtime.Symbol)CUP$VParser$stack.peek()).left;
		int statementsListright = ((java_cup.runtime.Symbol)CUP$VParser$stack.peek()).right;
		LinkedList<Instruction> statementsList = (LinkedList<Instruction>)((java_cup.runtime.Symbol) CUP$VParser$stack.peek()).value;
		 varList.addFirst(varName); statementsList.addAll(0, getStatements(varList, dataType)); RESULT = statementsList; 
              CUP$VParser$result = parser.getSymbolFactory().newSymbol("vb_multiple_type_statement",29, ((java_cup.runtime.Symbol)CUP$VParser$stack.elementAt(CUP$VParser$top-6)), ((java_cup.runtime.Symbol)CUP$VParser$stack.peek()), RESULT);
            }
          return CUP$VParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 33: // vb_multiple_type_statement ::= ID AS vb_data_type COMMA vb_multiple_type_statement 
            {
              LinkedList<Instruction> RESULT =null;
		int varNameleft = ((java_cup.runtime.Symbol)CUP$VParser$stack.elementAt(CUP$VParser$top-4)).left;
		int varNameright = ((java_cup.runtime.Symbol)CUP$VParser$stack.elementAt(CUP$VParser$top-4)).right;
		String varName = (String)((java_cup.runtime.Symbol) CUP$VParser$stack.elementAt(CUP$VParser$top-4)).value;
		int dataTypeleft = ((java_cup.runtime.Symbol)CUP$VParser$stack.elementAt(CUP$VParser$top-2)).left;
		int dataTyperight = ((java_cup.runtime.Symbol)CUP$VParser$stack.elementAt(CUP$VParser$top-2)).right;
		Type dataType = (Type)((java_cup.runtime.Symbol) CUP$VParser$stack.elementAt(CUP$VParser$top-2)).value;
		int statementsListleft = ((java_cup.runtime.Symbol)CUP$VParser$stack.peek()).left;
		int statementsListright = ((java_cup.runtime.Symbol)CUP$VParser$stack.peek()).right;
		LinkedList<Instruction> statementsList = (LinkedList<Instruction>)((java_cup.runtime.Symbol) CUP$VParser$stack.peek()).value;
		 statementsList.add(new Statement(varName, dataType)); RESULT = statementsList; 
              CUP$VParser$result = parser.getSymbolFactory().newSymbol("vb_multiple_type_statement",29, ((java_cup.runtime.Symbol)CUP$VParser$stack.elementAt(CUP$VParser$top-4)), ((java_cup.runtime.Symbol)CUP$VParser$stack.peek()), RESULT);
            }
          return CUP$VParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 34: // vb_multiple_type_statement ::= ID COMMA vb_var_list AS vb_data_type 
            {
              LinkedList<Instruction> RESULT =null;
		int varNameleft = ((java_cup.runtime.Symbol)CUP$VParser$stack.elementAt(CUP$VParser$top-4)).left;
		int varNameright = ((java_cup.runtime.Symbol)CUP$VParser$stack.elementAt(CUP$VParser$top-4)).right;
		String varName = (String)((java_cup.runtime.Symbol) CUP$VParser$stack.elementAt(CUP$VParser$top-4)).value;
		int varListleft = ((java_cup.runtime.Symbol)CUP$VParser$stack.elementAt(CUP$VParser$top-2)).left;
		int varListright = ((java_cup.runtime.Symbol)CUP$VParser$stack.elementAt(CUP$VParser$top-2)).right;
		LinkedList<String> varList = (LinkedList<String>)((java_cup.runtime.Symbol) CUP$VParser$stack.elementAt(CUP$VParser$top-2)).value;
		int dataTypeleft = ((java_cup.runtime.Symbol)CUP$VParser$stack.peek()).left;
		int dataTyperight = ((java_cup.runtime.Symbol)CUP$VParser$stack.peek()).right;
		Type dataType = (Type)((java_cup.runtime.Symbol) CUP$VParser$stack.peek()).value;
		 varList.addFirst(varName); RESULT = getStatements(varList, dataType); 
              CUP$VParser$result = parser.getSymbolFactory().newSymbol("vb_multiple_type_statement",29, ((java_cup.runtime.Symbol)CUP$VParser$stack.elementAt(CUP$VParser$top-4)), ((java_cup.runtime.Symbol)CUP$VParser$stack.peek()), RESULT);
            }
          return CUP$VParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 35: // vb_multiple_type_statement ::= ID AS vb_data_type 
            {
              LinkedList<Instruction> RESULT =null;
		int varNameleft = ((java_cup.runtime.Symbol)CUP$VParser$stack.elementAt(CUP$VParser$top-2)).left;
		int varNameright = ((java_cup.runtime.Symbol)CUP$VParser$stack.elementAt(CUP$VParser$top-2)).right;
		String varName = (String)((java_cup.runtime.Symbol) CUP$VParser$stack.elementAt(CUP$VParser$top-2)).value;
		int dataTypeleft = ((java_cup.runtime.Symbol)CUP$VParser$stack.peek()).left;
		int dataTyperight = ((java_cup.runtime.Symbol)CUP$VParser$stack.peek()).right;
		Type dataType = (Type)((java_cup.runtime.Symbol) CUP$VParser$stack.peek()).value;
		 RESULT = new LinkedList<Instruction>(); RESULT.add(new Statement(varName, dataType)); 
              CUP$VParser$result = parser.getSymbolFactory().newSymbol("vb_multiple_type_statement",29, ((java_cup.runtime.Symbol)CUP$VParser$stack.elementAt(CUP$VParser$top-2)), ((java_cup.runtime.Symbol)CUP$VParser$stack.peek()), RESULT);
            }
          return CUP$VParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 36: // vb_assignment ::= ID EQUALS CHARACTER 
            {
              Instruction RESULT =null;
		int varNameleft = ((java_cup.runtime.Symbol)CUP$VParser$stack.elementAt(CUP$VParser$top-2)).left;
		int varNameright = ((java_cup.runtime.Symbol)CUP$VParser$stack.elementAt(CUP$VParser$top-2)).right;
		String varName = (String)((java_cup.runtime.Symbol) CUP$VParser$stack.elementAt(CUP$VParser$top-2)).value;
		int valueleft = ((java_cup.runtime.Symbol)CUP$VParser$stack.peek()).left;
		int valueright = ((java_cup.runtime.Symbol)CUP$VParser$stack.peek()).right;
		char value = (char)((java_cup.runtime.Symbol) CUP$VParser$stack.peek()).value;
		 RESULT = new Assignment(varName, new Operation(value)); 
              CUP$VParser$result = parser.getSymbolFactory().newSymbol("vb_assignment",8, ((java_cup.runtime.Symbol)CUP$VParser$stack.elementAt(CUP$VParser$top-2)), ((java_cup.runtime.Symbol)CUP$VParser$stack.peek()), RESULT);
            }
          return CUP$VParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 37: // vb_assignment ::= ID EQUALS vb_arithmetic_op 
            {
              Instruction RESULT =null;
		int varNameleft = ((java_cup.runtime.Symbol)CUP$VParser$stack.elementAt(CUP$VParser$top-2)).left;
		int varNameright = ((java_cup.runtime.Symbol)CUP$VParser$stack.elementAt(CUP$VParser$top-2)).right;
		String varName = (String)((java_cup.runtime.Symbol) CUP$VParser$stack.elementAt(CUP$VParser$top-2)).value;
		int valueleft = ((java_cup.runtime.Symbol)CUP$VParser$stack.peek()).left;
		int valueright = ((java_cup.runtime.Symbol)CUP$VParser$stack.peek()).right;
		Operation value = (Operation)((java_cup.runtime.Symbol) CUP$VParser$stack.peek()).value;
		 RESULT = new Assignment(varName, value); 
              CUP$VParser$result = parser.getSymbolFactory().newSymbol("vb_assignment",8, ((java_cup.runtime.Symbol)CUP$VParser$stack.elementAt(CUP$VParser$top-2)), ((java_cup.runtime.Symbol)CUP$VParser$stack.peek()), RESULT);
            }
          return CUP$VParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 38: // vb_assignment ::= ID EQUALS vb_data_request 
            {
              Instruction RESULT =null;
		int varNameleft = ((java_cup.runtime.Symbol)CUP$VParser$stack.elementAt(CUP$VParser$top-2)).left;
		int varNameright = ((java_cup.runtime.Symbol)CUP$VParser$stack.elementAt(CUP$VParser$top-2)).right;
		String varName = (String)((java_cup.runtime.Symbol) CUP$VParser$stack.elementAt(CUP$VParser$top-2)).value;
		int valueleft = ((java_cup.runtime.Symbol)CUP$VParser$stack.peek()).left;
		int valueright = ((java_cup.runtime.Symbol)CUP$VParser$stack.peek()).right;
		Object value = (Object)((java_cup.runtime.Symbol) CUP$VParser$stack.peek()).value;

              CUP$VParser$result = parser.getSymbolFactory().newSymbol("vb_assignment",8, ((java_cup.runtime.Symbol)CUP$VParser$stack.elementAt(CUP$VParser$top-2)), ((java_cup.runtime.Symbol)CUP$VParser$stack.peek()), RESULT);
            }
          return CUP$VParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 39: // vb_statement_assignment ::= DIM ID AS vb_data_type EQUALS CHARACTER 
            {
              Instruction RESULT =null;
		int varNameleft = ((java_cup.runtime.Symbol)CUP$VParser$stack.elementAt(CUP$VParser$top-4)).left;
		int varNameright = ((java_cup.runtime.Symbol)CUP$VParser$stack.elementAt(CUP$VParser$top-4)).right;
		String varName = (String)((java_cup.runtime.Symbol) CUP$VParser$stack.elementAt(CUP$VParser$top-4)).value;
		int dataTypeleft = ((java_cup.runtime.Symbol)CUP$VParser$stack.elementAt(CUP$VParser$top-2)).left;
		int dataTyperight = ((java_cup.runtime.Symbol)CUP$VParser$stack.elementAt(CUP$VParser$top-2)).right;
		Type dataType = (Type)((java_cup.runtime.Symbol) CUP$VParser$stack.elementAt(CUP$VParser$top-2)).value;
		int valueleft = ((java_cup.runtime.Symbol)CUP$VParser$stack.peek()).left;
		int valueright = ((java_cup.runtime.Symbol)CUP$VParser$stack.peek()).right;
		char value = (char)((java_cup.runtime.Symbol) CUP$VParser$stack.peek()).value;
		 RESULT = new StatementAssignment(varName, new Operation(value), dataType); 
              CUP$VParser$result = parser.getSymbolFactory().newSymbol("vb_statement_assignment",9, ((java_cup.runtime.Symbol)CUP$VParser$stack.elementAt(CUP$VParser$top-5)), ((java_cup.runtime.Symbol)CUP$VParser$stack.peek()), RESULT);
            }
          return CUP$VParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 40: // vb_statement_assignment ::= DIM ID AS vb_data_type EQUALS vb_arithmetic_op 
            {
              Instruction RESULT =null;
		int varNameleft = ((java_cup.runtime.Symbol)CUP$VParser$stack.elementAt(CUP$VParser$top-4)).left;
		int varNameright = ((java_cup.runtime.Symbol)CUP$VParser$stack.elementAt(CUP$VParser$top-4)).right;
		String varName = (String)((java_cup.runtime.Symbol) CUP$VParser$stack.elementAt(CUP$VParser$top-4)).value;
		int dataTypeleft = ((java_cup.runtime.Symbol)CUP$VParser$stack.elementAt(CUP$VParser$top-2)).left;
		int dataTyperight = ((java_cup.runtime.Symbol)CUP$VParser$stack.elementAt(CUP$VParser$top-2)).right;
		Type dataType = (Type)((java_cup.runtime.Symbol) CUP$VParser$stack.elementAt(CUP$VParser$top-2)).value;
		int valueleft = ((java_cup.runtime.Symbol)CUP$VParser$stack.peek()).left;
		int valueright = ((java_cup.runtime.Symbol)CUP$VParser$stack.peek()).right;
		Operation value = (Operation)((java_cup.runtime.Symbol) CUP$VParser$stack.peek()).value;
		 RESULT = new StatementAssignment(varName, value, dataType); 
              CUP$VParser$result = parser.getSymbolFactory().newSymbol("vb_statement_assignment",9, ((java_cup.runtime.Symbol)CUP$VParser$stack.elementAt(CUP$VParser$top-5)), ((java_cup.runtime.Symbol)CUP$VParser$stack.peek()), RESULT);
            }
          return CUP$VParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 41: // vb_statement_assignment ::= DIM ID AS vb_data_type EQUALS vb_data_request 
            {
              Instruction RESULT =null;
		int varNameleft = ((java_cup.runtime.Symbol)CUP$VParser$stack.elementAt(CUP$VParser$top-4)).left;
		int varNameright = ((java_cup.runtime.Symbol)CUP$VParser$stack.elementAt(CUP$VParser$top-4)).right;
		String varName = (String)((java_cup.runtime.Symbol) CUP$VParser$stack.elementAt(CUP$VParser$top-4)).value;
		int dataTypeleft = ((java_cup.runtime.Symbol)CUP$VParser$stack.elementAt(CUP$VParser$top-2)).left;
		int dataTyperight = ((java_cup.runtime.Symbol)CUP$VParser$stack.elementAt(CUP$VParser$top-2)).right;
		Type dataType = (Type)((java_cup.runtime.Symbol) CUP$VParser$stack.elementAt(CUP$VParser$top-2)).value;
		int valueleft = ((java_cup.runtime.Symbol)CUP$VParser$stack.peek()).left;
		int valueright = ((java_cup.runtime.Symbol)CUP$VParser$stack.peek()).right;
		Object value = (Object)((java_cup.runtime.Symbol) CUP$VParser$stack.peek()).value;

              CUP$VParser$result = parser.getSymbolFactory().newSymbol("vb_statement_assignment",9, ((java_cup.runtime.Symbol)CUP$VParser$stack.elementAt(CUP$VParser$top-5)), ((java_cup.runtime.Symbol)CUP$VParser$stack.peek()), RESULT);
            }
          return CUP$VParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 42: // vb_data_type ::= INTEGER 
            {
              Type RESULT =null;
		 RESULT = Type.INTEGER; 
              CUP$VParser$result = parser.getSymbolFactory().newSymbol("vb_data_type",4, ((java_cup.runtime.Symbol)CUP$VParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$VParser$stack.peek()), RESULT);
            }
          return CUP$VParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 43: // vb_data_type ::= DOUBLE 
            {
              Type RESULT =null;
		 RESULT = Type.DOUBLE; 
              CUP$VParser$result = parser.getSymbolFactory().newSymbol("vb_data_type",4, ((java_cup.runtime.Symbol)CUP$VParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$VParser$stack.peek()), RESULT);
            }
          return CUP$VParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 44: // vb_data_type ::= CHAR 
            {
              Type RESULT =null;
		 RESULT = Type.CHAR; 
              CUP$VParser$result = parser.getSymbolFactory().newSymbol("vb_data_type",4, ((java_cup.runtime.Symbol)CUP$VParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$VParser$stack.peek()), RESULT);
            }
          return CUP$VParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 45: // vb_arithmetic_op ::= vb_arithmetic_op PLUS vb_term 
            {
              Operation RESULT =null;
		int value1left = ((java_cup.runtime.Symbol)CUP$VParser$stack.elementAt(CUP$VParser$top-2)).left;
		int value1right = ((java_cup.runtime.Symbol)CUP$VParser$stack.elementAt(CUP$VParser$top-2)).right;
		Operation value1 = (Operation)((java_cup.runtime.Symbol) CUP$VParser$stack.elementAt(CUP$VParser$top-2)).value;
		int value2left = ((java_cup.runtime.Symbol)CUP$VParser$stack.peek()).left;
		int value2right = ((java_cup.runtime.Symbol)CUP$VParser$stack.peek()).right;
		Operation value2 = (Operation)((java_cup.runtime.Symbol) CUP$VParser$stack.peek()).value;
		 RESULT = new Operation(value1, value2, OperationType.SUM); 
              CUP$VParser$result = parser.getSymbolFactory().newSymbol("vb_arithmetic_op",15, ((java_cup.runtime.Symbol)CUP$VParser$stack.elementAt(CUP$VParser$top-2)), ((java_cup.runtime.Symbol)CUP$VParser$stack.peek()), RESULT);
            }
          return CUP$VParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 46: // vb_arithmetic_op ::= vb_arithmetic_op MINUS vb_term 
            {
              Operation RESULT =null;
		int value1left = ((java_cup.runtime.Symbol)CUP$VParser$stack.elementAt(CUP$VParser$top-2)).left;
		int value1right = ((java_cup.runtime.Symbol)CUP$VParser$stack.elementAt(CUP$VParser$top-2)).right;
		Operation value1 = (Operation)((java_cup.runtime.Symbol) CUP$VParser$stack.elementAt(CUP$VParser$top-2)).value;
		int value2left = ((java_cup.runtime.Symbol)CUP$VParser$stack.peek()).left;
		int value2right = ((java_cup.runtime.Symbol)CUP$VParser$stack.peek()).right;
		Operation value2 = (Operation)((java_cup.runtime.Symbol) CUP$VParser$stack.peek()).value;
		 RESULT = new Operation(value1, value2, OperationType.SUBTRACTION); 
              CUP$VParser$result = parser.getSymbolFactory().newSymbol("vb_arithmetic_op",15, ((java_cup.runtime.Symbol)CUP$VParser$stack.elementAt(CUP$VParser$top-2)), ((java_cup.runtime.Symbol)CUP$VParser$stack.peek()), RESULT);
            }
          return CUP$VParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 47: // vb_arithmetic_op ::= vb_term 
            {
              Operation RESULT =null;
		int valueleft = ((java_cup.runtime.Symbol)CUP$VParser$stack.peek()).left;
		int valueright = ((java_cup.runtime.Symbol)CUP$VParser$stack.peek()).right;
		Operation value = (Operation)((java_cup.runtime.Symbol) CUP$VParser$stack.peek()).value;
		 RESULT = value; 
              CUP$VParser$result = parser.getSymbolFactory().newSymbol("vb_arithmetic_op",15, ((java_cup.runtime.Symbol)CUP$VParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$VParser$stack.peek()), RESULT);
            }
          return CUP$VParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 48: // vb_term ::= vb_term MULTIPLICATION vb_factor 
            {
              Operation RESULT =null;
		int value1left = ((java_cup.runtime.Symbol)CUP$VParser$stack.elementAt(CUP$VParser$top-2)).left;
		int value1right = ((java_cup.runtime.Symbol)CUP$VParser$stack.elementAt(CUP$VParser$top-2)).right;
		Operation value1 = (Operation)((java_cup.runtime.Symbol) CUP$VParser$stack.elementAt(CUP$VParser$top-2)).value;
		int value2left = ((java_cup.runtime.Symbol)CUP$VParser$stack.peek()).left;
		int value2right = ((java_cup.runtime.Symbol)CUP$VParser$stack.peek()).right;
		Operation value2 = (Operation)((java_cup.runtime.Symbol) CUP$VParser$stack.peek()).value;
		 RESULT = new Operation(value1, value2, OperationType.MULTIPLICATION); 
              CUP$VParser$result = parser.getSymbolFactory().newSymbol("vb_term",16, ((java_cup.runtime.Symbol)CUP$VParser$stack.elementAt(CUP$VParser$top-2)), ((java_cup.runtime.Symbol)CUP$VParser$stack.peek()), RESULT);
            }
          return CUP$VParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 49: // vb_term ::= vb_term DIVISION vb_factor 
            {
              Operation RESULT =null;
		int value1left = ((java_cup.runtime.Symbol)CUP$VParser$stack.elementAt(CUP$VParser$top-2)).left;
		int value1right = ((java_cup.runtime.Symbol)CUP$VParser$stack.elementAt(CUP$VParser$top-2)).right;
		Operation value1 = (Operation)((java_cup.runtime.Symbol) CUP$VParser$stack.elementAt(CUP$VParser$top-2)).value;
		int value2left = ((java_cup.runtime.Symbol)CUP$VParser$stack.peek()).left;
		int value2right = ((java_cup.runtime.Symbol)CUP$VParser$stack.peek()).right;
		Operation value2 = (Operation)((java_cup.runtime.Symbol) CUP$VParser$stack.peek()).value;
		 RESULT = new Operation(value1, value2, OperationType.DIVISION); 
              CUP$VParser$result = parser.getSymbolFactory().newSymbol("vb_term",16, ((java_cup.runtime.Symbol)CUP$VParser$stack.elementAt(CUP$VParser$top-2)), ((java_cup.runtime.Symbol)CUP$VParser$stack.peek()), RESULT);
            }
          return CUP$VParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 50: // vb_term ::= vb_term MOD vb_factor 
            {
              Operation RESULT =null;
		int value1left = ((java_cup.runtime.Symbol)CUP$VParser$stack.elementAt(CUP$VParser$top-2)).left;
		int value1right = ((java_cup.runtime.Symbol)CUP$VParser$stack.elementAt(CUP$VParser$top-2)).right;
		Operation value1 = (Operation)((java_cup.runtime.Symbol) CUP$VParser$stack.elementAt(CUP$VParser$top-2)).value;
		int value2left = ((java_cup.runtime.Symbol)CUP$VParser$stack.peek()).left;
		int value2right = ((java_cup.runtime.Symbol)CUP$VParser$stack.peek()).right;
		Operation value2 = (Operation)((java_cup.runtime.Symbol) CUP$VParser$stack.peek()).value;
		 RESULT = new Operation(value1, value2, OperationType.MOD); 
              CUP$VParser$result = parser.getSymbolFactory().newSymbol("vb_term",16, ((java_cup.runtime.Symbol)CUP$VParser$stack.elementAt(CUP$VParser$top-2)), ((java_cup.runtime.Symbol)CUP$VParser$stack.peek()), RESULT);
            }
          return CUP$VParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 51: // vb_term ::= vb_factor 
            {
              Operation RESULT =null;
		int valueleft = ((java_cup.runtime.Symbol)CUP$VParser$stack.peek()).left;
		int valueright = ((java_cup.runtime.Symbol)CUP$VParser$stack.peek()).right;
		Operation value = (Operation)((java_cup.runtime.Symbol) CUP$VParser$stack.peek()).value;
		 RESULT = value; 
              CUP$VParser$result = parser.getSymbolFactory().newSymbol("vb_term",16, ((java_cup.runtime.Symbol)CUP$VParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$VParser$stack.peek()), RESULT);
            }
          return CUP$VParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 52: // vb_factor ::= PLUS vb_op_value 
            {
              Operation RESULT =null;
		int valueleft = ((java_cup.runtime.Symbol)CUP$VParser$stack.peek()).left;
		int valueright = ((java_cup.runtime.Symbol)CUP$VParser$stack.peek()).right;
		Operation value = (Operation)((java_cup.runtime.Symbol) CUP$VParser$stack.peek()).value;
		 RESULT = new Operation(value, OperationType.PLUS); 
              CUP$VParser$result = parser.getSymbolFactory().newSymbol("vb_factor",17, ((java_cup.runtime.Symbol)CUP$VParser$stack.elementAt(CUP$VParser$top-1)), ((java_cup.runtime.Symbol)CUP$VParser$stack.peek()), RESULT);
            }
          return CUP$VParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 53: // vb_factor ::= MINUS vb_op_value 
            {
              Operation RESULT =null;
		int valueleft = ((java_cup.runtime.Symbol)CUP$VParser$stack.peek()).left;
		int valueright = ((java_cup.runtime.Symbol)CUP$VParser$stack.peek()).right;
		Operation value = (Operation)((java_cup.runtime.Symbol) CUP$VParser$stack.peek()).value;
		 RESULT = new Operation(value, OperationType.MINUS); 
              CUP$VParser$result = parser.getSymbolFactory().newSymbol("vb_factor",17, ((java_cup.runtime.Symbol)CUP$VParser$stack.elementAt(CUP$VParser$top-1)), ((java_cup.runtime.Symbol)CUP$VParser$stack.peek()), RESULT);
            }
          return CUP$VParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 54: // vb_factor ::= vb_op_value 
            {
              Operation RESULT =null;
		int valueleft = ((java_cup.runtime.Symbol)CUP$VParser$stack.peek()).left;
		int valueright = ((java_cup.runtime.Symbol)CUP$VParser$stack.peek()).right;
		Operation value = (Operation)((java_cup.runtime.Symbol) CUP$VParser$stack.peek()).value;
		 RESULT = value; 
              CUP$VParser$result = parser.getSymbolFactory().newSymbol("vb_factor",17, ((java_cup.runtime.Symbol)CUP$VParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$VParser$stack.peek()), RESULT);
            }
          return CUP$VParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 55: // vb_op_value ::= PARENTHESISO vb_arithmetic_op PARENTHESISC 
            {
              Operation RESULT =null;
		int valueleft = ((java_cup.runtime.Symbol)CUP$VParser$stack.elementAt(CUP$VParser$top-1)).left;
		int valueright = ((java_cup.runtime.Symbol)CUP$VParser$stack.elementAt(CUP$VParser$top-1)).right;
		Operation value = (Operation)((java_cup.runtime.Symbol) CUP$VParser$stack.elementAt(CUP$VParser$top-1)).value;
		 RESULT = value; 
              CUP$VParser$result = parser.getSymbolFactory().newSymbol("vb_op_value",18, ((java_cup.runtime.Symbol)CUP$VParser$stack.elementAt(CUP$VParser$top-2)), ((java_cup.runtime.Symbol)CUP$VParser$stack.peek()), RESULT);
            }
          return CUP$VParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 56: // vb_op_value ::= INTEGERNUM 
            {
              Operation RESULT =null;
		int valueleft = ((java_cup.runtime.Symbol)CUP$VParser$stack.peek()).left;
		int valueright = ((java_cup.runtime.Symbol)CUP$VParser$stack.peek()).right;
		Integer value = (Integer)((java_cup.runtime.Symbol) CUP$VParser$stack.peek()).value;
		 RESULT = new Operation(value); 
              CUP$VParser$result = parser.getSymbolFactory().newSymbol("vb_op_value",18, ((java_cup.runtime.Symbol)CUP$VParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$VParser$stack.peek()), RESULT);
            }
          return CUP$VParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 57: // vb_op_value ::= DOUBLENUM 
            {
              Operation RESULT =null;
		int valueleft = ((java_cup.runtime.Symbol)CUP$VParser$stack.peek()).left;
		int valueright = ((java_cup.runtime.Symbol)CUP$VParser$stack.peek()).right;
		Double value = (Double)((java_cup.runtime.Symbol) CUP$VParser$stack.peek()).value;
		 RESULT = new Operation(value); 
              CUP$VParser$result = parser.getSymbolFactory().newSymbol("vb_op_value",18, ((java_cup.runtime.Symbol)CUP$VParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$VParser$stack.peek()), RESULT);
            }
          return CUP$VParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 58: // vb_op_value ::= ID 
            {
              Operation RESULT =null;
		int varNameleft = ((java_cup.runtime.Symbol)CUP$VParser$stack.peek()).left;
		int varNameright = ((java_cup.runtime.Symbol)CUP$VParser$stack.peek()).right;
		String varName = (String)((java_cup.runtime.Symbol) CUP$VParser$stack.peek()).value;
		 RESULT = new Operation(varName); 
              CUP$VParser$result = parser.getSymbolFactory().newSymbol("vb_op_value",18, ((java_cup.runtime.Symbol)CUP$VParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$VParser$stack.peek()), RESULT);
            }
          return CUP$VParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 59: // vb_relational_op ::= vb_arithmetic_op EQUALS vb_arithmetic_op 
            {
              Operation RESULT =null;
		int value1left = ((java_cup.runtime.Symbol)CUP$VParser$stack.elementAt(CUP$VParser$top-2)).left;
		int value1right = ((java_cup.runtime.Symbol)CUP$VParser$stack.elementAt(CUP$VParser$top-2)).right;
		Operation value1 = (Operation)((java_cup.runtime.Symbol) CUP$VParser$stack.elementAt(CUP$VParser$top-2)).value;
		int value2left = ((java_cup.runtime.Symbol)CUP$VParser$stack.peek()).left;
		int value2right = ((java_cup.runtime.Symbol)CUP$VParser$stack.peek()).right;
		Operation value2 = (Operation)((java_cup.runtime.Symbol) CUP$VParser$stack.peek()).value;
		 RESULT = new Operation(value1, value2, OperationType.EQUALS); 
              CUP$VParser$result = parser.getSymbolFactory().newSymbol("vb_relational_op",19, ((java_cup.runtime.Symbol)CUP$VParser$stack.elementAt(CUP$VParser$top-2)), ((java_cup.runtime.Symbol)CUP$VParser$stack.peek()), RESULT);
            }
          return CUP$VParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 60: // vb_relational_op ::= vb_arithmetic_op LESSEQUALTHAN vb_arithmetic_op 
            {
              Operation RESULT =null;
		int value1left = ((java_cup.runtime.Symbol)CUP$VParser$stack.elementAt(CUP$VParser$top-2)).left;
		int value1right = ((java_cup.runtime.Symbol)CUP$VParser$stack.elementAt(CUP$VParser$top-2)).right;
		Operation value1 = (Operation)((java_cup.runtime.Symbol) CUP$VParser$stack.elementAt(CUP$VParser$top-2)).value;
		int value2left = ((java_cup.runtime.Symbol)CUP$VParser$stack.peek()).left;
		int value2right = ((java_cup.runtime.Symbol)CUP$VParser$stack.peek()).right;
		Operation value2 = (Operation)((java_cup.runtime.Symbol) CUP$VParser$stack.peek()).value;
		 RESULT = new Operation(value1, value2, OperationType.LESS_EQUAL_THAN); 
              CUP$VParser$result = parser.getSymbolFactory().newSymbol("vb_relational_op",19, ((java_cup.runtime.Symbol)CUP$VParser$stack.elementAt(CUP$VParser$top-2)), ((java_cup.runtime.Symbol)CUP$VParser$stack.peek()), RESULT);
            }
          return CUP$VParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 61: // vb_relational_op ::= vb_arithmetic_op GREATEREQUALTHAN vb_arithmetic_op 
            {
              Operation RESULT =null;
		int value1left = ((java_cup.runtime.Symbol)CUP$VParser$stack.elementAt(CUP$VParser$top-2)).left;
		int value1right = ((java_cup.runtime.Symbol)CUP$VParser$stack.elementAt(CUP$VParser$top-2)).right;
		Operation value1 = (Operation)((java_cup.runtime.Symbol) CUP$VParser$stack.elementAt(CUP$VParser$top-2)).value;
		int value2left = ((java_cup.runtime.Symbol)CUP$VParser$stack.peek()).left;
		int value2right = ((java_cup.runtime.Symbol)CUP$VParser$stack.peek()).right;
		Operation value2 = (Operation)((java_cup.runtime.Symbol) CUP$VParser$stack.peek()).value;
		 RESULT = new Operation(value1, value2, OperationType.GREATER_EQUAL_THAN); 
              CUP$VParser$result = parser.getSymbolFactory().newSymbol("vb_relational_op",19, ((java_cup.runtime.Symbol)CUP$VParser$stack.elementAt(CUP$VParser$top-2)), ((java_cup.runtime.Symbol)CUP$VParser$stack.peek()), RESULT);
            }
          return CUP$VParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 62: // vb_relational_op ::= vb_arithmetic_op LESSTHAN vb_arithmetic_op 
            {
              Operation RESULT =null;
		int value1left = ((java_cup.runtime.Symbol)CUP$VParser$stack.elementAt(CUP$VParser$top-2)).left;
		int value1right = ((java_cup.runtime.Symbol)CUP$VParser$stack.elementAt(CUP$VParser$top-2)).right;
		Operation value1 = (Operation)((java_cup.runtime.Symbol) CUP$VParser$stack.elementAt(CUP$VParser$top-2)).value;
		int value2left = ((java_cup.runtime.Symbol)CUP$VParser$stack.peek()).left;
		int value2right = ((java_cup.runtime.Symbol)CUP$VParser$stack.peek()).right;
		Operation value2 = (Operation)((java_cup.runtime.Symbol) CUP$VParser$stack.peek()).value;
		 RESULT = new Operation(value1, value2, OperationType.LESS_THAN); 
              CUP$VParser$result = parser.getSymbolFactory().newSymbol("vb_relational_op",19, ((java_cup.runtime.Symbol)CUP$VParser$stack.elementAt(CUP$VParser$top-2)), ((java_cup.runtime.Symbol)CUP$VParser$stack.peek()), RESULT);
            }
          return CUP$VParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 63: // vb_relational_op ::= vb_arithmetic_op GREATERTHAN vb_arithmetic_op 
            {
              Operation RESULT =null;
		int value1left = ((java_cup.runtime.Symbol)CUP$VParser$stack.elementAt(CUP$VParser$top-2)).left;
		int value1right = ((java_cup.runtime.Symbol)CUP$VParser$stack.elementAt(CUP$VParser$top-2)).right;
		Operation value1 = (Operation)((java_cup.runtime.Symbol) CUP$VParser$stack.elementAt(CUP$VParser$top-2)).value;
		int value2left = ((java_cup.runtime.Symbol)CUP$VParser$stack.peek()).left;
		int value2right = ((java_cup.runtime.Symbol)CUP$VParser$stack.peek()).right;
		Operation value2 = (Operation)((java_cup.runtime.Symbol) CUP$VParser$stack.peek()).value;
		 RESULT = new Operation(value1, value2, OperationType.GREATER_THAN); 
              CUP$VParser$result = parser.getSymbolFactory().newSymbol("vb_relational_op",19, ((java_cup.runtime.Symbol)CUP$VParser$stack.elementAt(CUP$VParser$top-2)), ((java_cup.runtime.Symbol)CUP$VParser$stack.peek()), RESULT);
            }
          return CUP$VParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 64: // vb_relational_op ::= vb_arithmetic_op NOTEQUAL vb_arithmetic_op 
            {
              Operation RESULT =null;
		int value1left = ((java_cup.runtime.Symbol)CUP$VParser$stack.elementAt(CUP$VParser$top-2)).left;
		int value1right = ((java_cup.runtime.Symbol)CUP$VParser$stack.elementAt(CUP$VParser$top-2)).right;
		Operation value1 = (Operation)((java_cup.runtime.Symbol) CUP$VParser$stack.elementAt(CUP$VParser$top-2)).value;
		int value2left = ((java_cup.runtime.Symbol)CUP$VParser$stack.peek()).left;
		int value2right = ((java_cup.runtime.Symbol)CUP$VParser$stack.peek()).right;
		Operation value2 = (Operation)((java_cup.runtime.Symbol) CUP$VParser$stack.peek()).value;
		 RESULT = new Operation(value1, value2, OperationType.NOTEQUAL); 
              CUP$VParser$result = parser.getSymbolFactory().newSymbol("vb_relational_op",19, ((java_cup.runtime.Symbol)CUP$VParser$stack.elementAt(CUP$VParser$top-2)), ((java_cup.runtime.Symbol)CUP$VParser$stack.peek()), RESULT);
            }
          return CUP$VParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 65: // vb_logical_op ::= vb_logical_op AND vb_logical_term 
            {
              Operation RESULT =null;
		int value1left = ((java_cup.runtime.Symbol)CUP$VParser$stack.elementAt(CUP$VParser$top-2)).left;
		int value1right = ((java_cup.runtime.Symbol)CUP$VParser$stack.elementAt(CUP$VParser$top-2)).right;
		Operation value1 = (Operation)((java_cup.runtime.Symbol) CUP$VParser$stack.elementAt(CUP$VParser$top-2)).value;
		int value2left = ((java_cup.runtime.Symbol)CUP$VParser$stack.peek()).left;
		int value2right = ((java_cup.runtime.Symbol)CUP$VParser$stack.peek()).right;
		Operation value2 = (Operation)((java_cup.runtime.Symbol) CUP$VParser$stack.peek()).value;
		 RESULT = new Operation(value1, value2, OperationType.AND); 
              CUP$VParser$result = parser.getSymbolFactory().newSymbol("vb_logical_op",20, ((java_cup.runtime.Symbol)CUP$VParser$stack.elementAt(CUP$VParser$top-2)), ((java_cup.runtime.Symbol)CUP$VParser$stack.peek()), RESULT);
            }
          return CUP$VParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 66: // vb_logical_op ::= vb_logical_op OR vb_logical_term 
            {
              Operation RESULT =null;
		int value1left = ((java_cup.runtime.Symbol)CUP$VParser$stack.elementAt(CUP$VParser$top-2)).left;
		int value1right = ((java_cup.runtime.Symbol)CUP$VParser$stack.elementAt(CUP$VParser$top-2)).right;
		Operation value1 = (Operation)((java_cup.runtime.Symbol) CUP$VParser$stack.elementAt(CUP$VParser$top-2)).value;
		int value2left = ((java_cup.runtime.Symbol)CUP$VParser$stack.peek()).left;
		int value2right = ((java_cup.runtime.Symbol)CUP$VParser$stack.peek()).right;
		Operation value2 = (Operation)((java_cup.runtime.Symbol) CUP$VParser$stack.peek()).value;
		 RESULT = new Operation(value1, value2, OperationType.OR); 
              CUP$VParser$result = parser.getSymbolFactory().newSymbol("vb_logical_op",20, ((java_cup.runtime.Symbol)CUP$VParser$stack.elementAt(CUP$VParser$top-2)), ((java_cup.runtime.Symbol)CUP$VParser$stack.peek()), RESULT);
            }
          return CUP$VParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 67: // vb_logical_op ::= vb_logical_term 
            {
              Operation RESULT =null;
		int valueleft = ((java_cup.runtime.Symbol)CUP$VParser$stack.peek()).left;
		int valueright = ((java_cup.runtime.Symbol)CUP$VParser$stack.peek()).right;
		Operation value = (Operation)((java_cup.runtime.Symbol) CUP$VParser$stack.peek()).value;
		 RESULT = value; 
              CUP$VParser$result = parser.getSymbolFactory().newSymbol("vb_logical_op",20, ((java_cup.runtime.Symbol)CUP$VParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$VParser$stack.peek()), RESULT);
            }
          return CUP$VParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 68: // vb_logical_term ::= NOT vb_logical_factor 
            {
              Operation RESULT =null;
		int valueleft = ((java_cup.runtime.Symbol)CUP$VParser$stack.peek()).left;
		int valueright = ((java_cup.runtime.Symbol)CUP$VParser$stack.peek()).right;
		Operation value = (Operation)((java_cup.runtime.Symbol) CUP$VParser$stack.peek()).value;
		 RESULT = new Operation(value, OperationType.NOT); 
              CUP$VParser$result = parser.getSymbolFactory().newSymbol("vb_logical_term",21, ((java_cup.runtime.Symbol)CUP$VParser$stack.elementAt(CUP$VParser$top-1)), ((java_cup.runtime.Symbol)CUP$VParser$stack.peek()), RESULT);
            }
          return CUP$VParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 69: // vb_logical_term ::= vb_logical_factor 
            {
              Operation RESULT =null;
		int valueleft = ((java_cup.runtime.Symbol)CUP$VParser$stack.peek()).left;
		int valueright = ((java_cup.runtime.Symbol)CUP$VParser$stack.peek()).right;
		Operation value = (Operation)((java_cup.runtime.Symbol) CUP$VParser$stack.peek()).value;
		 RESULT = value; 
              CUP$VParser$result = parser.getSymbolFactory().newSymbol("vb_logical_term",21, ((java_cup.runtime.Symbol)CUP$VParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$VParser$stack.peek()), RESULT);
            }
          return CUP$VParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 70: // vb_logical_factor ::= PARENTHESISO vb_logical_op PARENTHESISC 
            {
              Operation RESULT =null;
		int valueleft = ((java_cup.runtime.Symbol)CUP$VParser$stack.elementAt(CUP$VParser$top-1)).left;
		int valueright = ((java_cup.runtime.Symbol)CUP$VParser$stack.elementAt(CUP$VParser$top-1)).right;
		Operation value = (Operation)((java_cup.runtime.Symbol) CUP$VParser$stack.elementAt(CUP$VParser$top-1)).value;
		 RESULT = value; 
              CUP$VParser$result = parser.getSymbolFactory().newSymbol("vb_logical_factor",22, ((java_cup.runtime.Symbol)CUP$VParser$stack.elementAt(CUP$VParser$top-2)), ((java_cup.runtime.Symbol)CUP$VParser$stack.peek()), RESULT);
            }
          return CUP$VParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 71: // vb_logical_factor ::= vb_relational_op 
            {
              Operation RESULT =null;
		int valueleft = ((java_cup.runtime.Symbol)CUP$VParser$stack.peek()).left;
		int valueright = ((java_cup.runtime.Symbol)CUP$VParser$stack.peek()).right;
		Operation value = (Operation)((java_cup.runtime.Symbol) CUP$VParser$stack.peek()).value;
		 RESULT = value; 
              CUP$VParser$result = parser.getSymbolFactory().newSymbol("vb_logical_factor",22, ((java_cup.runtime.Symbol)CUP$VParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$VParser$stack.peek()), RESULT);
            }
          return CUP$VParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 72: // vb_while ::= WHILE vb_logical_op vb_code_statements END WHILE 
            {
              Instruction RESULT =null;
		int conditionleft = ((java_cup.runtime.Symbol)CUP$VParser$stack.elementAt(CUP$VParser$top-3)).left;
		int conditionright = ((java_cup.runtime.Symbol)CUP$VParser$stack.elementAt(CUP$VParser$top-3)).right;
		Operation condition = (Operation)((java_cup.runtime.Symbol) CUP$VParser$stack.elementAt(CUP$VParser$top-3)).value;
		int instructionsleft = ((java_cup.runtime.Symbol)CUP$VParser$stack.elementAt(CUP$VParser$top-2)).left;
		int instructionsright = ((java_cup.runtime.Symbol)CUP$VParser$stack.elementAt(CUP$VParser$top-2)).right;
		LinkedList<Instruction> instructions = (LinkedList<Instruction>)((java_cup.runtime.Symbol) CUP$VParser$stack.elementAt(CUP$VParser$top-2)).value;
		 RESULT = new While(condition, instructions); 
              CUP$VParser$result = parser.getSymbolFactory().newSymbol("vb_while",10, ((java_cup.runtime.Symbol)CUP$VParser$stack.elementAt(CUP$VParser$top-4)), ((java_cup.runtime.Symbol)CUP$VParser$stack.peek()), RESULT);
            }
          return CUP$VParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 73: // vb_do_while ::= DO vb_code_statements LOOP WHILE vb_logical_op 
            {
              Instruction RESULT =null;
		int instructionsleft = ((java_cup.runtime.Symbol)CUP$VParser$stack.elementAt(CUP$VParser$top-3)).left;
		int instructionsright = ((java_cup.runtime.Symbol)CUP$VParser$stack.elementAt(CUP$VParser$top-3)).right;
		LinkedList<Instruction> instructions = (LinkedList<Instruction>)((java_cup.runtime.Symbol) CUP$VParser$stack.elementAt(CUP$VParser$top-3)).value;
		int conditionleft = ((java_cup.runtime.Symbol)CUP$VParser$stack.peek()).left;
		int conditionright = ((java_cup.runtime.Symbol)CUP$VParser$stack.peek()).right;
		Operation condition = (Operation)((java_cup.runtime.Symbol) CUP$VParser$stack.peek()).value;
		 RESULT = new DoWhile(condition, instructions); 
              CUP$VParser$result = parser.getSymbolFactory().newSymbol("vb_do_while",11, ((java_cup.runtime.Symbol)CUP$VParser$stack.elementAt(CUP$VParser$top-4)), ((java_cup.runtime.Symbol)CUP$VParser$stack.peek()), RESULT);
            }
          return CUP$VParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 74: // vb_for ::= FOR ID AS vb_for_data_type EQUALS vb_arithmetic_op TO vb_arithmetic_op STEP vb_arithmetic_op vb_code_statements NEXT 
            {
              Instruction RESULT =null;
		int varNameleft = ((java_cup.runtime.Symbol)CUP$VParser$stack.elementAt(CUP$VParser$top-10)).left;
		int varNameright = ((java_cup.runtime.Symbol)CUP$VParser$stack.elementAt(CUP$VParser$top-10)).right;
		String varName = (String)((java_cup.runtime.Symbol) CUP$VParser$stack.elementAt(CUP$VParser$top-10)).value;
		int dataTypeleft = ((java_cup.runtime.Symbol)CUP$VParser$stack.elementAt(CUP$VParser$top-8)).left;
		int dataTyperight = ((java_cup.runtime.Symbol)CUP$VParser$stack.elementAt(CUP$VParser$top-8)).right;
		Type dataType = (Type)((java_cup.runtime.Symbol) CUP$VParser$stack.elementAt(CUP$VParser$top-8)).value;
		int counterValueleft = ((java_cup.runtime.Symbol)CUP$VParser$stack.elementAt(CUP$VParser$top-6)).left;
		int counterValueright = ((java_cup.runtime.Symbol)CUP$VParser$stack.elementAt(CUP$VParser$top-6)).right;
		Operation counterValue = (Operation)((java_cup.runtime.Symbol) CUP$VParser$stack.elementAt(CUP$VParser$top-6)).value;
		int limitValueleft = ((java_cup.runtime.Symbol)CUP$VParser$stack.elementAt(CUP$VParser$top-4)).left;
		int limitValueright = ((java_cup.runtime.Symbol)CUP$VParser$stack.elementAt(CUP$VParser$top-4)).right;
		Operation limitValue = (Operation)((java_cup.runtime.Symbol) CUP$VParser$stack.elementAt(CUP$VParser$top-4)).value;
		int stepValueleft = ((java_cup.runtime.Symbol)CUP$VParser$stack.elementAt(CUP$VParser$top-2)).left;
		int stepValueright = ((java_cup.runtime.Symbol)CUP$VParser$stack.elementAt(CUP$VParser$top-2)).right;
		Operation stepValue = (Operation)((java_cup.runtime.Symbol) CUP$VParser$stack.elementAt(CUP$VParser$top-2)).value;
		int instructionsleft = ((java_cup.runtime.Symbol)CUP$VParser$stack.elementAt(CUP$VParser$top-1)).left;
		int instructionsright = ((java_cup.runtime.Symbol)CUP$VParser$stack.elementAt(CUP$VParser$top-1)).right;
		LinkedList<Instruction> instructions = (LinkedList<Instruction>)((java_cup.runtime.Symbol) CUP$VParser$stack.elementAt(CUP$VParser$top-1)).value;
		 RESULT = new For(new StatementAssignment(varName, counterValue, dataType), limitValue, stepValue, instructions); 
              CUP$VParser$result = parser.getSymbolFactory().newSymbol("vb_for",12, ((java_cup.runtime.Symbol)CUP$VParser$stack.elementAt(CUP$VParser$top-11)), ((java_cup.runtime.Symbol)CUP$VParser$stack.peek()), RESULT);
            }
          return CUP$VParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 75: // vb_for ::= FOR ID EQUALS vb_arithmetic_op TO vb_arithmetic_op STEP vb_arithmetic_op vb_code_statements NEXT 
            {
              Instruction RESULT =null;
		int varNameleft = ((java_cup.runtime.Symbol)CUP$VParser$stack.elementAt(CUP$VParser$top-8)).left;
		int varNameright = ((java_cup.runtime.Symbol)CUP$VParser$stack.elementAt(CUP$VParser$top-8)).right;
		String varName = (String)((java_cup.runtime.Symbol) CUP$VParser$stack.elementAt(CUP$VParser$top-8)).value;
		int counterValueleft = ((java_cup.runtime.Symbol)CUP$VParser$stack.elementAt(CUP$VParser$top-6)).left;
		int counterValueright = ((java_cup.runtime.Symbol)CUP$VParser$stack.elementAt(CUP$VParser$top-6)).right;
		Operation counterValue = (Operation)((java_cup.runtime.Symbol) CUP$VParser$stack.elementAt(CUP$VParser$top-6)).value;
		int limitValueleft = ((java_cup.runtime.Symbol)CUP$VParser$stack.elementAt(CUP$VParser$top-4)).left;
		int limitValueright = ((java_cup.runtime.Symbol)CUP$VParser$stack.elementAt(CUP$VParser$top-4)).right;
		Operation limitValue = (Operation)((java_cup.runtime.Symbol) CUP$VParser$stack.elementAt(CUP$VParser$top-4)).value;
		int stepValueleft = ((java_cup.runtime.Symbol)CUP$VParser$stack.elementAt(CUP$VParser$top-2)).left;
		int stepValueright = ((java_cup.runtime.Symbol)CUP$VParser$stack.elementAt(CUP$VParser$top-2)).right;
		Operation stepValue = (Operation)((java_cup.runtime.Symbol) CUP$VParser$stack.elementAt(CUP$VParser$top-2)).value;
		int instructionsleft = ((java_cup.runtime.Symbol)CUP$VParser$stack.elementAt(CUP$VParser$top-1)).left;
		int instructionsright = ((java_cup.runtime.Symbol)CUP$VParser$stack.elementAt(CUP$VParser$top-1)).right;
		LinkedList<Instruction> instructions = (LinkedList<Instruction>)((java_cup.runtime.Symbol) CUP$VParser$stack.elementAt(CUP$VParser$top-1)).value;
		 RESULT = new For(new Assignment(varName, counterValue), limitValue, stepValue, instructions); 
              CUP$VParser$result = parser.getSymbolFactory().newSymbol("vb_for",12, ((java_cup.runtime.Symbol)CUP$VParser$stack.elementAt(CUP$VParser$top-9)), ((java_cup.runtime.Symbol)CUP$VParser$stack.peek()), RESULT);
            }
          return CUP$VParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 76: // vb_for ::= FOR ID AS vb_for_data_type EQUALS vb_arithmetic_op TO vb_arithmetic_op vb_code_statements NEXT 
            {
              Instruction RESULT =null;
		int varNameleft = ((java_cup.runtime.Symbol)CUP$VParser$stack.elementAt(CUP$VParser$top-8)).left;
		int varNameright = ((java_cup.runtime.Symbol)CUP$VParser$stack.elementAt(CUP$VParser$top-8)).right;
		String varName = (String)((java_cup.runtime.Symbol) CUP$VParser$stack.elementAt(CUP$VParser$top-8)).value;
		int dataTypeleft = ((java_cup.runtime.Symbol)CUP$VParser$stack.elementAt(CUP$VParser$top-6)).left;
		int dataTyperight = ((java_cup.runtime.Symbol)CUP$VParser$stack.elementAt(CUP$VParser$top-6)).right;
		Type dataType = (Type)((java_cup.runtime.Symbol) CUP$VParser$stack.elementAt(CUP$VParser$top-6)).value;
		int counterValueleft = ((java_cup.runtime.Symbol)CUP$VParser$stack.elementAt(CUP$VParser$top-4)).left;
		int counterValueright = ((java_cup.runtime.Symbol)CUP$VParser$stack.elementAt(CUP$VParser$top-4)).right;
		Operation counterValue = (Operation)((java_cup.runtime.Symbol) CUP$VParser$stack.elementAt(CUP$VParser$top-4)).value;
		int limitValueleft = ((java_cup.runtime.Symbol)CUP$VParser$stack.elementAt(CUP$VParser$top-2)).left;
		int limitValueright = ((java_cup.runtime.Symbol)CUP$VParser$stack.elementAt(CUP$VParser$top-2)).right;
		Operation limitValue = (Operation)((java_cup.runtime.Symbol) CUP$VParser$stack.elementAt(CUP$VParser$top-2)).value;
		int instructionsleft = ((java_cup.runtime.Symbol)CUP$VParser$stack.elementAt(CUP$VParser$top-1)).left;
		int instructionsright = ((java_cup.runtime.Symbol)CUP$VParser$stack.elementAt(CUP$VParser$top-1)).right;
		LinkedList<Instruction> instructions = (LinkedList<Instruction>)((java_cup.runtime.Symbol) CUP$VParser$stack.elementAt(CUP$VParser$top-1)).value;
		 RESULT = new For(new StatementAssignment(varName, counterValue, dataType), limitValue, new Operation(1), instructions); 
              CUP$VParser$result = parser.getSymbolFactory().newSymbol("vb_for",12, ((java_cup.runtime.Symbol)CUP$VParser$stack.elementAt(CUP$VParser$top-9)), ((java_cup.runtime.Symbol)CUP$VParser$stack.peek()), RESULT);
            }
          return CUP$VParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 77: // vb_for ::= FOR ID EQUALS vb_arithmetic_op TO vb_arithmetic_op vb_code_statements NEXT 
            {
              Instruction RESULT =null;
		int varNameleft = ((java_cup.runtime.Symbol)CUP$VParser$stack.elementAt(CUP$VParser$top-6)).left;
		int varNameright = ((java_cup.runtime.Symbol)CUP$VParser$stack.elementAt(CUP$VParser$top-6)).right;
		String varName = (String)((java_cup.runtime.Symbol) CUP$VParser$stack.elementAt(CUP$VParser$top-6)).value;
		int counterValueleft = ((java_cup.runtime.Symbol)CUP$VParser$stack.elementAt(CUP$VParser$top-4)).left;
		int counterValueright = ((java_cup.runtime.Symbol)CUP$VParser$stack.elementAt(CUP$VParser$top-4)).right;
		Operation counterValue = (Operation)((java_cup.runtime.Symbol) CUP$VParser$stack.elementAt(CUP$VParser$top-4)).value;
		int limitValueleft = ((java_cup.runtime.Symbol)CUP$VParser$stack.elementAt(CUP$VParser$top-2)).left;
		int limitValueright = ((java_cup.runtime.Symbol)CUP$VParser$stack.elementAt(CUP$VParser$top-2)).right;
		Operation limitValue = (Operation)((java_cup.runtime.Symbol) CUP$VParser$stack.elementAt(CUP$VParser$top-2)).value;
		int instructionsleft = ((java_cup.runtime.Symbol)CUP$VParser$stack.elementAt(CUP$VParser$top-1)).left;
		int instructionsright = ((java_cup.runtime.Symbol)CUP$VParser$stack.elementAt(CUP$VParser$top-1)).right;
		LinkedList<Instruction> instructions = (LinkedList<Instruction>)((java_cup.runtime.Symbol) CUP$VParser$stack.elementAt(CUP$VParser$top-1)).value;
		 RESULT = new For(new Assignment(varName, counterValue), limitValue, new Operation(1), instructions); 
              CUP$VParser$result = parser.getSymbolFactory().newSymbol("vb_for",12, ((java_cup.runtime.Symbol)CUP$VParser$stack.elementAt(CUP$VParser$top-7)), ((java_cup.runtime.Symbol)CUP$VParser$stack.peek()), RESULT);
            }
          return CUP$VParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 78: // vb_for_data_type ::= INTEGER 
            {
              Type RESULT =null;
		 RESULT = Type.INTEGER; 
              CUP$VParser$result = parser.getSymbolFactory().newSymbol("vb_for_data_type",5, ((java_cup.runtime.Symbol)CUP$VParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$VParser$stack.peek()), RESULT);
            }
          return CUP$VParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 79: // vb_for_data_type ::= DOUBLE 
            {
              Type RESULT =null;
		 RESULT = Type.DOUBLE; 
              CUP$VParser$result = parser.getSymbolFactory().newSymbol("vb_for_data_type",5, ((java_cup.runtime.Symbol)CUP$VParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$VParser$stack.peek()), RESULT);
            }
          return CUP$VParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 80: // vb_screen_messages ::= CONSOLE FULLSTOP WRITE PARENTHESISO vb_message PARENTHESISC 
            {
              Instruction RESULT =null;
		int messageleft = ((java_cup.runtime.Symbol)CUP$VParser$stack.elementAt(CUP$VParser$top-1)).left;
		int messageright = ((java_cup.runtime.Symbol)CUP$VParser$stack.elementAt(CUP$VParser$top-1)).right;
		Operation message = (Operation)((java_cup.runtime.Symbol) CUP$VParser$stack.elementAt(CUP$VParser$top-1)).value;
		 RESULT = new Print(message, PrintType.PRINT); 
              CUP$VParser$result = parser.getSymbolFactory().newSymbol("vb_screen_messages",14, ((java_cup.runtime.Symbol)CUP$VParser$stack.elementAt(CUP$VParser$top-5)), ((java_cup.runtime.Symbol)CUP$VParser$stack.peek()), RESULT);
            }
          return CUP$VParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 81: // vb_screen_messages ::= CONSOLE FULLSTOP WRITELINE PARENTHESISO vb_message PARENTHESISC 
            {
              Instruction RESULT =null;
		int messageleft = ((java_cup.runtime.Symbol)CUP$VParser$stack.elementAt(CUP$VParser$top-1)).left;
		int messageright = ((java_cup.runtime.Symbol)CUP$VParser$stack.elementAt(CUP$VParser$top-1)).right;
		Operation message = (Operation)((java_cup.runtime.Symbol) CUP$VParser$stack.elementAt(CUP$VParser$top-1)).value;
		 RESULT = new Print(message, PrintType.PRINTLN); 
              CUP$VParser$result = parser.getSymbolFactory().newSymbol("vb_screen_messages",14, ((java_cup.runtime.Symbol)CUP$VParser$stack.elementAt(CUP$VParser$top-5)), ((java_cup.runtime.Symbol)CUP$VParser$stack.peek()), RESULT);
            }
          return CUP$VParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 82: // vb_screen_messages ::= CONSOLE FULLSTOP WRITE PARENTHESISO PARENTHESISC 
            {
              Instruction RESULT =null;
		 RESULT = new Print(null, PrintType.PRINT); 
              CUP$VParser$result = parser.getSymbolFactory().newSymbol("vb_screen_messages",14, ((java_cup.runtime.Symbol)CUP$VParser$stack.elementAt(CUP$VParser$top-4)), ((java_cup.runtime.Symbol)CUP$VParser$stack.peek()), RESULT);
            }
          return CUP$VParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 83: // vb_screen_messages ::= CONSOLE FULLSTOP WRITELINE PARENTHESISO PARENTHESISC 
            {
              Instruction RESULT =null;
		 RESULT = new Print(null, PrintType.PRINTLN); 
              CUP$VParser$result = parser.getSymbolFactory().newSymbol("vb_screen_messages",14, ((java_cup.runtime.Symbol)CUP$VParser$stack.elementAt(CUP$VParser$top-4)), ((java_cup.runtime.Symbol)CUP$VParser$stack.peek()), RESULT);
            }
          return CUP$VParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 84: // vb_message ::= LITERAL CONCAT vb_message 
            {
              Operation RESULT =null;
		int value1left = ((java_cup.runtime.Symbol)CUP$VParser$stack.elementAt(CUP$VParser$top-2)).left;
		int value1right = ((java_cup.runtime.Symbol)CUP$VParser$stack.elementAt(CUP$VParser$top-2)).right;
		String value1 = (String)((java_cup.runtime.Symbol) CUP$VParser$stack.elementAt(CUP$VParser$top-2)).value;
		int value2left = ((java_cup.runtime.Symbol)CUP$VParser$stack.peek()).left;
		int value2right = ((java_cup.runtime.Symbol)CUP$VParser$stack.peek()).right;
		Operation value2 = (Operation)((java_cup.runtime.Symbol) CUP$VParser$stack.peek()).value;
		 RESULT = new Operation(new Operation(value1), value2, OperationType.CONCAT); 
              CUP$VParser$result = parser.getSymbolFactory().newSymbol("vb_message",24, ((java_cup.runtime.Symbol)CUP$VParser$stack.elementAt(CUP$VParser$top-2)), ((java_cup.runtime.Symbol)CUP$VParser$stack.peek()), RESULT);
            }
          return CUP$VParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 85: // vb_message ::= CHARACTER CONCAT vb_message 
            {
              Operation RESULT =null;
		int value1left = ((java_cup.runtime.Symbol)CUP$VParser$stack.elementAt(CUP$VParser$top-2)).left;
		int value1right = ((java_cup.runtime.Symbol)CUP$VParser$stack.elementAt(CUP$VParser$top-2)).right;
		char value1 = (char)((java_cup.runtime.Symbol) CUP$VParser$stack.elementAt(CUP$VParser$top-2)).value;
		int value2left = ((java_cup.runtime.Symbol)CUP$VParser$stack.peek()).left;
		int value2right = ((java_cup.runtime.Symbol)CUP$VParser$stack.peek()).right;
		Operation value2 = (Operation)((java_cup.runtime.Symbol) CUP$VParser$stack.peek()).value;
		 RESULT = new Operation(new Operation(value1), value2, OperationType.CONCAT); 
              CUP$VParser$result = parser.getSymbolFactory().newSymbol("vb_message",24, ((java_cup.runtime.Symbol)CUP$VParser$stack.elementAt(CUP$VParser$top-2)), ((java_cup.runtime.Symbol)CUP$VParser$stack.peek()), RESULT);
            }
          return CUP$VParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 86: // vb_message ::= vb_arithmetic_op CONCAT vb_message 
            {
              Operation RESULT =null;
		int value1left = ((java_cup.runtime.Symbol)CUP$VParser$stack.elementAt(CUP$VParser$top-2)).left;
		int value1right = ((java_cup.runtime.Symbol)CUP$VParser$stack.elementAt(CUP$VParser$top-2)).right;
		Operation value1 = (Operation)((java_cup.runtime.Symbol) CUP$VParser$stack.elementAt(CUP$VParser$top-2)).value;
		int value2left = ((java_cup.runtime.Symbol)CUP$VParser$stack.peek()).left;
		int value2right = ((java_cup.runtime.Symbol)CUP$VParser$stack.peek()).right;
		Operation value2 = (Operation)((java_cup.runtime.Symbol) CUP$VParser$stack.peek()).value;
		 RESULT = new Operation(value1, value2, OperationType.CONCAT); 
              CUP$VParser$result = parser.getSymbolFactory().newSymbol("vb_message",24, ((java_cup.runtime.Symbol)CUP$VParser$stack.elementAt(CUP$VParser$top-2)), ((java_cup.runtime.Symbol)CUP$VParser$stack.peek()), RESULT);
            }
          return CUP$VParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 87: // vb_message ::= LITERAL 
            {
              Operation RESULT =null;
		int valueleft = ((java_cup.runtime.Symbol)CUP$VParser$stack.peek()).left;
		int valueright = ((java_cup.runtime.Symbol)CUP$VParser$stack.peek()).right;
		String value = (String)((java_cup.runtime.Symbol) CUP$VParser$stack.peek()).value;
		 RESULT = new Operation(value); 
              CUP$VParser$result = parser.getSymbolFactory().newSymbol("vb_message",24, ((java_cup.runtime.Symbol)CUP$VParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$VParser$stack.peek()), RESULT);
            }
          return CUP$VParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 88: // vb_message ::= CHARACTER 
            {
              Operation RESULT =null;
		int valueleft = ((java_cup.runtime.Symbol)CUP$VParser$stack.peek()).left;
		int valueright = ((java_cup.runtime.Symbol)CUP$VParser$stack.peek()).right;
		char value = (char)((java_cup.runtime.Symbol) CUP$VParser$stack.peek()).value;
		 RESULT = new Operation(value); 
              CUP$VParser$result = parser.getSymbolFactory().newSymbol("vb_message",24, ((java_cup.runtime.Symbol)CUP$VParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$VParser$stack.peek()), RESULT);
            }
          return CUP$VParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 89: // vb_message ::= vb_arithmetic_op 
            {
              Operation RESULT =null;
		int valueleft = ((java_cup.runtime.Symbol)CUP$VParser$stack.peek()).left;
		int valueright = ((java_cup.runtime.Symbol)CUP$VParser$stack.peek()).right;
		Operation value = (Operation)((java_cup.runtime.Symbol) CUP$VParser$stack.peek()).value;
		 RESULT = value; 
              CUP$VParser$result = parser.getSymbolFactory().newSymbol("vb_message",24, ((java_cup.runtime.Symbol)CUP$VParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$VParser$stack.peek()), RESULT);
            }
          return CUP$VParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 90: // vb_data_request ::= INTINPUT 
            {
              Object RESULT =null;

              CUP$VParser$result = parser.getSymbolFactory().newSymbol("vb_data_request",3, ((java_cup.runtime.Symbol)CUP$VParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$VParser$stack.peek()), RESULT);
            }
          return CUP$VParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 91: // vb_data_request ::= FLOATINPUT 
            {
              Object RESULT =null;

              CUP$VParser$result = parser.getSymbolFactory().newSymbol("vb_data_request",3, ((java_cup.runtime.Symbol)CUP$VParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$VParser$stack.peek()), RESULT);
            }
          return CUP$VParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 92: // vb_data_request ::= CHARINPUT 
            {
              Object RESULT =null;

              CUP$VParser$result = parser.getSymbolFactory().newSymbol("vb_data_request",3, ((java_cup.runtime.Symbol)CUP$VParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$VParser$stack.peek()), RESULT);
            }
          return CUP$VParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 93: // vb_if ::= IF vb_logical_op THEN vb_code_statements END IF 
            {
              Instruction RESULT =null;
		int conditionleft = ((java_cup.runtime.Symbol)CUP$VParser$stack.elementAt(CUP$VParser$top-4)).left;
		int conditionright = ((java_cup.runtime.Symbol)CUP$VParser$stack.elementAt(CUP$VParser$top-4)).right;
		Operation condition = (Operation)((java_cup.runtime.Symbol) CUP$VParser$stack.elementAt(CUP$VParser$top-4)).value;
		int instructionsleft = ((java_cup.runtime.Symbol)CUP$VParser$stack.elementAt(CUP$VParser$top-2)).left;
		int instructionsright = ((java_cup.runtime.Symbol)CUP$VParser$stack.elementAt(CUP$VParser$top-2)).right;
		LinkedList<Instruction> instructions = (LinkedList<Instruction>)((java_cup.runtime.Symbol) CUP$VParser$stack.elementAt(CUP$VParser$top-2)).value;
		 RESULT = new If(condition, instructions); 
              CUP$VParser$result = parser.getSymbolFactory().newSymbol("vb_if",13, ((java_cup.runtime.Symbol)CUP$VParser$stack.elementAt(CUP$VParser$top-5)), ((java_cup.runtime.Symbol)CUP$VParser$stack.peek()), RESULT);
            }
          return CUP$VParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 94: // vb_if ::= IF vb_logical_op THEN vb_code_statements ELSE vb_code_statements END IF 
            {
              Instruction RESULT =null;
		int conditionleft = ((java_cup.runtime.Symbol)CUP$VParser$stack.elementAt(CUP$VParser$top-6)).left;
		int conditionright = ((java_cup.runtime.Symbol)CUP$VParser$stack.elementAt(CUP$VParser$top-6)).right;
		Operation condition = (Operation)((java_cup.runtime.Symbol) CUP$VParser$stack.elementAt(CUP$VParser$top-6)).value;
		int instructionsleft = ((java_cup.runtime.Symbol)CUP$VParser$stack.elementAt(CUP$VParser$top-4)).left;
		int instructionsright = ((java_cup.runtime.Symbol)CUP$VParser$stack.elementAt(CUP$VParser$top-4)).right;
		LinkedList<Instruction> instructions = (LinkedList<Instruction>)((java_cup.runtime.Symbol) CUP$VParser$stack.elementAt(CUP$VParser$top-4)).value;
		int elseInstructionsleft = ((java_cup.runtime.Symbol)CUP$VParser$stack.elementAt(CUP$VParser$top-2)).left;
		int elseInstructionsright = ((java_cup.runtime.Symbol)CUP$VParser$stack.elementAt(CUP$VParser$top-2)).right;
		LinkedList<Instruction> elseInstructions = (LinkedList<Instruction>)((java_cup.runtime.Symbol) CUP$VParser$stack.elementAt(CUP$VParser$top-2)).value;
		 RESULT = new If(condition, instructions, elseInstructions); 
              CUP$VParser$result = parser.getSymbolFactory().newSymbol("vb_if",13, ((java_cup.runtime.Symbol)CUP$VParser$stack.elementAt(CUP$VParser$top-7)), ((java_cup.runtime.Symbol)CUP$VParser$stack.peek()), RESULT);
            }
          return CUP$VParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 95: // vb_if ::= IF vb_logical_op THEN vb_code_statements vb_else_if END IF 
            {
              Instruction RESULT =null;
		int conditionleft = ((java_cup.runtime.Symbol)CUP$VParser$stack.elementAt(CUP$VParser$top-5)).left;
		int conditionright = ((java_cup.runtime.Symbol)CUP$VParser$stack.elementAt(CUP$VParser$top-5)).right;
		Operation condition = (Operation)((java_cup.runtime.Symbol) CUP$VParser$stack.elementAt(CUP$VParser$top-5)).value;
		int instructionsleft = ((java_cup.runtime.Symbol)CUP$VParser$stack.elementAt(CUP$VParser$top-3)).left;
		int instructionsright = ((java_cup.runtime.Symbol)CUP$VParser$stack.elementAt(CUP$VParser$top-3)).right;
		LinkedList<Instruction> instructions = (LinkedList<Instruction>)((java_cup.runtime.Symbol) CUP$VParser$stack.elementAt(CUP$VParser$top-3)).value;
		int elseIfInstructionsleft = ((java_cup.runtime.Symbol)CUP$VParser$stack.elementAt(CUP$VParser$top-2)).left;
		int elseIfInstructionsright = ((java_cup.runtime.Symbol)CUP$VParser$stack.elementAt(CUP$VParser$top-2)).right;
		LinkedList<Instruction> elseIfInstructions = (LinkedList<Instruction>)((java_cup.runtime.Symbol) CUP$VParser$stack.elementAt(CUP$VParser$top-2)).value;
		 RESULT = new If(condition, instructions, elseIfInstructions, null); 
              CUP$VParser$result = parser.getSymbolFactory().newSymbol("vb_if",13, ((java_cup.runtime.Symbol)CUP$VParser$stack.elementAt(CUP$VParser$top-6)), ((java_cup.runtime.Symbol)CUP$VParser$stack.peek()), RESULT);
            }
          return CUP$VParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 96: // vb_if ::= IF vb_logical_op THEN vb_code_statements vb_else_if ELSE vb_code_statements END IF 
            {
              Instruction RESULT =null;
		int conditionleft = ((java_cup.runtime.Symbol)CUP$VParser$stack.elementAt(CUP$VParser$top-7)).left;
		int conditionright = ((java_cup.runtime.Symbol)CUP$VParser$stack.elementAt(CUP$VParser$top-7)).right;
		Operation condition = (Operation)((java_cup.runtime.Symbol) CUP$VParser$stack.elementAt(CUP$VParser$top-7)).value;
		int instructionsleft = ((java_cup.runtime.Symbol)CUP$VParser$stack.elementAt(CUP$VParser$top-5)).left;
		int instructionsright = ((java_cup.runtime.Symbol)CUP$VParser$stack.elementAt(CUP$VParser$top-5)).right;
		LinkedList<Instruction> instructions = (LinkedList<Instruction>)((java_cup.runtime.Symbol) CUP$VParser$stack.elementAt(CUP$VParser$top-5)).value;
		int elseIfInstructionsleft = ((java_cup.runtime.Symbol)CUP$VParser$stack.elementAt(CUP$VParser$top-4)).left;
		int elseIfInstructionsright = ((java_cup.runtime.Symbol)CUP$VParser$stack.elementAt(CUP$VParser$top-4)).right;
		LinkedList<Instruction> elseIfInstructions = (LinkedList<Instruction>)((java_cup.runtime.Symbol) CUP$VParser$stack.elementAt(CUP$VParser$top-4)).value;
		int elseInstructionsleft = ((java_cup.runtime.Symbol)CUP$VParser$stack.elementAt(CUP$VParser$top-2)).left;
		int elseInstructionsright = ((java_cup.runtime.Symbol)CUP$VParser$stack.elementAt(CUP$VParser$top-2)).right;
		LinkedList<Instruction> elseInstructions = (LinkedList<Instruction>)((java_cup.runtime.Symbol) CUP$VParser$stack.elementAt(CUP$VParser$top-2)).value;
		 RESULT = new If(condition, instructions, elseIfInstructions, elseInstructions); 
              CUP$VParser$result = parser.getSymbolFactory().newSymbol("vb_if",13, ((java_cup.runtime.Symbol)CUP$VParser$stack.elementAt(CUP$VParser$top-8)), ((java_cup.runtime.Symbol)CUP$VParser$stack.peek()), RESULT);
            }
          return CUP$VParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 97: // vb_else_if ::= ELSEIF vb_logical_op THEN vb_code_statements vb_else_if 
            {
              LinkedList<Instruction> RESULT =null;
		int conditionleft = ((java_cup.runtime.Symbol)CUP$VParser$stack.elementAt(CUP$VParser$top-3)).left;
		int conditionright = ((java_cup.runtime.Symbol)CUP$VParser$stack.elementAt(CUP$VParser$top-3)).right;
		Operation condition = (Operation)((java_cup.runtime.Symbol) CUP$VParser$stack.elementAt(CUP$VParser$top-3)).value;
		int instructionsleft = ((java_cup.runtime.Symbol)CUP$VParser$stack.elementAt(CUP$VParser$top-1)).left;
		int instructionsright = ((java_cup.runtime.Symbol)CUP$VParser$stack.elementAt(CUP$VParser$top-1)).right;
		LinkedList<Instruction> instructions = (LinkedList<Instruction>)((java_cup.runtime.Symbol) CUP$VParser$stack.elementAt(CUP$VParser$top-1)).value;
		int instructionsListleft = ((java_cup.runtime.Symbol)CUP$VParser$stack.peek()).left;
		int instructionsListright = ((java_cup.runtime.Symbol)CUP$VParser$stack.peek()).right;
		LinkedList<Instruction> instructionsList = (LinkedList<Instruction>)((java_cup.runtime.Symbol) CUP$VParser$stack.peek()).value;
		 instructionsList.addFirst(new If(condition, instructions));  RESULT = instructionsList; 
              CUP$VParser$result = parser.getSymbolFactory().newSymbol("vb_else_if",30, ((java_cup.runtime.Symbol)CUP$VParser$stack.elementAt(CUP$VParser$top-4)), ((java_cup.runtime.Symbol)CUP$VParser$stack.peek()), RESULT);
            }
          return CUP$VParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 98: // vb_else_if ::= ELSEIF vb_logical_op THEN vb_code_statements 
            {
              LinkedList<Instruction> RESULT =null;
		int conditionleft = ((java_cup.runtime.Symbol)CUP$VParser$stack.elementAt(CUP$VParser$top-2)).left;
		int conditionright = ((java_cup.runtime.Symbol)CUP$VParser$stack.elementAt(CUP$VParser$top-2)).right;
		Operation condition = (Operation)((java_cup.runtime.Symbol) CUP$VParser$stack.elementAt(CUP$VParser$top-2)).value;
		int instructionsleft = ((java_cup.runtime.Symbol)CUP$VParser$stack.peek()).left;
		int instructionsright = ((java_cup.runtime.Symbol)CUP$VParser$stack.peek()).right;
		LinkedList<Instruction> instructions = (LinkedList<Instruction>)((java_cup.runtime.Symbol) CUP$VParser$stack.peek()).value;
		 RESULT = new LinkedList<Instruction>(); RESULT.add(new If(condition, instructions)); 
              CUP$VParser$result = parser.getSymbolFactory().newSymbol("vb_else_if",30, ((java_cup.runtime.Symbol)CUP$VParser$stack.elementAt(CUP$VParser$top-3)), ((java_cup.runtime.Symbol)CUP$VParser$stack.peek()), RESULT);
            }
          return CUP$VParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 99: // vb_switch ::= SELECT CASE ID CASE vb_switch_data vb_code_statements vb_switch_cases 
            {
              Object RESULT =null;

              CUP$VParser$result = parser.getSymbolFactory().newSymbol("vb_switch",1, ((java_cup.runtime.Symbol)CUP$VParser$stack.elementAt(CUP$VParser$top-6)), ((java_cup.runtime.Symbol)CUP$VParser$stack.peek()), RESULT);
            }
          return CUP$VParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 100: // vb_switch ::= SELECT CASE ID END SELECT 
            {
              Object RESULT =null;

              CUP$VParser$result = parser.getSymbolFactory().newSymbol("vb_switch",1, ((java_cup.runtime.Symbol)CUP$VParser$stack.elementAt(CUP$VParser$top-4)), ((java_cup.runtime.Symbol)CUP$VParser$stack.peek()), RESULT);
            }
          return CUP$VParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 101: // vb_switch_cases ::= CASE vb_switch_data vb_code_statements vb_switch_cases 
            {
              Object RESULT =null;

              CUP$VParser$result = parser.getSymbolFactory().newSymbol("vb_switch_cases",2, ((java_cup.runtime.Symbol)CUP$VParser$stack.elementAt(CUP$VParser$top-3)), ((java_cup.runtime.Symbol)CUP$VParser$stack.peek()), RESULT);
            }
          return CUP$VParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 102: // vb_switch_cases ::= END SELECT 
            {
              Object RESULT =null;

              CUP$VParser$result = parser.getSymbolFactory().newSymbol("vb_switch_cases",2, ((java_cup.runtime.Symbol)CUP$VParser$stack.elementAt(CUP$VParser$top-1)), ((java_cup.runtime.Symbol)CUP$VParser$stack.peek()), RESULT);
            }
          return CUP$VParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 103: // vb_switch_cases ::= CASE ELSE vb_code_statements END SELECT 
            {
              Object RESULT =null;

              CUP$VParser$result = parser.getSymbolFactory().newSymbol("vb_switch_cases",2, ((java_cup.runtime.Symbol)CUP$VParser$stack.elementAt(CUP$VParser$top-4)), ((java_cup.runtime.Symbol)CUP$VParser$stack.peek()), RESULT);
            }
          return CUP$VParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 104: // vb_switch_data ::= INTEGERNUM 
            {
              Operation RESULT =null;
		int valueleft = ((java_cup.runtime.Symbol)CUP$VParser$stack.peek()).left;
		int valueright = ((java_cup.runtime.Symbol)CUP$VParser$stack.peek()).right;
		Integer value = (Integer)((java_cup.runtime.Symbol) CUP$VParser$stack.peek()).value;
		 RESULT = new Operation(value); 
              CUP$VParser$result = parser.getSymbolFactory().newSymbol("vb_switch_data",23, ((java_cup.runtime.Symbol)CUP$VParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$VParser$stack.peek()), RESULT);
            }
          return CUP$VParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 105: // vb_switch_data ::= DOUBLENUM 
            {
              Operation RESULT =null;
		int valueleft = ((java_cup.runtime.Symbol)CUP$VParser$stack.peek()).left;
		int valueright = ((java_cup.runtime.Symbol)CUP$VParser$stack.peek()).right;
		Double value = (Double)((java_cup.runtime.Symbol) CUP$VParser$stack.peek()).value;
		 RESULT = new Operation(value); 
              CUP$VParser$result = parser.getSymbolFactory().newSymbol("vb_switch_data",23, ((java_cup.runtime.Symbol)CUP$VParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$VParser$stack.peek()), RESULT);
            }
          return CUP$VParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 106: // vb_switch_data ::= CHARACTER 
            {
              Operation RESULT =null;
		int valueleft = ((java_cup.runtime.Symbol)CUP$VParser$stack.peek()).left;
		int valueright = ((java_cup.runtime.Symbol)CUP$VParser$stack.peek()).right;
		char value = (char)((java_cup.runtime.Symbol) CUP$VParser$stack.peek()).value;
		 RESULT = new Operation(value); 
              CUP$VParser$result = parser.getSymbolFactory().newSymbol("vb_switch_data",23, ((java_cup.runtime.Symbol)CUP$VParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$VParser$stack.peek()), RESULT);
            }
          return CUP$VParser$result;

          /* . . . . . .*/
          default:
            throw new Exception(
               "Invalid action number "+CUP$VParser$act_num+"found in internal parse table");

        }
    } /* end of method */

  /** Method splitting the generated action code into several parts. */
  public final java_cup.runtime.Symbol CUP$VParser$do_action(
    int                        CUP$VParser$act_num,
    java_cup.runtime.lr_parser CUP$VParser$parser,
    java.util.Stack            CUP$VParser$stack,
    int                        CUP$VParser$top)
    throws java.lang.Exception
    {
              return CUP$VParser$do_action_part00000000(
                               CUP$VParser$act_num,
                               CUP$VParser$parser,
                               CUP$VParser$stack,
                               CUP$VParser$top);
    }
}

}
