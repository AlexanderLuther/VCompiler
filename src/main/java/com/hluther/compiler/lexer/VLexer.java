/* The following code was generated by JFlex 1.7.0 */

package com.hluther.compiler.lexer;
import com.hluther.gui.VCompilerFrame;
import com.hluther.compiler.parser.VSym;
import java_cup.runtime.*;

/**
 * This class is a scanner generated by 
 * <a href="http://www.jflex.de/">JFlex</a> 1.7.0
 * from the specification file <tt>Lexer.flex</tt>
 */
public class VLexer implements java_cup.runtime.Scanner {

  /** This character denotes the end of file */
  public static final int YYEOF = -1;

  /** initial size of the lookahead buffer */
  private static final int ZZ_BUFFERSIZE = 16384;

  /** lexical states */
  public static final int YYINITIAL = 0;
  public static final int VISUAL_BASIC = 2;
  public static final int JAVA = 4;
  public static final int PHYTON = 6;
  public static final int C = 8;

  /**
   * ZZ_LEXSTATE[l] is the state in the DFA for the lexical state l
   * ZZ_LEXSTATE[l+1] is the state in the DFA for the lexical state l
   *                  at the beginning of a line
   * l is of the form l = 2*k, k a non negative integer
   */
  private static final int ZZ_LEXSTATE[] = { 
     0,  0,  1,  1,  2,  2,  3,  3,  4, 4
  };

  /** 
   * Translates characters to character classes
   */
  private static final String ZZ_CMAP_PACKED = 
    "\11\0\1\5\1\3\1\0\1\5\1\4\22\0\1\5\1\0\1\73"+
    "\2\0\1\6\1\72\1\0\1\64\1\65\1\12\1\56\1\70\1\57"+
    "\1\71\1\11\1\74\11\2\2\0\1\62\1\61\1\63\2\0\1\14"+
    "\1\10\1\46\1\15\1\32\1\26\1\76\1\1\1\42\1\13\1\1"+
    "\1\50\1\60\1\52\1\55\1\21\1\1\1\34\1\37\1\44\1\1"+
    "\1\7\1\47\1\1\1\75\1\1\1\66\1\0\1\67\1\0\1\1"+
    "\1\0\1\41\1\23\1\25\1\33\1\35\1\43\1\54\1\45\1\16"+
    "\2\1\1\24\1\17\1\27\1\31\1\51\1\1\1\36\1\20\1\30"+
    "\1\22\2\1\1\53\1\40\1\1\uffff\0\uffff\0\uffff\0\uffff\0\uffff\0\uffff\0\uffff\0\uffff\0\uffff\0\uffff\0\uffff\0\uffff\0\uffff\0\uffff\0\uffff\0\uffff\0\uff95\0";

  /** 
   * Translates characters to character classes
   */
  private static final char [] ZZ_CMAP = zzUnpackCMap(ZZ_CMAP_PACKED);

  /** 
   * Translates DFA states to action switch labels.
   */
  private static final int [] ZZ_ACTION = zzUnpackAction();

  private static final String ZZ_ACTION_PACKED_0 =
    "\5\0\1\1\2\2\2\1\1\3\1\4\1\1\1\3"+
    "\1\5\1\6\21\3\1\7\1\10\1\3\1\11\1\12"+
    "\1\13\1\14\1\15\1\16\1\17\1\20\1\21\1\22"+
    "\1\1\1\4\3\0\1\23\3\0\1\3\1\24\2\3"+
    "\1\25\14\3\1\26\1\3\1\27\11\3\1\30\1\3"+
    "\1\31\1\32\1\33\6\0\2\23\2\0\1\34\1\0"+
    "\1\3\1\35\1\36\5\3\1\37\1\3\1\40\1\3"+
    "\1\41\13\3\1\42\1\3\1\43\1\0\1\44\2\0"+
    "\1\45\1\0\1\46\1\0\6\3\1\47\1\3\1\50"+
    "\3\3\1\51\1\3\1\52\1\53\2\3\1\54\1\55"+
    "\1\56\1\57\1\0\1\46\1\0\1\60\13\3\1\61"+
    "\1\62\1\0\1\63\1\64\1\3\1\65\2\3\1\66"+
    "\1\67\1\70\4\3\1\0\3\3\1\71\1\3\1\72"+
    "\1\3\1\0\1\73\1\3\1\74\2\3\1\0\1\75"+
    "\1\3\1\76\1\0\1\77\1\100";

  private static int [] zzUnpackAction() {
    int [] result = new int[210];
    int offset = 0;
    offset = zzUnpackAction(ZZ_ACTION_PACKED_0, offset, result);
    return result;
  }

  private static int zzUnpackAction(String packed, int offset, int [] result) {
    int i = 0;       /* index in packed string  */
    int j = offset;  /* index in unpacked array */
    int l = packed.length();
    while (i < l) {
      int count = packed.charAt(i++);
      int value = packed.charAt(i++);
      do result[j++] = value; while (--count > 0);
    }
    return j;
  }


  /** 
   * Translates a state to a row index in the transition table
   */
  private static final int [] ZZ_ROWMAP = zzUnpackRowMap();

  private static final String ZZ_ROWMAP_PACKED_0 =
    "\0\0\0\77\0\176\0\275\0\374\0\u013b\0\u013b\0\u017a"+
    "\0\u01b9\0\u01f8\0\u0237\0\u0276\0\u02b5\0\u02f4\0\u01f8\0\u013b"+
    "\0\u0333\0\u0372\0\u03b1\0\u03f0\0\u042f\0\u046e\0\u04ad\0\u04ec"+
    "\0\u052b\0\u056a\0\u05a9\0\u05e8\0\u0627\0\u0666\0\u06a5\0\u06e4"+
    "\0\u0723\0\u013b\0\u013b\0\u0762\0\u013b\0\u07a1\0\u07e0\0\u013b"+
    "\0\u013b\0\u013b\0\u013b\0\u013b\0\u013b\0\u013b\0\u081f\0\u085e"+
    "\0\u089d\0\u08dc\0\u091b\0\u095a\0\u0999\0\u09d8\0\u0a17\0\u0a56"+
    "\0\u0237\0\u0a95\0\u0ad4\0\u0b13\0\u0b52\0\u0b91\0\u0bd0\0\u0c0f"+
    "\0\u0c4e\0\u0c8d\0\u0ccc\0\u0d0b\0\u0d4a\0\u0d89\0\u0dc8\0\u0e07"+
    "\0\u0237\0\u0e46\0\u0237\0\u0e85\0\u0ec4\0\u0f03\0\u0f42\0\u0f81"+
    "\0\u0fc0\0\u0fff\0\u103e\0\u107d\0\u0237\0\u10bc\0\u013b\0\u013b"+
    "\0\u013b\0\u10fb\0\u113a\0\u085e\0\u1179\0\u11b8\0\u11f7\0\u013b"+
    "\0\u1236\0\u1275\0\u12b4\0\u09d8\0\u12f3\0\u1332\0\u0237\0\u0237"+
    "\0\u1371\0\u13b0\0\u13ef\0\u142e\0\u146d\0\u0237\0\u14ac\0\u0237"+
    "\0\u14eb\0\u0237\0\u152a\0\u1569\0\u15a8\0\u15e7\0\u1626\0\u1665"+
    "\0\u16a4\0\u16e3\0\u1722\0\u1761\0\u17a0\0\u0237\0\u17df\0\u0237"+
    "\0\u181e\0\u013b\0\u185d\0\u189c\0\u013b\0\u18db\0\u1275\0\u191a"+
    "\0\u1959\0\u1998\0\u19d7\0\u1a16\0\u1a55\0\u1a94\0\u1ad3\0\u1b12"+
    "\0\u0237\0\u1b51\0\u1b90\0\u1bcf\0\u0237\0\u1c0e\0\u0237\0\u0237"+
    "\0\u1c4d\0\u1c8c\0\u0237\0\u0237\0\u013b\0\u013b\0\u1ccb\0\u013b"+
    "\0\u1d0a\0\u0237\0\u1d49\0\u1d88\0\u1dc7\0\u1e06\0\u1e45\0\u1e84"+
    "\0\u1ec3\0\u1f02\0\u1f41\0\u1f80\0\u1fbf\0\u1ffe\0\u0237\0\u203d"+
    "\0\u013b\0\u0237\0\u207c\0\u0237\0\u20bb\0\u20fa\0\u0237\0\u0237"+
    "\0\u0237\0\u2139\0\u2178\0\u21b7\0\u21f6\0\u2235\0\u2274\0\u22b3"+
    "\0\u22f2\0\u0237\0\u2331\0\u0237\0\u2370\0\u23af\0\u0237\0\u23ee"+
    "\0\u0237\0\u242d\0\u246c\0\u24ab\0\u0237\0\u24ea\0\u0237\0\u2529"+
    "\0\u0237\0\u013b";

  private static int [] zzUnpackRowMap() {
    int [] result = new int[210];
    int offset = 0;
    offset = zzUnpackRowMap(ZZ_ROWMAP_PACKED_0, offset, result);
    return result;
  }

  private static int zzUnpackRowMap(String packed, int offset, int [] result) {
    int i = 0;  /* index in packed string  */
    int j = offset;  /* index in unpacked array */
    int l = packed.length();
    while (i < l) {
      int high = packed.charAt(i++) << 16;
      result[j++] = high | packed.charAt(i++);
    }
    return j;
  }

  /** 
   * The transition table of the DFA
   */
  private static final int [] ZZ_TRANS = zzUnpackTrans();

  private static final String ZZ_TRANS_PACKED_0 =
    "\3\6\1\7\1\10\1\7\1\11\2\6\1\12\66\6"+
    "\1\13\1\14\1\7\1\10\1\7\1\15\1\13\1\16"+
    "\1\17\1\20\1\13\1\21\1\22\1\23\2\13\1\24"+
    "\3\13\1\25\1\26\3\13\1\27\1\13\1\30\2\13"+
    "\1\31\2\13\1\32\1\33\1\34\1\13\1\35\1\36"+
    "\1\37\1\13\1\40\2\13\1\41\1\42\1\43\1\44"+
    "\1\45\1\46\1\47\1\50\1\51\1\52\1\53\1\54"+
    "\1\55\1\56\1\57\1\60\2\13\6\0\1\61\76\0"+
    "\1\62\70\0\77\6\102\0\1\7\101\0\1\63\101\0"+
    "\1\64\1\65\65\0\2\13\4\0\2\13\2\0\43\13"+
    "\2\0\1\13\13\0\3\13\2\0\1\14\66\0\1\66"+
    "\2\0\1\14\10\0\1\67\71\0\2\13\4\0\2\13"+
    "\2\0\25\13\1\70\15\13\2\0\1\13\13\0\3\13"+
    "\1\0\2\13\4\0\2\13\2\0\5\13\1\71\6\13"+
    "\1\72\26\13\2\0\1\13\13\0\3\13\1\0\2\13"+
    "\4\0\2\13\2\0\3\13\1\73\12\13\1\74\24\13"+
    "\2\0\1\13\13\0\3\13\1\0\2\13\4\0\2\13"+
    "\2\0\14\13\1\75\26\13\2\0\1\13\13\0\3\13"+
    "\1\0\2\13\4\0\2\13\2\0\7\13\1\76\33\13"+
    "\2\0\1\13\13\0\3\13\1\0\2\13\4\0\2\13"+
    "\2\0\32\13\1\77\10\13\2\0\1\13\13\0\3\13"+
    "\1\0\2\13\4\0\2\13\2\0\7\13\1\100\6\13"+
    "\1\101\24\13\2\0\1\13\13\0\3\13\1\0\2\13"+
    "\4\0\2\13\2\0\11\13\1\102\2\13\1\103\26\13"+
    "\2\0\1\13\13\0\3\13\1\0\2\13\4\0\2\13"+
    "\2\0\22\13\1\104\20\13\2\0\1\13\13\0\3\13"+
    "\1\0\2\13\4\0\2\13\2\0\7\13\1\105\5\13"+
    "\1\106\4\13\1\107\20\13\2\0\1\13\13\0\3\13"+
    "\1\0\2\13\4\0\2\13\2\0\14\13\1\110\13\13"+
    "\1\111\12\13\2\0\1\13\13\0\3\13\1\0\2\13"+
    "\4\0\2\13\2\0\11\13\1\112\31\13\2\0\1\13"+
    "\13\0\3\13\1\0\2\13\4\0\2\13\2\0\16\13"+
    "\1\113\13\13\1\114\10\13\2\0\1\13\13\0\3\13"+
    "\1\0\2\13\4\0\2\13\2\0\16\13\1\115\7\13"+
    "\1\116\3\13\1\117\10\13\2\0\1\13\13\0\3\13"+
    "\1\0\2\13\4\0\2\13\2\0\23\13\1\120\6\13"+
    "\1\121\10\13\2\0\1\13\13\0\3\13\1\0\2\13"+
    "\4\0\2\13\2\0\16\13\1\122\24\13\2\0\1\13"+
    "\13\0\3\13\1\0\2\13\4\0\2\13\2\0\16\13"+
    "\1\123\3\13\1\124\20\13\2\0\1\13\13\0\3\13"+
    "\1\0\2\13\4\0\2\13\2\0\23\13\1\125\17\13"+
    "\2\0\1\13\13\0\3\13\1\0\2\13\4\0\2\13"+
    "\2\0\16\13\1\126\24\13\2\0\1\13\13\0\3\13"+
    "\61\0\1\127\1\0\1\130\74\0\1\131\15\0\12\132"+
    "\1\133\64\132\2\0\1\134\66\0\1\66\2\0\1\134"+
    "\10\0\1\135\76\0\1\136\77\0\1\137\67\0\3\64"+
    "\1\140\1\141\72\64\11\142\1\0\1\143\64\142\2\0"+
    "\1\144\71\0\1\144\15\0\1\145\64\0\2\13\4\0"+
    "\1\146\1\13\2\0\43\13\2\0\1\13\13\0\3\13"+
    "\1\0\2\13\4\0\2\13\2\0\20\13\1\147\22\13"+
    "\2\0\1\13\13\0\3\13\1\0\2\13\4\0\2\13"+
    "\2\0\4\13\1\150\36\13\2\0\1\13\13\0\3\13"+
    "\1\0\2\13\4\0\2\13\2\0\7\13\1\151\33\13"+
    "\2\0\1\13\13\0\3\13\1\0\2\13\4\0\2\13"+
    "\2\0\15\13\1\152\25\13\2\0\1\13\13\0\3\13"+
    "\1\0\2\13\4\0\2\13\2\0\10\13\1\153\32\13"+
    "\2\0\1\13\13\0\3\13\1\0\2\13\4\0\2\13"+
    "\2\0\26\13\1\154\14\13\2\0\1\13\13\0\3\13"+
    "\1\0\2\13\4\0\2\13\2\0\14\13\1\155\26\13"+
    "\2\0\1\13\13\0\3\13\1\0\2\13\4\0\2\13"+
    "\2\0\23\13\1\156\17\13\2\0\1\13\13\0\3\13"+
    "\1\0\2\13\4\0\2\13\2\0\5\13\1\157\35\13"+
    "\2\0\1\13\13\0\3\13\1\0\2\13\4\0\2\13"+
    "\2\0\20\13\1\160\22\13\2\0\1\13\13\0\3\13"+
    "\1\0\2\13\4\0\2\13\2\0\15\13\1\161\25\13"+
    "\2\0\1\13\13\0\3\13\1\0\2\13\4\0\2\13"+
    "\2\0\10\13\1\162\32\13\2\0\1\13\13\0\3\13"+
    "\1\0\2\13\4\0\2\13\2\0\22\13\1\163\20\13"+
    "\2\0\1\13\13\0\3\13\1\0\2\13\4\0\2\13"+
    "\2\0\11\13\1\164\31\13\2\0\1\13\13\0\3\13"+
    "\1\0\2\13\4\0\2\13\2\0\15\13\1\165\25\13"+
    "\2\0\1\13\13\0\3\13\1\0\2\13\4\0\2\13"+
    "\2\0\16\13\1\166\24\13\2\0\1\13\13\0\3\13"+
    "\1\0\2\13\4\0\2\13\2\0\22\13\1\167\20\13"+
    "\2\0\1\13\13\0\3\13\1\0\2\13\4\0\2\13"+
    "\2\0\14\13\1\170\26\13\2\0\1\13\13\0\3\13"+
    "\1\0\2\13\4\0\2\13\2\0\5\13\1\171\35\13"+
    "\2\0\1\13\13\0\3\13\1\0\2\13\4\0\2\13"+
    "\2\0\26\13\1\172\14\13\2\0\1\13\13\0\3\13"+
    "\1\0\2\13\4\0\2\13\2\0\3\13\1\173\37\13"+
    "\2\0\1\13\13\0\3\13\1\0\2\13\4\0\2\13"+
    "\2\0\3\13\1\174\37\13\2\0\1\13\13\0\3\13"+
    "\1\0\2\13\4\0\2\13\2\0\16\13\1\175\24\13"+
    "\2\0\1\13\13\0\3\13\1\0\2\13\4\0\2\13"+
    "\2\0\15\13\1\176\25\13\2\0\1\13\13\0\3\13"+
    "\1\0\2\13\4\0\2\13\2\0\40\13\1\177\2\13"+
    "\2\0\1\13\13\0\3\13\1\0\2\13\4\0\2\13"+
    "\2\0\20\13\1\200\22\13\2\0\1\13\13\0\3\13"+
    "\73\201\1\202\3\201\73\0\1\202\24\0\1\203\76\0"+
    "\1\204\65\0\1\205\71\0\1\140\73\0\12\142\1\206"+
    "\75\142\1\207\1\206\64\142\14\0\1\210\63\0\2\13"+
    "\4\0\2\13\2\0\26\13\1\211\14\13\2\0\1\13"+
    "\13\0\3\13\1\0\2\13\4\0\2\13\2\0\10\13"+
    "\1\212\32\13\2\0\1\13\13\0\3\13\1\0\2\13"+
    "\4\0\2\13\2\0\3\13\1\213\37\13\2\0\1\13"+
    "\13\0\3\13\1\0\2\13\4\0\2\13\2\0\11\13"+
    "\1\214\31\13\2\0\1\13\13\0\3\13\1\0\2\13"+
    "\4\0\2\13\2\0\23\13\1\215\17\13\2\0\1\13"+
    "\13\0\3\13\1\0\2\13\4\0\2\13\2\0\12\13"+
    "\1\216\30\13\2\0\1\13\13\0\3\13\1\0\2\13"+
    "\4\0\2\13\2\0\22\13\1\217\20\13\2\0\1\13"+
    "\13\0\3\13\1\0\2\13\4\0\2\13\2\0\7\13"+
    "\1\220\33\13\2\0\1\13\13\0\3\13\1\0\2\13"+
    "\4\0\2\13\2\0\36\13\1\221\4\13\2\0\1\13"+
    "\13\0\3\13\1\0\2\13\4\0\2\13\2\0\22\13"+
    "\1\222\20\13\2\0\1\13\13\0\3\13\1\0\2\13"+
    "\4\0\2\13\2\0\22\13\1\223\20\13\2\0\1\13"+
    "\13\0\3\13\1\0\2\13\4\0\2\13\2\0\26\13"+
    "\1\224\14\13\2\0\1\13\13\0\3\13\1\0\2\13"+
    "\4\0\2\13\2\0\14\13\1\225\26\13\2\0\1\13"+
    "\13\0\3\13\1\0\2\13\4\0\2\13\2\0\5\13"+
    "\1\226\35\13\2\0\1\13\13\0\3\13\1\0\2\13"+
    "\4\0\2\13\2\0\22\13\1\227\20\13\2\0\1\13"+
    "\13\0\3\13\1\0\2\13\4\0\2\13\2\0\23\13"+
    "\1\230\17\13\2\0\1\13\13\0\3\13\1\0\2\13"+
    "\4\0\2\13\2\0\15\13\1\231\25\13\2\0\1\13"+
    "\13\0\3\13\1\0\2\13\4\0\2\13\2\0\11\13"+
    "\1\232\31\13\2\0\1\13\13\0\3\13\1\0\2\13"+
    "\4\0\2\13\2\0\36\13\1\233\4\13\2\0\1\13"+
    "\13\0\3\13\1\0\2\13\4\0\2\13\2\0\15\13"+
    "\1\234\25\13\2\0\1\13\13\0\3\13\73\201\1\235"+
    "\3\201\75\0\1\236\35\0\1\237\42\0\11\142\1\240"+
    "\1\206\64\142\7\0\1\241\70\0\2\13\4\0\2\13"+
    "\2\0\11\13\1\242\31\13\2\0\1\13\13\0\3\13"+
    "\1\0\2\13\4\0\2\13\2\0\11\13\1\243\31\13"+
    "\2\0\1\13\13\0\3\13\1\0\2\13\4\0\2\13"+
    "\2\0\14\13\1\244\26\13\2\0\1\13\13\0\3\13"+
    "\1\0\2\13\4\0\2\13\2\0\3\13\1\245\37\13"+
    "\2\0\1\13\13\0\3\13\1\0\2\13\4\0\2\13"+
    "\2\0\3\13\1\246\37\13\2\0\1\13\13\0\3\13"+
    "\1\0\2\13\4\0\2\13\2\0\15\13\1\247\25\13"+
    "\2\0\1\13\13\0\3\13\1\0\2\13\4\0\2\13"+
    "\2\0\27\13\1\250\13\13\2\0\1\13\13\0\3\13"+
    "\1\0\2\13\4\0\2\13\2\0\23\13\1\251\17\13"+
    "\2\0\1\13\13\0\3\13\1\0\2\13\4\0\2\13"+
    "\2\0\12\13\1\252\30\13\2\0\1\13\13\0\3\13"+
    "\1\0\2\13\4\0\2\13\2\0\41\13\1\253\1\13"+
    "\2\0\1\13\13\0\3\13\1\0\2\13\4\0\2\13"+
    "\2\0\15\13\1\254\25\13\2\0\1\13\13\0\3\13"+
    "\1\0\2\13\4\0\2\13\2\0\16\13\1\255\24\13"+
    "\2\0\1\13\13\0\3\13\1\0\2\13\4\0\2\13"+
    "\2\0\22\13\1\256\20\13\2\0\1\13\13\0\3\13"+
    "\1\0\2\13\4\0\2\13\2\0\22\13\1\257\20\13"+
    "\2\0\1\13\13\0\3\13\55\0\1\260\35\0\1\261"+
    "\63\0\2\13\4\0\2\13\2\0\22\13\1\262\20\13"+
    "\2\0\1\13\13\0\3\13\1\0\2\13\4\0\2\13"+
    "\2\0\36\13\1\263\4\13\2\0\1\13\13\0\3\13"+
    "\1\0\2\13\4\0\2\13\2\0\12\13\1\264\30\13"+
    "\2\0\1\13\13\0\3\13\1\0\2\13\4\0\2\13"+
    "\2\0\14\13\1\265\26\13\2\0\1\13\13\0\3\13"+
    "\1\0\2\13\4\0\2\13\2\0\3\13\1\266\37\13"+
    "\2\0\1\13\13\0\3\13\1\0\2\13\4\0\2\13"+
    "\2\0\30\13\1\267\12\13\2\0\1\13\13\0\3\13"+
    "\1\0\2\13\4\0\2\13\2\0\14\13\1\270\26\13"+
    "\2\0\1\13\13\0\3\13\1\0\2\13\4\0\2\13"+
    "\2\0\15\13\1\271\25\13\2\0\1\13\13\0\3\13"+
    "\1\0\2\13\4\0\2\13\2\0\22\13\1\272\20\13"+
    "\2\0\1\13\13\0\3\13\1\0\2\13\4\0\2\13"+
    "\2\0\3\13\1\273\37\13\2\0\1\13\13\0\3\13"+
    "\1\0\2\13\4\0\2\13\2\0\11\13\1\274\31\13"+
    "\2\0\1\13\13\0\3\13\1\0\2\13\4\0\2\13"+
    "\2\0\35\13\1\275\5\13\2\0\1\13\13\0\3\13"+
    "\76\0\1\276\1\0\2\13\4\0\2\13\2\0\7\13"+
    "\1\277\33\13\2\0\1\13\13\0\3\13\1\0\2\13"+
    "\4\0\2\13\2\0\36\13\1\300\4\13\2\0\1\13"+
    "\13\0\3\13\1\0\2\13\4\0\2\13\2\0\16\13"+
    "\1\301\24\13\2\0\1\13\13\0\3\13\1\0\2\13"+
    "\4\0\2\13\2\0\23\13\1\302\17\13\2\0\1\13"+
    "\13\0\3\13\1\0\2\13\4\0\2\13\2\0\14\13"+
    "\1\303\26\13\2\0\1\13\13\0\3\13\1\0\2\13"+
    "\4\0\2\13\2\0\22\13\1\304\20\13\2\0\1\13"+
    "\13\0\3\13\1\0\2\13\4\0\2\13\2\0\3\13"+
    "\1\305\37\13\2\0\1\13\13\0\3\13\34\0\1\306"+
    "\43\0\2\13\4\0\2\13\2\0\15\13\1\307\25\13"+
    "\2\0\1\13\13\0\3\13\1\0\2\13\4\0\2\13"+
    "\2\0\7\13\1\310\33\13\2\0\1\13\13\0\3\13"+
    "\1\0\2\13\4\0\2\13\2\0\14\13\1\311\26\13"+
    "\2\0\1\13\13\0\3\13\1\0\2\13\4\0\2\13"+
    "\2\0\36\13\1\312\4\13\2\0\1\13\13\0\3\13"+
    "\1\0\2\13\4\0\2\13\2\0\14\13\1\313\26\13"+
    "\2\0\1\13\13\0\3\13\14\0\1\314\63\0\2\13"+
    "\4\0\2\13\2\0\15\13\1\315\25\13\2\0\1\13"+
    "\13\0\3\13\1\0\2\13\4\0\2\13\2\0\7\13"+
    "\1\316\33\13\2\0\1\13\13\0\3\13\1\0\2\13"+
    "\4\0\2\13\2\0\22\13\1\317\20\13\2\0\1\13"+
    "\13\0\3\13\60\0\1\320\17\0\2\13\4\0\2\13"+
    "\2\0\15\13\1\321\25\13\2\0\1\13\13\0\3\13"+
    "\14\0\1\322\62\0";

  private static int [] zzUnpackTrans() {
    int [] result = new int[9576];
    int offset = 0;
    offset = zzUnpackTrans(ZZ_TRANS_PACKED_0, offset, result);
    return result;
  }

  private static int zzUnpackTrans(String packed, int offset, int [] result) {
    int i = 0;       /* index in packed string  */
    int j = offset;  /* index in unpacked array */
    int l = packed.length();
    while (i < l) {
      int count = packed.charAt(i++);
      int value = packed.charAt(i++);
      value--;
      do result[j++] = value; while (--count > 0);
    }
    return j;
  }


  /* error codes */
  private static final int ZZ_UNKNOWN_ERROR = 0;
  private static final int ZZ_NO_MATCH = 1;
  private static final int ZZ_PUSHBACK_2BIG = 2;

  /* error messages for the codes above */
  private static final String ZZ_ERROR_MSG[] = {
    "Unknown internal scanner error",
    "Error: could not match input",
    "Error: pushback value was too large"
  };

  /**
   * ZZ_ATTRIBUTE[aState] contains the attributes of state <code>aState</code>
   */
  private static final int [] ZZ_ATTRIBUTE = zzUnpackAttribute();

  private static final String ZZ_ATTRIBUTE_PACKED_0 =
    "\5\0\2\11\10\1\1\11\21\1\2\11\1\1\1\11"+
    "\2\1\7\11\2\1\3\0\1\1\3\0\37\1\3\11"+
    "\6\0\1\11\1\1\2\0\1\1\1\0\33\1\1\0"+
    "\1\11\2\0\1\11\1\0\1\1\1\0\24\1\2\11"+
    "\1\0\1\11\1\0\16\1\1\0\1\11\14\1\1\0"+
    "\7\1\1\0\5\1\1\0\3\1\1\0\1\1\1\11";

  private static int [] zzUnpackAttribute() {
    int [] result = new int[210];
    int offset = 0;
    offset = zzUnpackAttribute(ZZ_ATTRIBUTE_PACKED_0, offset, result);
    return result;
  }

  private static int zzUnpackAttribute(String packed, int offset, int [] result) {
    int i = 0;       /* index in packed string  */
    int j = offset;  /* index in unpacked array */
    int l = packed.length();
    while (i < l) {
      int count = packed.charAt(i++);
      int value = packed.charAt(i++);
      do result[j++] = value; while (--count > 0);
    }
    return j;
  }

  /** the input device */
  private java.io.Reader zzReader;

  /** the current state of the DFA */
  private int zzState;

  /** the current lexical state */
  private int zzLexicalState = YYINITIAL;

  /** this buffer contains the current text to be matched and is
      the source of the yytext() string */
  private char zzBuffer[] = new char[ZZ_BUFFERSIZE];

  /** the textposition at the last accepting state */
  private int zzMarkedPos;

  /** the current text position in the buffer */
  private int zzCurrentPos;

  /** startRead marks the beginning of the yytext() string in the buffer */
  private int zzStartRead;

  /** endRead marks the last character in the buffer, that has been read
      from input */
  private int zzEndRead;

  /** number of newlines encountered up to the start of the matched text */
  private int yyline;

  /** the number of characters up to the start of the matched text */
  private int yychar;

  /**
   * the number of characters from the last newline up to the start of the 
   * matched text
   */
  private int yycolumn;

  /** 
   * zzAtBOL == true iff the scanner is currently at the beginning of a line
   */
  private boolean zzAtBOL = true;

  /** zzAtEOF == true iff the scanner is at the EOF */
  private boolean zzAtEOF;

  /** denotes if the user-EOF-code has already been executed */
  private boolean zzEOFDone;
  
  /** 
   * The number of occupied positions in zzBuffer beyond zzEndRead.
   * When a lead/high surrogate has been read from the input stream
   * into the final zzBuffer position, this will have a value of 1;
   * otherwise, it will have a value of 0.
   */
  private int zzFinalHighSurrogate = 0;

  /* user code: */
    private VCompilerFrame vCompilerFrame;
    private String errorLexeme; 
    private int line;
    private int column;

    public VLexer(java.io.Reader in, VCompilerFrame vCompilerFrame) {
        this.vCompilerFrame = vCompilerFrame;    
        this.zzReader = in;
        this.errorLexeme = "";
        line = -1;
        column = -1;
    }
        
    private Symbol symbol(int type, Object value) {
        return new Symbol(type, yyline+1, yycolumn, value);
    }

    private Symbol symbol(int type) {
        return new Symbol(type, yyline+1, yycolumn);
    }

    private void printToken(String token){
        System.out.println(token);
    }

    private void createErrorLexeme(String lexeme, int line, int column){
        if(this.line == -1 && this.column == -1){
            this.line = line;
            this.column = column;
        }
        errorLexeme = errorLexeme + lexeme;
    }

    private void printError(){
        if(line != -1 && column != -1){
          //  vCompilerFrame.printMessage("Error Lexico: Lexema ["+errorLexeme+"] no reconocido en esta seccion del archivo. Linea: "+line+" Columna: "+column + "\n");
            errorLexeme = "";
            line = -1;
            column = -1;
        }
    }



  /**
   * Creates a new scanner
   *
   * @param   in  the java.io.Reader to read input from.
   */
  public VLexer(java.io.Reader in) {
    this.zzReader = in;
  }


  /** 
   * Unpacks the compressed character translation table.
   *
   * @param packed   the packed character translation table
   * @return         the unpacked character translation table
   */
  private static char [] zzUnpackCMap(String packed) {
    char [] map = new char[0x110000];
    int i = 0;  /* index in packed string  */
    int j = 0;  /* index in unpacked array */
    while (i < 204) {
      int  count = packed.charAt(i++);
      char value = packed.charAt(i++);
      do map[j++] = value; while (--count > 0);
    }
    return map;
  }


  /**
   * Refills the input buffer.
   *
   * @return      <code>false</code>, iff there was new input.
   * 
   * @exception   java.io.IOException  if any I/O-Error occurs
   */
  private boolean zzRefill() throws java.io.IOException {

    /* first: make room (if you can) */
    if (zzStartRead > 0) {
      zzEndRead += zzFinalHighSurrogate;
      zzFinalHighSurrogate = 0;
      System.arraycopy(zzBuffer, zzStartRead,
                       zzBuffer, 0,
                       zzEndRead-zzStartRead);

      /* translate stored positions */
      zzEndRead-= zzStartRead;
      zzCurrentPos-= zzStartRead;
      zzMarkedPos-= zzStartRead;
      zzStartRead = 0;
    }

    /* is the buffer big enough? */
    if (zzCurrentPos >= zzBuffer.length - zzFinalHighSurrogate) {
      /* if not: blow it up */
      char newBuffer[] = new char[zzBuffer.length*2];
      System.arraycopy(zzBuffer, 0, newBuffer, 0, zzBuffer.length);
      zzBuffer = newBuffer;
      zzEndRead += zzFinalHighSurrogate;
      zzFinalHighSurrogate = 0;
    }

    /* fill the buffer with new input */
    int requested = zzBuffer.length - zzEndRead;
    int numRead = zzReader.read(zzBuffer, zzEndRead, requested);

    /* not supposed to occur according to specification of java.io.Reader */
    if (numRead == 0) {
      throw new java.io.IOException("Reader returned 0 characters. See JFlex examples for workaround.");
    }
    if (numRead > 0) {
      zzEndRead += numRead;
      /* If numRead == requested, we might have requested to few chars to
         encode a full Unicode character. We assume that a Reader would
         otherwise never return half characters. */
      if (numRead == requested) {
        if (Character.isHighSurrogate(zzBuffer[zzEndRead - 1])) {
          --zzEndRead;
          zzFinalHighSurrogate = 1;
        }
      }
      /* potentially more input available */
      return false;
    }

    /* numRead < 0 ==> end of stream */
    return true;
  }

    
  /**
   * Closes the input stream.
   */
  public final void yyclose() throws java.io.IOException {
    zzAtEOF = true;            /* indicate end of file */
    zzEndRead = zzStartRead;  /* invalidate buffer    */

    if (zzReader != null)
      zzReader.close();
  }


  /**
   * Resets the scanner to read from a new input stream.
   * Does not close the old reader.
   *
   * All internal variables are reset, the old input stream 
   * <b>cannot</b> be reused (internal buffer is discarded and lost).
   * Lexical state is set to <tt>ZZ_INITIAL</tt>.
   *
   * Internal scan buffer is resized down to its initial length, if it has grown.
   *
   * @param reader   the new input stream 
   */
  public final void yyreset(java.io.Reader reader) {
    zzReader = reader;
    zzAtBOL  = true;
    zzAtEOF  = false;
    zzEOFDone = false;
    zzEndRead = zzStartRead = 0;
    zzCurrentPos = zzMarkedPos = 0;
    zzFinalHighSurrogate = 0;
    yyline = yychar = yycolumn = 0;
    zzLexicalState = YYINITIAL;
    if (zzBuffer.length > ZZ_BUFFERSIZE)
      zzBuffer = new char[ZZ_BUFFERSIZE];
  }


  /**
   * Returns the current lexical state.
   */
  public final int yystate() {
    return zzLexicalState;
  }


  /**
   * Enters a new lexical state
   *
   * @param newState the new lexical state
   */
  public final void yybegin(int newState) {
    zzLexicalState = newState;
  }


  /**
   * Returns the text matched by the current regular expression.
   */
  public final String yytext() {
    return new String( zzBuffer, zzStartRead, zzMarkedPos-zzStartRead );
  }


  /**
   * Returns the character at position <tt>pos</tt> from the 
   * matched text. 
   * 
   * It is equivalent to yytext().charAt(pos), but faster
   *
   * @param pos the position of the character to fetch. 
   *            A value from 0 to yylength()-1.
   *
   * @return the character at position pos
   */
  public final char yycharat(int pos) {
    return zzBuffer[zzStartRead+pos];
  }


  /**
   * Returns the length of the matched text region.
   */
  public final int yylength() {
    return zzMarkedPos-zzStartRead;
  }


  /**
   * Reports an error that occured while scanning.
   *
   * In a wellformed scanner (no or only correct usage of 
   * yypushback(int) and a match-all fallback rule) this method 
   * will only be called with things that "Can't Possibly Happen".
   * If this method is called, something is seriously wrong
   * (e.g. a JFlex bug producing a faulty scanner etc.).
   *
   * Usual syntax/scanner level error handling should be done
   * in error fallback rules.
   *
   * @param   errorCode  the code of the errormessage to display
   */
  private void zzScanError(int errorCode) {
    String message;
    try {
      message = ZZ_ERROR_MSG[errorCode];
    }
    catch (ArrayIndexOutOfBoundsException e) {
      message = ZZ_ERROR_MSG[ZZ_UNKNOWN_ERROR];
    }

    throw new Error(message);
  } 


  /**
   * Pushes the specified amount of characters back into the input stream.
   *
   * They will be read again by then next call of the scanning method
   *
   * @param number  the number of characters to be read again.
   *                This number must not be greater than yylength()!
   */
  public void yypushback(int number)  {
    if ( number > yylength() )
      zzScanError(ZZ_PUSHBACK_2BIG);

    zzMarkedPos -= number;
  }


  /**
   * Contains user EOF-code, which will be executed exactly once,
   * when the end of file is reached
   */
  private void zzDoEOF() throws java.io.IOException {
    if (!zzEOFDone) {
      zzEOFDone = true;
      yyclose();
    }
  }


  /**
   * Resumes scanning until the next regular expression is matched,
   * the end of input is encountered or an I/O-Error occurs.
   *
   * @return      the next token
   * @exception   java.io.IOException  if any I/O-Error occurs
   */
  public java_cup.runtime.Symbol next_token() throws java.io.IOException {
    int zzInput;
    int zzAction;

    // cached fields:
    int zzCurrentPosL;
    int zzMarkedPosL;
    int zzEndReadL = zzEndRead;
    char [] zzBufferL = zzBuffer;
    char [] zzCMapL = ZZ_CMAP;

    int [] zzTransL = ZZ_TRANS;
    int [] zzRowMapL = ZZ_ROWMAP;
    int [] zzAttrL = ZZ_ATTRIBUTE;

    while (true) {
      zzMarkedPosL = zzMarkedPos;

      boolean zzR = false;
      int zzCh;
      int zzCharCount;
      for (zzCurrentPosL = zzStartRead  ;
           zzCurrentPosL < zzMarkedPosL ;
           zzCurrentPosL += zzCharCount ) {
        zzCh = Character.codePointAt(zzBufferL, zzCurrentPosL, zzMarkedPosL);
        zzCharCount = Character.charCount(zzCh);
        switch (zzCh) {
        case '\u000B':  // fall through
        case '\u000C':  // fall through
        case '\u0085':  // fall through
        case '\u2028':  // fall through
        case '\u2029':
          yyline++;
          yycolumn = 0;
          zzR = false;
          break;
        case '\r':
          yyline++;
          yycolumn = 0;
          zzR = true;
          break;
        case '\n':
          if (zzR)
            zzR = false;
          else {
            yyline++;
            yycolumn = 0;
          }
          break;
        default:
          zzR = false;
          yycolumn += zzCharCount;
        }
      }

      if (zzR) {
        // peek one character ahead if it is \n (if we have counted one line too much)
        boolean zzPeek;
        if (zzMarkedPosL < zzEndReadL)
          zzPeek = zzBufferL[zzMarkedPosL] == '\n';
        else if (zzAtEOF)
          zzPeek = false;
        else {
          boolean eof = zzRefill();
          zzEndReadL = zzEndRead;
          zzMarkedPosL = zzMarkedPos;
          zzBufferL = zzBuffer;
          if (eof) 
            zzPeek = false;
          else 
            zzPeek = zzBufferL[zzMarkedPosL] == '\n';
        }
        if (zzPeek) yyline--;
      }
      zzAction = -1;

      zzCurrentPosL = zzCurrentPos = zzStartRead = zzMarkedPosL;
  
      zzState = ZZ_LEXSTATE[zzLexicalState];

      // set up zzAction for empty match case:
      int zzAttributes = zzAttrL[zzState];
      if ( (zzAttributes & 1) == 1 ) {
        zzAction = zzState;
      }


      zzForAction: {
        while (true) {
    
          if (zzCurrentPosL < zzEndReadL) {
            zzInput = Character.codePointAt(zzBufferL, zzCurrentPosL, zzEndReadL);
            zzCurrentPosL += Character.charCount(zzInput);
          }
          else if (zzAtEOF) {
            zzInput = YYEOF;
            break zzForAction;
          }
          else {
            // store back cached positions
            zzCurrentPos  = zzCurrentPosL;
            zzMarkedPos   = zzMarkedPosL;
            boolean eof = zzRefill();
            // get translated positions and possibly new buffer
            zzCurrentPosL  = zzCurrentPos;
            zzMarkedPosL   = zzMarkedPos;
            zzBufferL      = zzBuffer;
            zzEndReadL     = zzEndRead;
            if (eof) {
              zzInput = YYEOF;
              break zzForAction;
            }
            else {
              zzInput = Character.codePointAt(zzBufferL, zzCurrentPosL, zzEndReadL);
              zzCurrentPosL += Character.charCount(zzInput);
            }
          }
          int zzNext = zzTransL[ zzRowMapL[zzState] + zzCMapL[zzInput] ];
          if (zzNext == -1) break zzForAction;
          zzState = zzNext;

          zzAttributes = zzAttrL[zzState];
          if ( (zzAttributes & 1) == 1 ) {
            zzAction = zzState;
            zzMarkedPosL = zzCurrentPosL;
            if ( (zzAttributes & 8) == 8 ) break zzForAction;
          }

        }
      }

      // store back cached position
      zzMarkedPos = zzMarkedPosL;

      if (zzInput == YYEOF && zzStartRead == zzCurrentPos) {
        zzAtEOF = true;
            zzDoEOF();
          { return new java_cup.runtime.Symbol(VSym.EOF); }
      }
      else {
        switch (zzAction < 0 ? zzAction : ZZ_ACTION[zzAction]) {
          case 1: 
            { printToken("ERROR"); createErrorLexeme(yytext(), (yyline+1), yycolumn);
            } 
            // fall through
          case 65: break;
          case 2: 
            { printError();
            } 
            // fall through
          case 66: break;
          case 3: 
            { printToken("ID"); printError(); return symbol(VSym.ID, yytext());
            } 
            // fall through
          case 67: break;
          case 4: 
            { printToken("INTEGERNUM"); printError(); return symbol(VSym.INTEGERNUM, Integer.parseInt(yytext()));
            } 
            // fall through
          case 68: break;
          case 5: 
            { printToken("DIVISION"); printError(); return symbol(VSym.DIVISION);
            } 
            // fall through
          case 69: break;
          case 6: 
            { printToken("MULTIPLICATION"); printError(); return symbol(VSym.MULTIPLICATION);
            } 
            // fall through
          case 70: break;
          case 7: 
            { printToken("PLUS"); printError(); return symbol(VSym.PLUS);
            } 
            // fall through
          case 71: break;
          case 8: 
            { printToken("MINUS"); printError(); return symbol(VSym.MINUS);
            } 
            // fall through
          case 72: break;
          case 9: 
            { printToken("EQUALS"); printError(); return symbol(VSym.EQUALS);
            } 
            // fall through
          case 73: break;
          case 10: 
            { printToken("LESSTHAN"); printError(); return symbol(VSym.LESSTHAN);
            } 
            // fall through
          case 74: break;
          case 11: 
            { printToken("GREATERTHAN"); printError(); return symbol(VSym.GREATERTHAN);
            } 
            // fall through
          case 75: break;
          case 12: 
            { printToken("PARENTHESISO"); printError(); return symbol(VSym.PARENTHESISO);
            } 
            // fall through
          case 76: break;
          case 13: 
            { printToken("PARENTHESISC"); printError(); return symbol(VSym.PARENTHESISC);
            } 
            // fall through
          case 77: break;
          case 14: 
            { printToken("SQUAREBRACKETO"); printError(); return symbol(VSym.SQUAREBRACKETO);
            } 
            // fall through
          case 78: break;
          case 15: 
            { printToken("SQUAREBRACKETC"); printError(); return symbol(VSym.SQUAREBRACKETC);
            } 
            // fall through
          case 79: break;
          case 16: 
            { printToken("COMMA"); printError(); return symbol(VSym.COMMA);
            } 
            // fall through
          case 80: break;
          case 17: 
            { printToken("FULLSTOP"); printError(); return symbol(VSym.FULLSTOP);
            } 
            // fall through
          case 81: break;
          case 18: 
            { printToken("CONCAT"); printError(); return symbol(VSym.CONCAT);
            } 
            // fall through
          case 82: break;
          case 19: 
            { printToken("LINECOMMENT"); printError();
            } 
            // fall through
          case 83: break;
          case 20: 
            { printToken("AS"); printError(); return symbol(VSym.AS);
            } 
            // fall through
          case 84: break;
          case 21: 
            { printToken("DO"); printError(); return symbol(VSym.DO);
            } 
            // fall through
          case 85: break;
          case 22: 
            { printToken("IF"); printError(); return symbol(VSym.IF);
            } 
            // fall through
          case 86: break;
          case 23: 
            { printToken("TO"); printError(); return symbol(VSym.TO);
            } 
            // fall through
          case 87: break;
          case 24: 
            { printToken("OR"); printError(); return symbol(VSym.OR);
            } 
            // fall through
          case 88: break;
          case 25: 
            { printToken("LESSEQUALTHAN"); printError(); return symbol(VSym.LESSEQUALTHAN);
            } 
            // fall through
          case 89: break;
          case 26: 
            { printToken("NOTEQUAL"); printError(); return symbol(VSym.NOTEQUAL);
            } 
            // fall through
          case 90: break;
          case 27: 
            { printToken("GREATEREQUALTHAN"); printError(); return symbol(VSym.GREATEREQUALTHAN);
            } 
            // fall through
          case 91: break;
          case 28: 
            { printToken("DOUBLENUM"); printError(); return symbol(VSym.DOUBLENUM, Double.parseDouble(yytext()));
            } 
            // fall through
          case 92: break;
          case 29: 
            { printToken("AND"); printError(); return symbol(VSym.AND);
            } 
            // fall through
          case 93: break;
          case 30: 
            { printToken("DIM"); printError(); return symbol(VSym.DIM);
            } 
            // fall through
          case 94: break;
          case 31: 
            { printToken("FOR"); printError(); return symbol(VSym.FOR);
            } 
            // fall through
          case 95: break;
          case 32: 
            { printToken("END"); printError(); return symbol(VSym.END);
            } 
            // fall through
          case 96: break;
          case 33: 
            { printToken("SUB"); printError(); return symbol(VSym.SUB);
            } 
            // fall through
          case 97: break;
          case 34: 
            { printToken("NOT"); printError(); return symbol(VSym.NOT);
            } 
            // fall through
          case 98: break;
          case 35: 
            { printToken("MOD"); printError(); return symbol(VSym.MOD);
            } 
            // fall through
          case 99: break;
          case 36: 
            { printToken("CHARACTER"); printError(); return symbol(VSym.CHARACTER, yytext().charAt(1));
            } 
            // fall through
          case 100: break;
          case 37: 
            { yybegin(VISUAL_BASIC); printToken("VB_SEPARATOR"); printError(); return symbol(VSym.VB_SEPARATOR);
            } 
            // fall through
          case 101: break;
          case 38: 
            { printToken("BLOCKCOMMENT"); printError();
            } 
            // fall through
          case 102: break;
          case 39: 
            { printToken("ELSE"); printError(); return symbol(VSym.ELSE);
            } 
            // fall through
          case 103: break;
          case 40: 
            { printToken("STEP"); printError(); return symbol(VSym.STEP);
            } 
            // fall through
          case 104: break;
          case 41: 
            { printToken("THEN"); printError(); return symbol(VSym.THEN);
            } 
            // fall through
          case 105: break;
          case 42: 
            { printToken("CASE"); printError(); return symbol(VSym.CASE);
            } 
            // fall through
          case 106: break;
          case 43: 
            { printToken("CHAR"); printError(); return symbol(VSym.CHAR);
            } 
            // fall through
          case 107: break;
          case 44: 
            { printToken("LOOP"); printError(); return symbol(VSym.LOOP);
            } 
            // fall through
          case 108: break;
          case 45: 
            { printToken("NEXT"); printError(); return symbol(VSym.NEXT);
            } 
            // fall through
          case 109: break;
          case 46: 
            { printToken("LITERAL"); printError(); return symbol(VSym.LITERAL, yytext());
            } 
            // fall through
          case 110: break;
          case 47: 
            { yybegin(PHYTON); printToken("P_SEPARATOR"); printError(); return symbol(VSym.P_SEPARATOR);
            } 
            // fall through
          case 111: break;
          case 48: 
            { printToken("BYVAL"); printError(); return symbol(VSym.BYVAL);
            } 
            // fall through
          case 112: break;
          case 49: 
            { printToken("WRITE"); printError(); return symbol(VSym.WRITE);
            } 
            // fall through
          case 113: break;
          case 50: 
            { printToken("WHILE"); printError(); return symbol(VSym.WHILE);
            } 
            // fall through
          case 114: break;
          case 51: 
            { yybegin(JAVA); printToken("J_SEPARATOR"); printError(); return symbol(VSym.J_SEPARATOR);
            } 
            // fall through
          case 115: break;
          case 52: 
            { printToken("DOUBLE"); printError(); return symbol(VSym.DOUBLE);
            } 
            // fall through
          case 116: break;
          case 53: 
            { printToken("PUBLIC"); printError(); return symbol(VSym.PUBLIC);
            } 
            // fall through
          case 117: break;
          case 54: 
            { printToken("ELSEIF"); printError(); return symbol(VSym.ELSEIF);
            } 
            // fall through
          case 118: break;
          case 55: 
            { printToken("RETURN"); printError(); return symbol(VSym.RETURN);
            } 
            // fall through
          case 119: break;
          case 56: 
            { printToken("SELECT"); printError(); return symbol(VSym.SELECT);
            } 
            // fall through
          case 120: break;
          case 57: 
            { printToken("INTEGER"); printError(); return symbol(VSym.INTEGER);
            } 
            // fall through
          case 121: break;
          case 58: 
            { printToken("CONSOLE"); printError(); return symbol(VSym.CONSOLE);
            } 
            // fall through
          case 122: break;
          case 59: 
            { printToken("INTINPUT"); printError(); return symbol(VSym.INTINPUT);
            } 
            // fall through
          case 123: break;
          case 60: 
            { printToken("FUNCTION"); printError(); return symbol(VSym.FUNCTION);
            } 
            // fall through
          case 124: break;
          case 61: 
            { printToken("CHARINPUT"); printError(); return symbol(VSym.CHARINPUT);
            } 
            // fall through
          case 125: break;
          case 62: 
            { printToken("WRITELINE"); printError(); return symbol(VSym.WRITELINE);
            } 
            // fall through
          case 126: break;
          case 63: 
            { printToken("FLOATINPUT"); printError(); return symbol(VSym.FLOATINPUT);
            } 
            // fall through
          case 127: break;
          case 64: 
            { yybegin(C); printToken("C_SEPARATOR"); printError(); return symbol(VSym.C_SEPARATOR);
            } 
            // fall through
          case 128: break;
          default:
            zzScanError(ZZ_NO_MATCH);
        }
      }
    }
  }

  /**
   * Converts an int token code into the name of the
   * token by reflection on the cup symbol class/interface sym
   *
   * This code was contributed by Karl Meissner <meissnersd@yahoo.com>
   */
  private String getTokenName(int token) {
    try {
      java.lang.reflect.Field [] classFields = VSym.class.getFields();
      for (int i = 0; i < classFields.length; i++) {
        if (classFields[i].getInt(null) == token) {
          return classFields[i].getName();
        }
      }
    } catch (Exception e) {
      e.printStackTrace(System.err);
    }

    return "UNKNOWN TOKEN";
  }

  /**
   * Same as next_token but also prints the token to standard out
   * for debugging.
   *
   * This code was contributed by Karl Meissner <meissnersd@yahoo.com>
   */
  public java_cup.runtime.Symbol debug_next_token() throws java.io.IOException {
    java_cup.runtime.Symbol s = next_token();
    System.out.println( "line:" + (yyline+1) + " col:" + (yycolumn+1) + " --"+ yytext() + "--" + getTokenName(s.sym) + "--");
    return s;
  }

  /**
   * Runs the scanner on input files.
   *
   * This main method is the debugging routine for the scanner.
   * It prints debugging information about each returned token to
   * System.out until the end of file is reached, or an error occured.
   *
   * @param argv   the command line, contains the filenames to run
   *               the scanner on.
   */
  public static void main(String argv[]) {
    if (argv.length == 0) {
      System.out.println("Usage : java VLexer [ --encoding <name> ] <inputfile(s)>");
    }
    else {
      int firstFilePos = 0;
      String encodingName = "UTF-8";
      if (argv[0].equals("--encoding")) {
        firstFilePos = 2;
        encodingName = argv[1];
        try {
          java.nio.charset.Charset.forName(encodingName); // Side-effect: is encodingName valid? 
        } catch (Exception e) {
          System.out.println("Invalid encoding '" + encodingName + "'");
          return;
        }
      }
      for (int i = firstFilePos; i < argv.length; i++) {
        VLexer scanner = null;
        try {
          java.io.FileInputStream stream = new java.io.FileInputStream(argv[i]);
          java.io.Reader reader = new java.io.InputStreamReader(stream, encodingName);
          scanner = new VLexer(reader);
          while ( !scanner.zzAtEOF ) scanner.debug_next_token();
        }
        catch (java.io.FileNotFoundException e) {
          System.out.println("File not found : \""+argv[i]+"\"");
        }
        catch (java.io.IOException e) {
          System.out.println("IO error scanning file \""+argv[i]+"\"");
          System.out.println(e);
        }
        catch (Exception e) {
          System.out.println("Unexpected exception:");
          e.printStackTrace();
        }
      }
    }
  }


}
